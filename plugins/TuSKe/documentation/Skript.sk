Events:
	At Time:
		ID: at_time
		Description:
			An event that occurs at a given minecraft time in every world or only in specific worlds.
		Examples:
			at 18:00
			at 7am in "world"
		Since:
			1.3.4
		Patterns:
			[on] at %-time% [in %-worlds%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	On Anvil Damage:
		ID: anvil_damage
		Description:
			Called when an anvil is damaged/broken from being used to repair/rename items.
			Note: this does not include anvil damage from falling.
		Examples:
			on anvil damage:
				cancel the event
		Since:
			2.7
		Patterns:
			[on] [on] anvil damag(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-inventory
		Cancellable: true
	On Anvil Prepare:
		ID: anvil_prepare
		Description:
			Called when an item is put in a slot for repair by an anvil. Please note that this event is called multiple times in a single item slot move.
		Examples:
			on anvil prepare:
				event-item is set # result item
				chance of 5%:
					set repair cost to repair cost * 50%
					send "You're LUCKY! You got 50% discount." to player
		Since:
			2.7
		Patterns:
			[on] [on] anvil prepar(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-itemstack
			event-inventory
		Cancellable: false
	On AoE Cloud Effect:
		ID: aoe_cloud_effect
		Description:
			Called when area effect cloud applies its potion effect. This happens every 5 ticks by default.
		Examples:
			on area cloud effect:
		Since:
			2.2-dev21
		Patterns:
			[on] [on] (area|AoE) [cloud] effect [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-potioneffecttype
			event-entity
			event-commandsender
			event-object
			event-location
			event-world
		Cancellable: true
	On Arm Swing:
		ID: arm_swing
		Description:
			Called when a player swings his arm.
		Examples:
			on arm swing:
				send "You swung your arm!"
		Since:
			2.5.1
		Patterns:
			[on] [on] [player] arm swing [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Armor Change:
		ID: armor_change
		Description:
			Called when armor pieces of a player are changed.
		Examples:
			on armor change:
				send "You equipped %event-item%!"
		Since:
			2.5
		Patterns:
			[on] [on] [player] armor change[d] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-itemstack
			event-world
		Cancellable: false
	On Bat Toggle Sleep:
		ID: bat_toggle_sleep
		Patterns:
			[on] [on] [bat] toggle sleep [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Bed Enter:
		ID: bed_enter
		Description:
			Called when a player starts sleeping.
		Examples:
			on bed enter:
		Since:
			1.0
		Patterns:
			[on] [on] bed enter[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] enter[ing] [a] bed [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-world
		Cancellable: true
	On Bed Leave:
		ID: bed_leave
		Description:
			Called when a player leaves a bed.
		Examples:
			on player leaving a bed:
		Since:
			1.0
		Patterns:
			[on] [on] bed leav(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] leav(e|ing) [a] bed [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-world
		Cancellable: true
	On Block Damage:
		ID: block_damage
		Description:
			Called when a player starts to break a block. You can usually just use the leftclick event for this.
		Examples:
			on block damaging:
				if block is log:
					send "You can't break the holy log!"
		Since:
			1.0
		Patterns:
			[on] [on] block damag(ing|e) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-player
			event-world
		Cancellable: true
	On Block Fertilize:
		ID: block_fertilize
		Description:
			Called when a player fertilizes blocks.
		Examples:
			on block fertilize:
				send "Fertilized %size of fertilized blocks% blocks got fertilized."
		Since:
			2.5
		Patterns:
			[on] [on] [block] fertilize [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-player
			event-object
			event-world
		Cancellable: true
	On Block Growth:
		ID: block_growth
		Description:
			Called when a crop grows. Alternative to new form of generic grow event.
		Examples:
			on crop growth:
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] [on] (plant|crop|block) grow[(th|ing)] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-world
		Cancellable: true
	On Book Edit:
		ID: book_edit
		Description:
			Called when a player edits a book.
		Examples:
			on book edit:
		Since:
			2.2-dev31
		Patterns:
			[on] [on] book (edit|change|write) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-object
			past event-itemstack
			event-player
			event-object
			event-itemstack
			event-world
		Cancellable: true
	On Book Editing:
		ID: book_editing
		Patterns:
			[on] [on] [book] edit [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-object
			past event-itemstack
			event-player
			event-object
			event-itemstack
			event-world
		Cancellable: true
	On Book Sign:
		ID: book_sign
		Description:
			Called when a player signs a book.
		Examples:
			on book sign:
		Since:
			2.2-dev31
		Patterns:
			[on] [on] book sign[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-object
			past event-itemstack
			event-player
			event-object
			event-itemstack
			event-world
		Cancellable: true
	On Break / Mine:
		ID: break_mine
		Description:
			Called when a block is broken by a player. If you use 'on mine', only events where the broken block dropped something will call the trigger.
		Examples:
			on mine:
			on break of stone:
			on mine of any ore:
			on break of chest[facing=north]:
			on break of potatoes[age=7]:
		Since:
			1.0 (break), <i>unknown</i> (mine), 2.6 (BlockData support)
		Patterns:
			[on] [on] [block] (break[ing]|1Â¦min(e|ing)) [[of] %-itemtypes/blockdatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-entity
			event-location
			event-player
			event-entity
			event-world
			future event-block
		Cancellable: true
	On Bucket Empty:
		ID: bucket_empty
		Description:
			Called when a player empties a bucket. You can also use the place event with a check for water or lava.
		Examples:
			on bucket empty:
		Since:
			1.0
		Patterns:
			[on] [on] bucket empty[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] empty[ing] [a] bucket [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-player
			event-world
		Cancellable: true
	On Bucket fill:
		ID: bucket_fill
		Description:
			Called when a player fills a bucket.
		Examples:
			on player filling a bucket:
		Since:
			1.0
		Patterns:
			[on] [on] bucket fill[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] fill[ing] [a] bucket [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-world
			future event-block
		Cancellable: true
	On Burn:
		ID: burn
		Description:
			Called when a block is destroyed by fire.
		Examples:
			on burn:
			on burn of wood, fences, or chests:
			on burn of oak_log[axis=y]:
		Since:
			1.0, 2.6 (BlockData support)
		Patterns:
			[on] [on] [block] burn[ing] [[of] %-itemtypes/blockdatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Can Build Check:
		ID: can_build_check
		Description:
			Called when a player rightclicks on a block while holding a block or a placeable item. You can either cancel the event to prevent the block from being built, or uncancel it to allow it.
			Please note that the data value of the block to be placed is not available in this event, only its ID.
		Examples:
			on block can build check:
				cancel event
		Since:
			1.0 (basic), 2.0 ([un]cancellable)
		Patterns:
			[on] [on] [block] can build check [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-player
			event-world
		Cancellable: false
	On Cauldron Level Change:
		ID: cauldron_level_change
		Patterns:
			[on] [on] cauldron [water] level [change] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-number
			event-block
			event-location
			event-number
			event-livingentity
			event-world
		Cancellable: true
	On Chat:
		ID: chat
		Description:
			Called whenever a player chats.
			Use chat format to change message format.
			Use chat recipients to edit chat recipients.
		Examples:
			on chat:
				if player has permission "owner":
					set chat format to "&lt;red&gt;[player]&lt;light gray&gt;: &lt;light red&gt;[message]"
				else if player has permission "admin":
					set chat format to "&lt;light red&gt;[player]&lt;light gray&gt;: &lt;orange&gt;[message]"
				else: #default message format
					set chat format to "&lt;orange&gt;[player]&lt;light gray&gt;: &lt;white&gt;[message]"
		Since:
			1.4.1
		Patterns:
			[on] [on] chat [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Chunk Generate:
		ID: chunk_generate
		Description:
			Called after a new chunk was generated.
		Examples:
			on chunk generate:
		Since:
			1.0
		Patterns:
			[on] [on] chunk (generat|populat)(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-chunk
			event-world
		Cancellable: false
	On Chunk Load:
		ID: chunk_load
		Description:
			Called when a chunk loads. The chunk might or might not contain mobs when it's loaded.
		Examples:
			on chunk load:
		Since:
			1.0
		Patterns:
			[on] [on] chunk load[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-chunk
			event-world
		Cancellable: false
	On Chunk Unload:
		ID: chunk_unload
		Description:
			Called when a chunk is unloaded due to not being near any player.
		Examples:
			on chunk unload:
		Since:
			1.0
		Patterns:
			[on] [on] chunk unload[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-chunk
			event-world
		Cancellable: false
	On Click:
		ID: click
		Description:
			Called when a user clicks on a block, an entity or air with or without an item in their hand.
			Please note that rightclick events with an empty hand while not looking at a block are not sent to the server, so there's no way to detect them.
			Also note that a leftclick on an entity is an attack and thus not covered by the 'click' event, but the 'damage' event.
		Examples:
			on click:
			on rightclick holding a fishing rod:
			on leftclick on a stone or obsidian:
			on rightclick on a creeper:
			on click with a sword:
		Since:
			1.0
		Patterns:
			[on] [on] [(1:right|2:left)(| |-)][mouse(| |-)]click[ing] [on %-entitydata/itemtype%] [(with|using|holding) %-itemtype%] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [(1:right|2:left)(| |-)][mouse(| |-)]click[ing] (with|using|holding) %-itemtype% on %-entitydata/itemtype% [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-direction
			event-block
			event-entity
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Close Inventory:
		ID: close_inventory
		Patterns:
			[on] [on] inventory [window] close [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-inventory
		Cancellable: false
	On Combust:
		ID: combust
		Description:
			Called when an entity is set on fire, e.g. by fire or lava, a fireball, or by standing in direct sunlight (zombies, skeletons).
		Examples:
			on combust:
		Since:
			1.0
		Patterns:
			[on] [on] combust[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Command:
		ID: command
		Description:
			Called when a player enters a command (not necessarily a Skript command) but you can check if command is a skript command, see Is a Skript command condition.
		Examples:
			on command:
			on command "/stop":
			on command "pm Njol ":
		Since:
			2.0
		Patterns:
			[on] [on] command [%-string%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-commandsender
			event-player
			event-world
		Cancellable: true
	On Connect:
		ID: connect
		Description:
			Called when the player connects to the server. This event is called before the player actually joins the server, so if you want to prevent players from joining you should prefer this event over on join.
		Examples:
			on connect:
				player doesn't have permission "VIP"
				number of players is greater than 15
				kick the player due to "The last 5 slots are reserved for VIP players."
		Since:
			2.0
		Patterns:
			[on] [on] [player] connect[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Consume:
		ID: consume
		Description:
			Called when a player is done eating/drinking something, e.g. an apple, bread, meat, milk or a potion.
		Examples:
			on consume:
		Since:
			2.0
		Patterns:
			[on] [on] [player] ((eat|drink)[ing]|consum(e|ing)) [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Craft:
		ID: craft
		Description:
			Called when a player crafts an item.
		Examples:
			on craft:
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			[on] [on] [player] craft[ing] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-slot
			event-clicktype
			event-string
			event-player
			event-recipe
			event-itemstack
			event-inventoryaction
			event-world
			event-inventory
		Cancellable: true
	On Creeper Power:
		ID: creeper_power
		Description:
			Called when a creeper is struck by lighting and gets powered. Cancel the event to prevent the creeper from being powered.
		Examples:
			on creeper power:
		Since:
			1.0
		Patterns:
			[on] [on] creeper power [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Damage:
		ID: damage
		Description:
			Called when an entity receives damage, e.g. by an attack from another entity, lava, fire, drowning, fall, suffocation, etc.
		Examples:
			on damage:
			on damage of a player:
			on damage of player by zombie:
		Since:
			1.0, 2.7 (by entity)
		Patterns:
			[on] [on] damag(e|ing) [of %-entitydata%] [by %-entitydata%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-projectile
			event-damagecause
			event-world
		Cancellable: true
	On Death:
		ID: death
		Description:
			Called when a living entity (including players) dies.
		Examples:
			on death:
			on death of player:
			on death of a wither or ender dragon:
				broadcast "A %entity% has been slain in %world%!"
		Since:
			1.0
		Patterns:
			[on] [on] death [of %-entitydatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-object
			event-location
			event-projectile
			event-damagecause
			event-world
		Cancellable: true
	On Dispense:
		ID: dispense
		Description:
			Called when a dispenser dispenses an item.
		Examples:
			on dispense of iron block:
				send "that'd be 19.99 please!"
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			[on] [on] dispens(e|ing) [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-itemstack
			event-world
		Cancellable: true
	On DownloadFile:
		ID: downloadfile
		Patterns:
			[on] [on] [skutil[ities] ]file download [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On Drop:
		ID: drop
		Description:
			Called when a player drops an item from their inventory, or an entity drops an item, such as a chicken laying an egg.
		Since:
			<i>unknown</i> (before 2.1), 2.7 (entity)
		Patterns:
			[on] [on] [player|1:entity] drop[ping] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-player
			event-itementity
			event-itemstack
			event-world
		Cancellable: true
	On Egg Throw:
		ID: egg_throw
		Description:
			Called when a player throws an egg and it lands. You can just use the shoot event in most cases. However, this event allows modification of properties like the hatched entity type and the number of entities to hatch.
		Examples:
			on throw of an egg:
		Since:
			1.0
		Patterns:
			[on] [on] throw[ing] [of] [an] egg [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] egg throw [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-projectile
			event-world
		Cancellable: false
	On Enchant:
		ID: enchant
		Description:
			Called when a player successfully enchants an item.
			 To get the enchanted item, see the enchant item expression
		Examples:
			on enchant:
				if the clicked button is 1: # offer 1
					set the applied enchantments to sharpness 10 and unbreaking 10
		Since:
			2.5
		Patterns:
			[on] [on] [item] enchant [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-object
			event-itemstack
		Cancellable: true
	On Enchant:
		ID: enchant
		Patterns:
			[on] [on] enchant [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-object
			event-itemstack
		Cancellable: true
	On Enchant Prepare:
		ID: enchant_prepare
		Description:
			Called when a player puts an item into enchantment table. This event may be called multiple times.
			 To get the enchant item, see the enchant item expression
		Examples:
			on enchant prepare:
				set enchant offer 1 to sharpness 1
				set the cost of enchant offer 1 to 10 levels
		Since:
			2.5
		Patterns:
			[on] [on] [item] enchant prepare [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-itemstack
		Cancellable: true
	On Enderman/Sheep/Silverfish/Falling Block:
		ID: endermansheepsilverfishfalling_block
		Description:
			Called when an enderman places or picks up a block, a sheep eats grass, a silverfish boops into/out of a block or a falling block lands and turns into a block respectively.
		Since:
			<i>unknown</i>, 2.5.2 (falling block)
		Patterns:
			[on] [on] enderman place [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] enderman pickup [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] sheep eat [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] silverfish enter [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] silverfish exit [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] falling block fall[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] falling block land[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-entity
			event-commandsender
			event-location
			event-itemstack
			event-world
		Cancellable: true
	On Entity Dismount:
		ID: entity_dismount
		Description:
			Called when an entity dismounts.
		Examples:
			on dismount:
				kill event-entity
		Since:
			2.2-dev13b
		Patterns:
			[on] [on] dismount[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Entity Jump:
		ID: entity_jump
		Description:
			Called when an entity jumps.
		Examples:
			on entity jump:
				if entity is a wither skeleton:
					cancel event
		Since:
			2.7
		Patterns:
			[on] [on] entity jump[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Entity Mount:
		ID: entity_mount
		Description:
			Called when entity starts riding another.
		Examples:
			on mount:
				cancel event
		Since:
			2.2-dev13b
		Patterns:
			[on] [on] mount[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Entity Portal:
		ID: entity_portal
		Description:
			Called when an entity uses a nether or end portal. Cancel the event to prevent the entity from teleporting.
		Examples:
			on entity portal:
				broadcast "A %type of event-entity% has entered a portal!
		Since:
			2.5.3
		Patterns:
			[on] [on] entity portal [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Experience Change:
		ID: experience_change
		Description:
			Called when a player's experience changes.
		Examples:
			on level progress change:
				set {_xp} to event-experience
				broadcast "%{_xp}%"
		Since:
			2.7
		Patterns:
			[on] [on] [player] (level progress|[e]xp|experience) (change|update|:increase|:decrease) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-experience
			event-player
			event-world
		Cancellable: false
	On Experience Spawn:
		ID: experience_spawn
		Description:
			Called whenever experience is about to spawn.
			Please note that this event will not fire for xp orbs spawned by plugins (including Skript) with Bukkit.
		Examples:
			on xp spawn:
				world is "minigame_world"
				cancel event
		Since:
			2.0
		Patterns:
			[on] [on] [e]xp[erience] [orb] spawn [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] spawn of [a[n]] [e]xp[erience] [orb] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-location
			event-experience
		Cancellable: true
	On Explode:
		ID: explode
		Description:
			Called when an entity (a primed TNT or a creeper) explodes.
		Examples:
			on explosion:
		Since:
			1.0
		Patterns:
			[on] [on] explo(d(e|ing)|sion) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Explosion Prime:
		ID: explosion_prime
		Description:
			Called when an explosive is primed, i.e. an entity will explode shortly. Creepers can abort the explosion if the player gets too far away, while TNT will explode for sure after a short time.
		Examples:
			on explosion prime:
		Since:
			1.0
		Patterns:
			[on] [on] explosion prime [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Fade:
		ID: fade
		Description:
			Called when a block 'fades away', e.g. ice or snow melts.
		Examples:
			on fade of snow or ice:
			on fade of snow[layers=2]
		Since:
			1.0, 2.6 (BlockData support)
		Patterns:
			[on] [on] [block] fad(e|ing) [[of] %-itemtypes/blockdatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-world
			future event-block
		Cancellable: true
	On FileCopy:
		ID: filecopy
		Patterns:
			[on] [on] [skutil[ities] ]file copy [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On FileCreation:
		ID: filecreation
		Patterns:
			[on] [on] [skutil[ities] ]file creat(ion|e) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
		Cancellable: true
	On FileDeletion:
		ID: filedeletion
		Patterns:
			[on] [on] [skutil[ities] ]file delet(ion|e) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
		Cancellable: true
	On FileMove:
		ID: filemove
		Patterns:
			[on] [on] [skutil[ities] ]file move [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On FileRename:
		ID: filerename
		Patterns:
			[on] [on] [skutil[ities] ]file rename [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On FileWipe:
		ID: filewipe
		Patterns:
			[on] [on] [skutil[ities] ]file (wipe|reset|clear) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
		Cancellable: true
	On FileWrite:
		ID: filewrite
		Patterns:
			[on] [on] [skutil[ities] ]file write [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
			event-number
		Cancellable: true
	On FileZip:
		ID: filezip
		Patterns:
			[on] [on] [skutil[ities] ]file zip [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On Firework Explode:
		ID: firework_explode
		Description:
			Called when a firework explodes.
		Examples:
			on firework explode
			on firework exploding colored red, light green and black
			on firework explosion colored light green:
				broadcast "A firework colored %colors% was exploded at %location%!"
		Since:
			2.4
		Patterns:
			[on] [on] [a] firework explo(d(e|ing)|sion) [colo[u]red %-colors%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-projectile
			event-entity
			event-commandsender
			event-fireworkeffect
			event-location
			event-world
		Cancellable: true
	On First Join:
		ID: first_join
		Description:
			Called when a player joins the server for the first time.
		Examples:
			on first join:
				broadcast "Welcome %player% to the server!"
		Since:
			1.3.7
		Patterns:
			[on] [on] first (join|login) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Fishing:
		ID: fishing
		Description:
			Called when a player fishes something. This is not of much use yet.
		Examples:
			on fish:
		Since:
			1.0
		Patterns:
			[on] [on] [player] fish[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Flight Toggle:
		ID: flight_toggle
		Description:
			Called when a players stops/starts flying.
		Examples:
			on flight toggle:
				if {game::%player%::playing} exists:
					cancel event
		Since:
			2.2-dev36
		Patterns:
			[on] [on] [player] flight toggl(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] toggl(e|ing) flight [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Flight Toggle:
		ID: flight_toggle
		Patterns:
			[on] [on] [player] toggl(e|ing) (flight|fly) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] (flight|fly) toggl(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Flow:
		ID: flow
		Description:
			Called when a blocks flows or teleports to another block. This not only applies to water and lava, but teleporting dragon eggs as well.
		Examples:
			on block flow:
				if event-block is water:
					broadcast "Build more dams! It's starting to get wet in here"
		Since:
			1.0
		Patterns:
			[on] [on] [block] flow[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] block mov(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
			future event-block
		Cancellable: true
	On Form:
		ID: form
		Description:
			Called when a block is created, but not by a player, e.g. snow forms due to snowfall, water freezes in cold biomes. This isn't called when block spreads (mushroom growth, water physics etc.), as it has its own event (see spread event).
		Examples:
			on form of snow:
			on form of a mushroom:
		Since:
			1.0, 2.6 (BlockData support)
		Patterns:
			[on] [on] [block] form[ing] [[of] %-itemtypes/blockdatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-world
		Cancellable: true
	On Fuel Burn:
		ID: fuel_burn
		Description:
			Called when a furnace burns an item from its fuel slot.
		Examples:
			on fuel burning:
		Since:
			1.0
		Patterns:
			[on] [on] fuel burn[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Gamemode Change:
		ID: gamemode_change
		Description:
			Called when a player's gamemode changes.
		Examples:
			on gamemode change:
			on gamemode change to adventure:
		Since:
			1.0
		Patterns:
			[on] [on] game[ ]mode change [to %-gamemode%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Generic Move:
		ID: generic_move
		Patterns:
			[on] [on] any move[ment] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-location
			event-teleportcause
			event-player
			event-world
		Cancellable: true
	On Gliding State Change:
		ID: gliding_state_change
		Description:
			Called when an entity toggles glider on or off, or when server toggles gliding state of an entity forcibly.
		Examples:
			on toggling gliding:
				cancel the event # bad idea, but you CAN do it!
		Since:
			2.2-dev21
		Patterns:
			[on] [on] (gliding state change|toggl(e|ing) gliding) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Grow:
		ID: grow
		Description:
			Called when a tree, giant mushroom or plant grows to next stage.
		Examples:
			on grow:
			on grow of a tree:
			on grow of a huge jungle tree:
		Since:
			1.0 (2.2-dev20 for plants)
		Patterns:
			[on] [on] grow [of (1Â¦%-structuretype%|2Â¦%-itemtype%)] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-object
			event-world
			future event-block
			future event-object
		Cancellable: true
	On Hand Item Swap:
		ID: hand_item_swap
		Description:
			Called whenever a player swaps the items in their main- and offhand slots.
			Works also when one or both of the slots are empty.
			The event is called before the items are actually swapped,
			so when you use the player's tool or player's offtool expressions,
			they will return the values before the swap -
			this enables you to cancel the event before anything happens.
		Examples:
			on swap hand items:
				event-player's tool is a diamond sword
				cancel event
		Since:
			2.3
		Patterns:
			[on] [on] swap[ping of] [(hand|held)] item[s] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Heal:
		ID: heal
		Description:
			Called when an entity is healed, e.g. by eating (players), being fed (pets), or by the effect of a potion of healing (overworld mobs) or harm (nether mobs).
		Examples:
			on heal:
		Since:
			1.0
		Patterns:
			[on] [on] heal[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Horse Jump:
		ID: horse_jump
		Description:
			Called when a horse jumps.
		Examples:
			on horse jump:
				push event-entity upwards at speed 2
		Since:
			2.5.1
		Patterns:
			[on] [on] horse jump [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Horse Jump:
		ID: horse_jump
		Patterns:
			[on] [on] horse jump [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Hunger Meter Change:
		ID: hunger_meter_change
		Description:
			Called when the hunger bar of a player changes, i.e. either increases by eating or decreases over time.
		Examples:
			on food bar change:
		Since:
			1.4.4
		Patterns:
			[on] [on] (food|hunger) (level|met(er|re)|bar) chang(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Ignition:
		ID: ignition
		Description:
			Called when a block starts burning, i.e. a fire block is placed next to it and this block is flammable.
			The burn event will be called when the block is about do be destroyed by the fire.
		Examples:
			on block ignite:
				if event-block is a ladder:
					cancel event
		Since:
			1.0
		Patterns:
			[on] [on] [block] ignit(e|ion) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-player
			event-world
		Cancellable: true
	On Inventory Click:
		ID: inventory_click
		Description:
			Called when clicking on inventory slot.
		Examples:
			on inventory click:
				if event-item is stone:
					give player 1 stone
					remove 20$ from player's balance
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] [on] [player] inventory(-| )click[ing] [[at] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-slot
			event-clicktype
			event-string
			event-player
			event-recipe
			event-itemstack
			event-inventoryaction
			event-world
			event-inventory
		Cancellable: true
	On Inventory Click:
		ID: inventory_click
		Patterns:
			[on] [on] inventory click [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-slot
			event-clicktype
			event-string
			event-player
			event-recipe
			event-itemstack
			event-inventoryaction
			event-world
			event-inventory
		Cancellable: true
	On Inventory Close:
		ID: inventory_close
		Description:
			Called when player's currently viewed inventory is closed.
		Examples:
			on inventory close:
				if player's location is {location}:
					send "You exited the shop!"
		Since:
			2.2-dev21
		Patterns:
			[on] [on] inventory clos(ing|e[d]) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-inventory
		Cancellable: false
	On Inventory Drag:
		ID: inventory_drag
		Description:
			Called when a player drags an item in their cursor across the inventory.
		Examples:
			on inventory drag:
				if player's current inventory is {_gui}:
					send "You can't drag your items here!" to player
					cancel event
		Since:
			2.7
		Patterns:
			[on] [on] inventory drag[ging] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-itemstack
			event-object
			event-clicktype
			event-object
			event-string
			event-object
			event-player
			event-itemstack
			event-world
			event-inventory
		Cancellable: true
	On Inventory Open:
		ID: inventory_open
		Description:
			Called when an inventory is opened for player.
		Examples:
			on inventory open:
				close player's inventory
		Since:
			2.2-dev21
		Patterns:
			[on] [on] inventory open[ed] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-inventory
		Cancellable: true
	On Inventory Pickup:
		ID: inventory_pickup
		Description:
			Called when an inventory (a hopper, a hopper minecart, etc.) picks up an item
		Examples:
			on inventory pickup:
		Since:
			2.5.1
		Patterns:
			[on] [on] inventory pick[ ]up [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-itementity
			event-itemstack
			event-inventory
		Cancellable: true
	On Inventory Slot Change:
		ID: inventory_slot_change
		Description:
			Called when a slot in a player's inventory is changed.
			Warning: setting the event-slot to a new item can result in an infinite loop.
		Examples:
			on inventory slot change:
				if event-item is a diamond:
					send "You obtained a diamond!" to player
		Since:
			2.7
		Patterns:
			[on] [on] [player] inventory slot chang(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-itemstack
			event-slot
			event-player
			event-itemstack
			event-world
		Cancellable: false
	On Item Break:
		ID: item_break
		Description:
			Called when a player breaks their tool because its damage reached the maximum value.
			This event cannot be cancelled.
		Examples:
			on tool break:
		Since:
			2.1.1
		Patterns:
			[on] [on] [player] tool break[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] break[ing] (a|the|) tool [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-itemstack
			event-world
		Cancellable: false
	On Item Damage:
		ID: item_damage
		Description:
			Called when an item is damaged. Most tools are damaged by using them; armor is damaged when the wearer takes damage.
		Examples:
			on item damage:
				cancel event
		Since:
			2.5
		Patterns:
			[on] [on] item damag(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Item Despawn:
		ID: item_despawn
		Description:
			Called when an item is about to be despawned from the world, usually 5 minutes after it was dropped.
		Examples:
			on item despawn of diamond:
				send "Not my precious!"
				cancel event
		Since:
			2.2-dev35
		Patterns:
			[on] [on] (item[ ][stack]|[item] %-itemtypes%) despawn[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [item[ ][stack]] despawn[ing] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-itementity
			event-itemstack
			event-world
		Cancellable: true
	On Item Mend:
		ID: item_mend
		Description:
			Called when a player has an item repaired via the Mending enchantment.
		Examples:
			on item mend:
				chance of 50%:
					cancel the event
					send "Oops! Mending failed!" to player
		Since:
			2.5.1
		Patterns:
			[on] [on] item mend[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Item Merge:
		ID: item_merge
		Description:
			Called when dropped items merge into a single stack. event-entity will be the entity which is trying to merge, and future event-entity will be the entity which is being merged into.
		Examples:
			on item merge of gold blocks:
				cancel event
		Since:
			2.2-dev35
		Patterns:
			[on] [on] (item[ ][stack]|[item] %-itemtypes%) merg(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] item[ ][stack] merg(e|ing) [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-itementity
			event-itemstack
			event-world
			future event-itementity
		Cancellable: true
	On Item Projectile Hit:
		ID: item_projectile_hit
		Patterns:
			[on] [on] item [projectile] hit [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-location
			event-livingentity
			event-itemtype
		Cancellable: false
	On Item Spawn:
		ID: item_spawn
		Description:
			Called whenever an item stack is spawned in a world, e.g. as drop of a block or mob, a player throwing items out of their inventory, or a dispenser dispensing an item (not shooting it).
		Examples:
			on item spawn of iron sword:
				broadcast "Someone dropped an iron sword!"
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			[on] [on] item spawn[ing] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-itemstack
			event-world
		Cancellable: true
	On Join:
		ID: join
		Description:
			Called when the player joins the server. The player is already in a world when this event is called, so if you want to prevent players from joining you should prefer on connect over this event.
		Examples:
			on join:
				message "Welcome on our awesome server!"
				broadcast "%player% just joined the server!"
		Since:
			1.0
		Patterns:
			[on] [on] [player] (login|logging in|join[ing]) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Jump:
		ID: jump
		Description:
			Called whenever a player jumps.
			This event requires PaperSpigot.
		Examples:
			on jump:
				event-player does not have permission "jump"
				cancel event
		Since:
			2.3
		Patterns:
			[on] [on] [player] jump[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Kick:
		ID: kick
		Description:
			Called when a player is kicked from the server. You can change the kick message or cancel the event entirely.
		Examples:
			on kick:
		Since:
			1.0
		Patterns:
			[on] [on] [player] (kick|being kicked) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Language Change:
		ID: language_change
		Description:
			Called after a player changed their language in the game settings. You can use the language expression to get the current language of the player.
			This event requires Minecraft 1.12+.
		Examples:
			on language change:
				if player's language starts with "en":
					send "Hello!"
		Since:
			2.3
		Patterns:
			[on] [on] [player] (language|locale) chang(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] chang(e|ing) (language|locale) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Leash:
		ID: leash
		Patterns:
			[on] [on] [player] leash [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-player
		Cancellable: true
	On Leaves Decay:
		ID: leaves_decay
		Description:
			Called when a leaf block decays due to not being connected to a tree.
		Examples:
			on leaves decay:
		Since:
			1.0
		Patterns:
			[on] [on] leaves decay[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Lectern Take Event:
		ID: lectern_take_event
		Patterns:
			[on] [on] [player] lectern take [book] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Level Change:
		ID: level_change
		Description:
			Called when a player's level changes, e.g. by gathering experience or by enchanting something.
		Examples:
			on level change:
		Since:
			1.0, 2.4 (level up/down)
		Patterns:
			[on] [on] [player] level (change|1Â¦up|-1Â¦down) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Lightning Strike:
		ID: lightning_strike
		Description:
			Called when lightning strikes.
		Examples:
			on lightning:
				spawn a zombie at location of event-entity
		Since:
			1.0
		Patterns:
			[on] [on] lightning [strike] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-world
		Cancellable: true
	On Loot Generate:
		ID: loot_generate
		Description:
			Called when a loot table of an inventory is generated in the world.
			For example, when opening a shipwreck chest.
		Examples:
			on loot generate:
				chance of %10
				add 64 diamonds
				send "You hit the jackpot!!"
		Since:
			2.7
		Patterns:
			[on] [on] loot generat(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-location
			event-world
		Cancellable: true
	On Move:
		ID: move
		Description:
			Called when a player or entity moves.
			NOTE: Move event will only be called when the entity/player moves position, not orientation (ie: looking around).
			NOTE: These events can be performance heavy as they are called quite often.
			If you use these events, and later remove them, a server restart is recommended to clear registered events from Skript.
		Examples:
			on player move:
				if player does not have permission "player.can.move":
					cancel event
			on skeleton move:
				if event-entity is not in world "world":
					kill event-entity
		Since:
			2.6
		Patterns:
			[on] [on] %-entitydata% (move|walk|step) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-entity
			event-commandsender
			event-location
			event-teleportcause
			event-player
			event-world
			future event-location
		Cancellable: true
	On Move On:
		ID: move_on
		Description:
			Called when a player moves onto a certain type of block.
			Please note that using this event can cause lag if there are many players online.
		Examples:
			on walking on dirt or grass:
			on stepping on stone:
		Since:
			2.0
		Patterns:
			[on] [on] (step|walk)[ing] (on|over) %-*itemtypes% [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-location
			event-teleportcause
			event-player
			event-world
		Cancellable: true
	On Physics:
		ID: physics
		Description:
			Called when a physics check is done on a block. By cancelling this event you can prevent some things from happening, e.g. sand falling, dirt turning into grass, torches dropping if their supporting block is destroyed, etc.Please note that using this event might cause quite some lag since it gets called extremely often.
		Examples:
			# prevents sand from falling
			on block physics:
				block is sand
				cancel event
		Since:
			1.4.6
		Patterns:
			[on] [on] [block] physics [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Pick Up:
		ID: pick_up
		Description:
			Called when a player/entity picks up an item. Please note that the item is still on the ground when this event is called.
		Examples:
			on pick up:
			on entity pickup of wheat:
		Since:
			<i>unknown</i> (before 2.1), 2.5 (entity)
		Patterns:
			[on] [on] [(player|1Â¦entity)] (pick[ ]up|picking up) [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-player
			event-itemtype
			event-itementity
			event-itemstack
			event-world
		Cancellable: true
	On Pig Zap:
		ID: pig_zap
		Description:
			Called when a pig is stroke by lightning and transformed into a zombie pigman. Cancel the event to prevent the transformation.
		Examples:
			on pig zap:
		Since:
			1.0
		Patterns:
			[on] [on] pig[ ]zap [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Piston Extend:
		ID: piston_extend
		Description:
			Called when a piston is about to extend.
		Examples:
			on piston extend:
				broadcast "A piston is extending!"
		Since:
			1.0
		Patterns:
			[on] [on] piston extend[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Piston Retract:
		ID: piston_retract
		Description:
			Called when a piston is about to retract.
		Examples:
			on piston retract:
				broadcast "A piston is retracting!"
		Since:
			1.0
		Patterns:
			[on] [on] piston retract[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Place:
		ID: place
		Description:
			Called when a player places a block.
		Examples:
			on place:
			on place of a furnace, workbench or chest:
			on break of chest[type=right] or chest[type=left]
		Since:
			1.0, 2.6 (BlockData support)
		Patterns:
			[on] [on] [block] (plac(e|ing)|build[ing]) [[of] %-itemtypes/blockdatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			past event-itemstack
			event-direction
			event-block
			event-location
			event-player
			event-entity
			event-itemstack
			event-world
			future event-itemstack
		Cancellable: true
	On Player Chunk Enters:
		ID: player_chunk_enters
		Description:
			Called when a player enters a chunk. Note that this event is based on 'player move' event, and may be called frequent internally.
		Examples:
			on player enters a chunk:
				send "You entered a chunk: %past event-chunk% -> %event-chunk%!" to player
		Since:
			2.7
		Patterns:
			[on] [on] [player] (enter[s] [a] chunk|chunk enter[ing]) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-location
			event-teleportcause
			event-player
			event-world
		Cancellable: true
	On Player Deep Sleep:
		ID: player_deep_sleep
		Description:
			Called when a player has slept long enough to count as passing the night/storm.
			Cancelling this event will prevent the player from being counted as deeply sleeping unless they exit and re-enter the bed.
		Examples:
			on player deep sleeping:
				send "Zzzz.." to player
		Since:
			2.7
		Patterns:
			[on] [on] [player] deep sleep[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Player Trade:
		ID: player_trade
		Description:
			Called when a player has traded with a villager.
		Examples:
			on player trade:
				chance of 50%:
					cancel event
					send "The trade was somehow denied!" to player
		Since:
			2.7
		Patterns:
			[on] [on] player trad(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-livingentity
			event-player
			event-world
		Cancellable: true
	On Player World Change:
		ID: player_world_change
		Description:
			Called when a player enters a world. Does not work with other entities!
		Examples:
			on player world change:
				world is "city"
				send "Welcome to the City!"
		Since:
			2.2-dev28
		Patterns:
			[on] [on] [player] world chang(ing|e[d]) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-world
			event-player
			event-world
		Cancellable: false
	On Portal:
		ID: portal
		Description:
			Called when a player uses a nether or end portal. Cancel the event to prevent the player from teleporting.
		Examples:
			on player portal:
		Since:
			1.0
		Patterns:
			[on] [on] [player] portal [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-location
			event-teleportcause
			event-player
			event-world
		Cancellable: true
	On Portal Create:
		ID: portal_create
		Description:
			Called when a portal is created, either by a player or mob lighting an obsidian frame on fire, or by a nether portal creating its teleportation target in the nether/overworld.
			In Minecraft 1.14+, you can use the player in this event.
			Please note that there may not always be a player (or other entity) in this event.
		Examples:
			on portal create:
		Since:
			1.0, 2.5.3 (event-entity support)
		Patterns:
			[on] [on] portal creat(e|ion) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-object
			event-world
		Cancellable: true
	On Portal Enter:
		ID: portal_enter
		Description:
			Called when an entity enters a nether portal or an end portal. Please note that this event will be fired many times for a nether portal.
		Examples:
			on portal enter:
		Since:
			1.0
		Patterns:
			[on] [on] portal enter[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] entering [a] portal [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: false
	On Prepare Craft:
		ID: prepare_craft
		Description:
			Called just before displaying crafting result to player. Note that setting the result item might or might not work due to Bukkit bugs.
		Examples:
			on preparing craft of torch:
		Since:
			2.2-Fixes-V10
		Patterns:
			[on] [on] [player] (preparing|beginning) craft[ing] [[of] %-itemtypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-slot
			event-string
			event-player
			event-recipe
			event-itemstack
			event-inventory
		Cancellable: false
	On Pressure Plate / Trip:
		ID: pressure_plate_trip
		Description:
			Called when a player steps on a pressure plate or tripwire respectively.
		Examples:
			on step on pressure plate:
		Since:
			1.0 (pressure plate), 1.4.4 (tripwire)
		Patterns:
			[on] [on] [step[ping] on] [a] [pressure] plate [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] (trip|[step[ping] on] [a] tripwire) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-direction
			event-block
			event-player
			event-itemstack
			event-world
		Cancellable: true
	On Projectile Collide:
		ID: projectile_collide
		Description:
			Called when a projectile collides with an entity.
		Examples:
			on projectile collide:
				teleport shooter of event-projectile to event-entity
		Since:
			2.5
		Patterns:
			[on] [on] projectile collide [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-projectile
			event-world
		Cancellable: true
	On Projectile Hit:
		ID: projectile_hit
		Description:
			Called when a projectile hits an entity or a block.
			Use the damage event with a check for a projectile to be able to use the entity that got hit in the case when the projectile hit a living entity.
			A damage event will even be fired if the damage is 0, e.g. when throwing snowballs at non-nether mobs.
		Examples:
			on projectile hit:
				event-projectile is arrow
				delete event-projectile
		Since:
			1.0
		Patterns:
			[on] [on] projectile hit [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-direction
			event-block
			event-entity
			event-commandsender
			event-location
			event-projectile
			event-world
		Cancellable: true
	On Quit:
		ID: quit
		Description:
			Called when a player leaves the server.
		Examples:
			on quit:
			on disconnect:
		Since:
			1.0 (simple disconnection)
		Patterns:
			[on] [on] (quit[ting]|disconnect[ing]|log[ ]out|logging out|leav(e|ing)) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Redstone:
		ID: redstone
		Description:
			Called when the redstone current of a block changes. This event is of not much use yet.
		Examples:
			on redstone change:
				send "someone is using redstone" to console
		Since:
			1.0
		Patterns:
			[on] [on] redstone [current] [chang(e|ing)] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: false
	On Resource Pack Request Response:
		ID: resource_pack_request_response
		Since:
			2.4
		Patterns:
			[on] [on] resource pack [request] response [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] resource pack [request] %-resourcepackstates% [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Respawn:
		ID: respawn
		Description:
			Called when a player respawns. You should prefer this event over the death event as the player is technically alive when this event is called.
		Examples:
			on respawn:
		Since:
			1.0
		Patterns:
			[on] [on] [player] respawn[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: false
	On Resurrect Attempt:
		ID: resurrect_attempt
		Description:
			Called when an entity dies, always. If they are not holding a totem, this is cancelled - you can, however, uncancel it.
		Examples:
			on resurrect attempt:
				entity is player
				entity has permission "admin.undying"
				uncancel the event
		Since:
			2.2-dev28
		Patterns:
			[on] [on] [entity] resurrect[ion] [attempt] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Riptide:
		ID: riptide
		Description:
			Called when the player activates the riptide enchantment, using their trident to propel them through the air.
			Note: the riptide action is performed client side, so manipulating the player in this event may have undesired effects.
		Examples:
			on riptide:
				send "You are riptiding!"
		Since:
			2.5
		Patterns:
			[on] [on] [use of] riptide [enchant[ment]] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-itemstack
			event-world
		Cancellable: false
	On RunApp:
		ID: runapp
		Patterns:
			[on] [on] [skutil[ities] ](file|app|script) (run|execute) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
		Cancellable: true
	On RunCode:
		ID: runcode
		Patterns:
			[on] [on] [skutil[ities] ](bash|batch|sh) (command|cmd) (run|execute) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-string
		Cancellable: true
	On Script Load/Unload:
		ID: script_loadunload
		Description:
			Called directly after the trigger is loaded, or directly before the whole script is unloaded.
			The keyword 'async' indicates the trigger can be ran asynchronously, 
		Examples:
			on load:
				set {running::%script%} to true
			on unload:
				set {running::%script%} to false
		Since:
			2.0
		Patterns:
			[on] [on] [:async] [script] (load|init|enable) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [:async] [script] (unload|stop|disable) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-commandsender
		Cancellable: false
	On Server List Ping:
		ID: server_list_ping
		Examples:
			on server list ping:
				set the motd to "Welcome %{player-by-IP::%ip%}%! Join now!" if {player-by-IP::%ip%} is set, else "Join now!"
				set the fake max players count to (online players count + 1)
				set the shown icon to a random server icon out of {server-icons::*}
		Since:
			2.3
		Patterns:
			[on] [on] server [list] ping [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			none
		Cancellable: true
	On Server Ping:
		ID: server_ping
		Patterns:
			[on] [on] [server] [list] ping [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			none
		Cancellable: false
	On Server Start/Stop:
		ID: server_startstop
		Description:
			Called when the server starts or stops (actually, when Skript starts or stops, so a /reload will trigger these events as well).
		Examples:
			on skript start:
			on server stop:
		Since:
			2.0
		Patterns:
			[on] [on] (:server|skript) (start|load|enable) [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] (:server|skript) (stop|unload|disable) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-commandsender
		Cancellable: false
	On Sheep Dye:
		ID: sheep_dye
		Patterns:
			[on] [on] sheep dye [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Sheep Regrow Wool:
		ID: sheep_regrow_wool
		Description:
			Called when sheep regrows its sheared wool back.
		Examples:
			on sheep grow wool:
				cancel event
		Since:
			2.2-dev21
		Patterns:
			[on] [on] sheep [re]grow[ing] wool [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Shoot:
		ID: shoot
		Description:
			Called whenever a projectile is shot. Use the shooter expression to get who shot the projectile.
		Examples:
			on shoot:
				if projectile is an arrow:
					send "you shot an arrow!" to shooter
		Since:
			1.0
		Patterns:
			[on] [on] [projectile] shoot [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-projectile
			event-world
		Cancellable: true
	On Sign Change:
		ID: sign_change
		Description:
			As signs are placed empty, this event is called when a player is done editing a sign.
		Examples:
			on sign change:
				line 2 is empty
				set line 1 to "&lt;red&gt;%line 1%"
		Since:
			1.0
		Patterns:
			[on] [on] sign (chang[e]|edit)[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] (chang[e]|edit)[ing] [a] sign [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-player
			event-object
			event-world
		Cancellable: true
	On Slime Split:
		ID: slime_split
		Description:
			Called when a slime splits. Usually this happens when a big slime dies.
		Examples:
			on slime split:
		Since:
			2.2-dev26
		Patterns:
			[on] [on] slime split[ting] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Smelt:
		ID: smelt
		Description:
			Called when a furnace smelts an item in its ore slot.
		Examples:
			on smelt:
		Since:
			1.0
		Patterns:
			[on] [on] [ore] smelt[ing] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] smelt[ing] of ore [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Sneak Toggle:
		ID: sneak_toggle
		Description:
			Called when a player starts or stops sneaking. Use is sneaking to get whether the player was sneaking before the event was called.
		Examples:
			# make players that stop sneaking jump
			on sneak toggle:
				player is sneaking
				push the player upwards at speed 0.5
		Since:
			1.0
		Patterns:
			[on] [on] [player] toggl(e|ing) sneak [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] sneak toggl(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Spawn:
		ID: spawn
		Description:
			Called when an entity spawns (excluding players).
		Examples:
			on spawn of a zombie:
			on spawn of an ender dragon:
				broadcast "A dragon has been sighted in %world%!"
		Since:
			1.0, 2.5.1 (non-living entities)
		Patterns:
			[on] [on] spawn[ing] [of %-entitydatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-block
			event-commandsender
			event-location
			event-spawnreason
			event-projectile
			event-itemstack
			event-world
		Cancellable: true
	On Spawn Change:
		ID: spawn_change
		Description:
			Called when the spawn point of a world changes.
		Examples:
			on spawn change:
				broadcast "someone changed the spawn!"
		Since:
			1.0
		Patterns:
			[on] [on] [world] spawn change [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	On Spectate:
		ID: spectate
		Description:
			Called with a player starts, stops or swaps spectating an entity.
		Examples:
			on player start spectating of a zombie:
		Since:
			2.7
		Patterns:
			[on] [on] [player] stop spectating [(of|from) %-*entitydatas%] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] (swap|switch) spectating [(of|from) %-*entitydatas%] [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] start spectating [of %-*entitydatas%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Sponge Absorb:
		ID: sponge_absorb
		Description:
			Called when a sponge absorbs blocks.
		Examples:
			on sponge absorb:
				loop absorbed blocks:
					broadcast "%loop-block% was absorbed by a sponge"!
		Since:
			2.5
		Patterns:
			[on] [on] sponge absorb [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-location
			event-world
		Cancellable: true
	On Spread:
		ID: spread
		Description:
			Called when a new block forms as a result of a block that can spread, e.g. water or mushrooms.
		Examples:
			on spread:
		Since:
			1.0
		Patterns:
			[on] [on] spread[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-block
			event-block
			event-location
			event-world
		Cancellable: true
	On Sprint Toggle:
		ID: sprint_toggle
		Description:
			Called when a player starts or stops sprinting. Use is sprinting to get whether the player was sprinting before the event was called.
		Examples:
			on sprint toggle:
				player is not sprinting
				send "Run!"
		Since:
			1.0
		Patterns:
			[on] [on] [player] toggl(e|ing) sprint [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [player] sprint toggl(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Swim Toggle:
		ID: swim_toggle
		Description:
			Called when an entity swims or stops swimming.
		Examples:
			on swim toggle:
				event-entity does not have permission "swim"
				cancel event
		Since:
			2.3
		Patterns:
			[on] [on] [entity] toggl(e|ing) swim [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [entity] swim toggl(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Tame:
		ID: tame
		Description:
			Called when a player tames a wolf or ocelot. Can be cancelled to prevent the entity from being tamed.
		Examples:
			on tame:
		Since:
			1.0
		Patterns:
			[on] [on] [entity] tam(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Target:
		ID: target
		Description:
			Called when a mob starts/stops following/attacking another entity, usually a player.
		Examples:
			on entity target:
				target is a player
		Since:
			1.0
		Patterns:
			[on] [on] [entity] target [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] [entity] un[-]target [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-commandsender
			event-location
			event-world
		Cancellable: true
	On Teleport:
		ID: teleport
		Description:
			Called whenever a player is teleported, either by a nether/end portal or other means (e.g. by plugins).
		Examples:
			on teleport:
		Since:
			1.0
		Patterns:
			[on] [on] [player] teleport[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			past event-chunk
			past event-location
			event-block
			event-chunk
			event-location
			event-teleportcause
			event-player
			event-world
		Cancellable: true
	On Tool Change:
		ID: tool_change
		Description:
			Called whenever a player changes their held item by selecting a different slot (e.g. the keys 1-9 or the mouse wheel), not by dropping or replacing the item in the current slot.
		Examples:
			on player's held item change:
		Since:
			1.0
		Patterns:
			[on] [on] [player['s]] (tool|item held|held item) chang(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-player
			event-world
		Cancellable: true
	On Trade Select:
		ID: trade_select
		Patterns:
			[on] [on] [inventory] trade select [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-number
			event-player
			event-inventory
		Cancellable: true
	On Unzip:
		ID: unzip
		Patterns:
			[on] [on] [skutil[ities] ]unzip [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-object
			event-string
		Cancellable: true
	On Vehicle Collide With Block:
		ID: vehicle_collide_with_block
		Patterns:
			[on] [on] vehicle (block collide|collide with block) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-block
			event-world
		Cancellable: false
	On Vehicle Collide With Entity:
		ID: vehicle_collide_with_entity
		Patterns:
			[on] [on] vehicle (entity collide|collide with entity) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-block
			event-world
		Cancellable: false
	On Vehicle Create:
		ID: vehicle_create
		Description:
			Called when a new vehicle is created, e.g. when a player places a boat or minecart.
		Examples:
			on vehicle create:
		Since:
			1.0
		Patterns:
			[on] [on] vehicle create [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] creat(e|ing|ion of) [a] vehicle [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-world
		Cancellable: true
	On Vehicle Damage:
		ID: vehicle_damage
		Description:
			Called when a vehicle gets damage. Too much damage will destroy the vehicle.
		Examples:
			on vehicle damage:
		Since:
			1.0
		Patterns:
			[on] [on] vehicle damage [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] damag(e|ing) [a] vehicle [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-world
		Cancellable: true
	On Vehicle Destroy:
		ID: vehicle_destroy
		Description:
			Called when a vehicle is destroyed. Any passenger will be ejected and the vehicle might drop some item(s).
		Examples:
			on vehicle destroy:
				cancel event
		Since:
			1.0
		Patterns:
			[on] [on] vehicle destroy [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] destr(oy[ing]|uction of) [a] vehicle [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-world
		Cancellable: true
	On Vehicle Enter:
		ID: vehicle_enter
		Description:
			Called when an entity enters a vehicle, either deliberately (players) or by falling into them (mobs).
		Examples:
			on vehicle enter:
				entity is a player
				cancel event
		Since:
			1.0
		Patterns:
			[on] [on] vehicle enter [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] enter[ing] [a] vehicle [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-world
		Cancellable: true
	On Vehicle Exit:
		ID: vehicle_exit
		Description:
			Called when an entity exits a vehicle.
		Examples:
			on vehicle exit:
				if event-entity is a spider:
					kill event-entity
		Since:
			1.0
		Patterns:
			[on] [on] vehicle exit [with priority (lowest|low|normal|high|highest|monitor)]
			[on] [on] exit[ing] [a] vehicle [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-entity
			event-entity
			event-livingentity
			event-world
		Cancellable: true
	On Weather Change:
		ID: weather_change
		Description:
			Called when a world's weather changes.
		Examples:
			on weather change:
			on weather change to sunny:
		Since:
			1.0
		Patterns:
			[on] [on] weather change [to %-weathertypes%] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: true
	On Whitelist Toggle:
		ID: whitelist_toggle
		Patterns:
			[on] [on] white[ ]list (toggle|change) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-boolean
		Cancellable: false
	On World Init:
		ID: world_init
		Description:
			Called when a world is initialised. As all default worlds are initialised before any scripts are loaded, this event is only called for newly created worlds.
			World management plugins might change the behaviour of this event though.
		Examples:
			on world init:
		Since:
			1.0
		Patterns:
			[on] [on] world init[ialization] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	On World Load:
		ID: world_load
		Description:
			Called when a world is loaded. As with the world init event, this event will not be called for the server's default world(s).
		Examples:
			on world load:
				send "World is loading..." to console
		Since:
			1.0
		Patterns:
			[on] [on] world load[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	On World Save:
		ID: world_save
		Description:
			Called when a world is saved to disk. Usually all worlds are saved simultaneously, but world management plugins could change this.
		Examples:
			on world saving:
				broadcast "World has been saved!"
		Since:
			1.0
		Patterns:
			[on] [on] world sav(e|ing) [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	On World Unload:
		ID: world_unload
		Description:
			Called when a world is unloaded. This event might never be called if you don't have a world management plugin.
		Examples:
			on world unload:
				cancel event
		Since:
			1.0
		Patterns:
			[on] [on] world unload[ing] [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: true
	On Zombie Break Door:
		ID: zombie_break_door
		Description:
			Called when a zombie is done breaking a wooden door. Can be cancelled to prevent the zombie from breaking the door.
		Examples:
			on zombie breaking a wood door:
		Since:
			1.0
		Patterns:
			[on] [on] zombie break[ing] [a] [wood[en]] door [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-block
			event-entity
			event-commandsender
			event-location
			event-itemstack
			event-world
		Cancellable: true
	Periodical:
		ID: periodical
		Description:
			An event that is called periodically.
		Examples:
			every 2 seconds:
			every minecraft hour:
			every tick: # can cause lag depending on the code inside the event
			every minecraft days:
		Since:
			1.0
		Patterns:
			[on] every %-timespan% [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	Periodical:
		ID: periodical
		Description:
			An event that is called periodically.
		Examples:
			every 2 seconds in "world":
			every minecraft hour in "flatworld":
			every tick in "world": # can cause lag depending on the code inside the event
			every minecraft days in "plots":
		Since:
			1.0
		Patterns:
			[on] every %-timespan% in [world[s]] %-worlds% [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			event-world
		Cancellable: false
	Script Options Header:
		ID: script_options_header
		Patterns:
			[on] script options [with priority (lowest|low|normal|high|highest|monitor)]
		Event values:
			none
		Cancellable: false
Conditions:
	Alphanumeric:
		ID: CondAlphanumeric
		Description:
			Checks if the given string is alphanumeric.
		Examples:
			if the argument is not alphanumeric:
				send "Invalid name!"
		Since:
			2.4
		Patterns:
			%strings% (is|are) alphanumeric
			%strings% (isn't|is not|aren't|are not) alphanumeric
	Can Fly:
		ID: CondCanFly
		Description:
			Whether a player is allowed to fly.
		Examples:
			player can fly
		Since:
			2.3
		Patterns:
			%players% can fly
			%players% (can't|cannot|can not) fly
	Can Hold:
		ID: CondCanHold
		Description:
			Tests whether a player or a chest can hold the given item.
		Examples:
			block can hold 200 cobblestone
			player has enough space for 64 feathers
		Since:
			1.0
		Patterns:
			%inventories% (can hold|ha(s|ve) [enough] space (for|to hold)) %itemtypes%
			%inventories% (can(no|')t hold|(ha(s|ve) not|ha(s|ve)n't|do[es]n't have) [enough] space (for|to hold)) %itemtypes%
	Can See:
		ID: CondCanSee
		Description:
			Checks whether the given players can see another players.
		Examples:
			if the player can't see the player-argument:
				message "&lt;light red&gt;The player %player-argument% is not online!"
		Since:
			2.3
		Patterns:
			%players% (is|are) [(1Â¦in)]visible for %players%
			%players% can see %players%
			%players% (is|are)(n't| not) [(1Â¦in)]visible for %players%
			%players% can('t| not) see %players%
	Chance:
		ID: CondChance
		Description:
			A condition that randomly succeeds or fails.
			Valid values are between 0% and 100%, or if the percent sign is omitted between 0 and 1.
		Examples:
			chance of 50%:
				drop a diamond
			chance of {chance}% # {chance} between 0 and 100
			chance of {chance} # {chance} between 0 and 1
		Since:
			1.0
		Patterns:
			chance of %number%(1Â¦\%|)
	Comparison:
		ID: CondCompare
		Description:
			A very general condition, it simply compares two values. Usually you can only compare for equality (e.g. block is/isn't of &lt;type&gt;), but some values can also be compared using greater than/less than. In that case you can also test for whether an object is between two others.
			Note: This is the only element where not all patterns are shown. It has actually another two sets of similar patters, but with (was|were) or will be instead of (is|are) respectively, which check different time states of the first expression.
		Examples:
			the clicked block is a stone slab or a double stone slab
			time in the player's world is greater than 8:00
			the creature is not an enderman or an ender dragon
		Since:
			1.0
		Patterns:
			(1Â¦neither|) %objects% ((is|are)(|2Â¦(n't| not|4Â¦ neither)) ((greater|more|higher|bigger|larger) than|above)|\>) %objects%
			(1Â¦neither|) %objects% ((is|are)(|2Â¦(n't| not|4Â¦ neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as)|\>=) %objects%
			(1Â¦neither|) %objects% ((is|are)(|2Â¦(n't| not|4Â¦ neither)) ((less|smaller|lower) than|below)|\<) %objects%
			(1Â¦neither|) %objects% ((is|are)(|2Â¦(n't| not|4Â¦ neither)) (less|smaller|lower|below) [than] or (equal to|the same as)|\<=) %objects%
			(1Â¦neither|) %objects% (2Â¦)((is|are) (not|4Â¦neither)|isn't|aren't|!=) [equal to] %objects%
			(1Â¦neither|) %objects% (is|are|=) [(equal to|the same as)] %objects%
			(1Â¦neither|) %objects% (is|are) between %objects% and %objects%
			(1Â¦neither|) %objects% (2Â¦)(is not|are not|isn't|aren't) between %objects% and %objects%
			(1Â¦neither|) %objects@-1% (was|were)(|2Â¦(n't| not|4Â¦ neither)) ((greater|more|higher|bigger|larger) than|above) %objects%
			(1Â¦neither|) %objects@-1% (was|were)(|2Â¦(n't| not|4Â¦ neither)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
			(1Â¦neither|) %objects@-1% (was|were)(|2Â¦(n't| not|4Â¦ neither)) ((less|smaller|lower) than|below) %objects%
			(1Â¦neither|) %objects@-1% (was|were)(|2Â¦(n't| not|4Â¦ neither)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
			(1Â¦neither|) %objects@-1% (2Â¦)((was|were) (not|4Â¦neither)|wasn't|weren't) [equal to] %objects%
			(1Â¦neither|) %objects@-1% (was|were) [(equal to|the same as)] %objects%
			(1Â¦neither|) %objects@-1% (was|were) between %objects% and %objects%
			(1Â¦neither|) %objects@-1% (2Â¦)(was not|were not|wasn't|weren't) between %objects% and %objects%
			(1Â¦neither|) %objects@1% (will be|2Â¦(will (not|4Â¦neither) be|won't be)) ((greater|more|higher|bigger|larger) than|above) %objects%
			(1Â¦neither|) %objects@1% (will be|2Â¦(will (not|4Â¦neither) be|won't be)) (greater|more|higher|bigger|larger|above) [than] or (equal to|the same as) %objects%
			(1Â¦neither|) %objects@1% (will be|2Â¦(will (not|4Â¦neither) be|won't be)) ((less|smaller|lower) than|below) %objects%
			(1Â¦neither|) %objects@1% (will be|2Â¦(will (not|4Â¦neither) be|won't be)) (less|smaller|lower|below) [than] or (equal to|the same as) %objects%
			(1Â¦neither|) %objects@1% (2Â¦)((will (not|4Â¦neither) be|won't be)|(isn't|aren't|is not|are not) (turning|changing) [in]to) [equal to] %objects%
			(1Â¦neither|) %objects@1% (will be [(equal to|the same as)]|(is|are) (turning|changing) [in]to) %objects%
			(1Â¦neither|) %objects@1% will be between %objects% and %objects%
			(1Â¦neither|) %objects@1% (2Â¦)(will not be|won't be) between %objects% and %objects%
	Contains:
		ID: CondContains
		Description:
			Checks whether an inventory contains an item, a text contains another piece of text, or a list (e.g. {list variable::*} or 'drops') contains another object.
		Examples:
			block contains 20 cobblestone
			player has 4 flint and 2 iron ingots
			{list::*} contains 5
		Since:
			1.0
		Patterns:
			%inventories% (has|have) %itemtypes% [in [(the[ir]|his|her|its)] inventory]
			%inventories% (doesn't|does not|do not|don't) have %itemtypes% [in [(the[ir]|his|her|its)] inventory]
			%inventories/strings/objects% contain[(1Â¦s)] %itemtypes/strings/objects%
			%inventories/strings/objects% (doesn't|does not|do not|don't) contain %itemtypes/strings/objects%
	Damage Cause:
		ID: CondDamageCause
		Description:
			Tests what kind of damage caused a damage event. Refer to the Damage Cause type for a list of all possible causes.
		Examples:
			# make players use their potions of fire resistance whenever they take any kind of fire damage
			on damage:
				damage was caused by lava, fire or burning
				victim is a player
				victim has a potion of fire resistance
				cancel event
				apply fire resistance to the victim for 30 seconds
				remove 1 potion of fire resistance from the victim
			# prevent mobs from dropping items under certain circumstances
			on death:
				entity is not a player
				damage wasn't caused by a block explosion, an attack, a projectile, a potion, fire, burning, thorns or poison
				clear drops
		Since:
			2.0
		Patterns:
			[the] damage (was|is|has)(0Â¦|1Â¦n('|o)t) [been] (caused|done|made) by %damagecause%
	Do Respawn Anchors Work:
		ID: CondAnchorWorks
		Description:
			Checks whether or not respawn anchors work in a world.
		Examples:
			respawn anchors work in world "world_nether"
		Since:
			2.7
		Patterns:
			respawn anchors [do[1:(n't| not)]] work in %worlds%
	Egg Will Hatch:
		ID: CondWillHatch
		Description:
			Whether the egg will hatch in a Player Egg Throw event.
		Examples:
			on player egg throw:
				if an entity won't hatch:
					send "Better luck next time!" to the player
		Since:
			2.7
		Patterns:
			[the] egg (:will|will not|won't) hatch
	Entity is Wet:
		ID: CondEntityIsWet
		Description:
			Checks whether an entity is wet or not (in water, rain or a bubble column).
		Examples:
			if player is wet:
		Since:
			2.6.1
		Patterns:
			%entities% (is|are) wet
			%entities% (isn't|is not|aren't|are not) wet
	Entity is in Liquid:
		ID: CondEntityIsInLiquid
		Description:
			Checks whether an entity is in rain, lava, water or a bubble column.
		Examples:
			if player is in rain:
			if player is in water:
			player is in lava:
			player is in bubble column
		Since:
			2.6.1
		Patterns:
			%entities% (is|are) in (1Â¦water|2Â¦lava|3Â¦[a] bubble[ ]column|4Â¦rain)
			%entities% (isn't|is not|aren't|are not) in (1Â¦water|2Â¦lava|3Â¦[a] bubble[ ]column|4Â¦rain)
	Event Cancelled:
		ID: CondCancelled
		Description:
			Checks whether or not the event is cancelled.
		Examples:
			on click:
				if event is cancelled:
					broadcast "no clicks allowed!"
		Since:
			2.2-dev36
		Patterns:
			[the] event is cancel[l]ed
			[the] event (is not|isn't) cancel[l]ed
	Exists/Is Set:
		ID: CondIsSet
		Description:
			Checks whether a given expression or variable is set.
		Examples:
			{teams::%player's uuid%::preferred-team} is not set
			on damage:
				projectile exists
				broadcast "%attacker% used a %projectile% to attack %victim%!"
		Since:
			1.2
		Patterns:
			%~objects% (exist[s]|(is|are) set)
			%~objects% (do[es](n't| not) exist|(is|are)(n't| not) set)
	Has AI:
		ID: CondAI
		Description:
			Checks whether an entity has AI.
		Examples:
			target entity has ai
		Since:
			2.5
		Patterns:
			%livingentities% (has|have) (ai|artificial intelligence)
			%livingentities% (doesn't|does not|do not|don't) have (ai|artificial intelligence)
	Has Client Weather:
		ID: CondHasClientWeather
		Description:
			Checks whether the given players have a custom client weather
		Examples:
			if the player has custom weather:
				message "Your custom weather is %player's weather%"
		Since:
			2.3
		Patterns:
			%players% (has|have) [a] (client|custom) weather [set]
			%players% (doesn't|does not|do not|don't) have [a] (client|custom) weather [set]
	Has Custom Model Data:
		ID: CondHasCustomModelData
		Description:
			Check if an item has a custom model data tag
		Examples:
			player's tool has custom model data
		Since:
			2.5
		Patterns:
			%itemtypes% (has|have) [custom] model data
			%itemtypes% (doesn't|does not|do not|don't) have [custom] model data
	Has Metadata:
		ID: CondHasMetadata
		Description:
			Checks whether a metadata holder has a metadata tag.
		Examples:
			if player has metadata value "healer":
		Since:
			2.2-dev36
		Patterns:
			%metadataholders% (has|have) metadata [(value|tag)[s]] %strings%
			%metadataholders% (doesn't|does not|do not|don't) have metadata [(value|tag)[s]] %strings%
	Has Permission:
		ID: CondPermission
		Description:
			Test whether a player has a certain permission.
		Examples:
			player has permission "skript.tree"
			victim has the permission "admin":
				send "You're attacking an admin!" to attacker
		Since:
			1.0
		Patterns:
			%commandsenders% (has|have) [the] permission[s] %strings%
			%commandsenders% (doesn't|does not|do not|don't) have [the] permission[s] %strings%
	Has Played Before:
		ID: CondPlayedBefore
		Description:
			Checks whether a player has played on this server before. You can also use on first join if you want to make triggers for new players.
		Examples:
			player has played on this server before
			player hasn't played before
		Since:
			1.4, 2.7 (multiple players)
		Patterns:
			%offlineplayers% [(has|have|did)] [already] play[ed] [on (this|the) server] (before|already)
			%offlineplayers% (has not|hasn't|have not|haven't|did not|didn't) [(already|yet)] play[ed] [on (this|the) server] (before|already|yet)
	Has Potion:
		ID: CondHasPotion
		Description:
			Checks whether the given living entities have specific potion effects.
		Since:
			2.6.1
		Patterns:
			%livingentities% (has|have) potion[s] [effect[s]] %potioneffecttypes%
			%livingentities% (doesn't|does not|do not|don't) have potion[s] [effect[s]] %potioneffecttypes%
	Has Resource Pack:
		ID: CondHasResourcePack
		Description:
			Checks whether the given players have a server resource pack loaded. Please note that this can't detect player's own resource pack, only the resource pack that sent by the server.
		Examples:
			if the player has a resource pack loaded:
		Since:
			2.4
		Patterns:
			%players% (has|have) [a] resource pack [(loaded|installed)]
			%players% (doesn't|does not|do not|don't) have [a] resource pack [(loaded|installed)]
	Has Scoreboard Tag:
		ID: CondHasScoreboardTag
		Description:
			Checks whether the given entities has the given scoreboard tags.
		Examples:
			if the targeted armor stand has the scoreboard tag "test tag":
		Since:
			2.3
		Patterns:
			%entities% (has|have) [the] score[ ]board tag[s] %strings%
			%entities% (doesn't|does not|do not|don't) have [the] score[ ]board tag[s] %strings%
	Ignition Process:
		ID: CondIgnitionProcess
		Description:
			Checks if a creeper is going to explode.
		Examples:
			if the last spawned creeper is going to explode:
				loop all players in radius 3 of the last spawned creeper
					send "RUN!!!" to the loop-player
		Since:
			2.5
		Patterns:
			[creeper[s]] %livingentities% ((is|are)|1Â¦(isn't|is not|aren't|are not)) going to explode
			[creeper[s]] %livingentities% ((is|are)|1Â¦(isn't|is not|aren't|are not)) in the (ignition|explosion) process
			creeper[s] %livingentities% ((is|are)|1Â¦(isn't|is not|aren't|are not)) ignited
	Is Alive:
		ID: CondIsAlive
		Description:
			Checks whether an entity is alive. Works for non-living entities too.
		Since:
			2.0, 2.4-alpha4 (non-living entity support)
		Patterns:
			%entities% (is|are) (alive|1Â¦dead)
			%entities% (isn't|is not|aren't|are not) (alive|1Â¦dead)
	Is Banned:
		ID: CondIsBanned
		Description:
			Checks whether a player or IP is banned.
		Examples:
			player is banned
			victim is not IP-banned
			"127.0.0.1" is banned
		Since:
			1.4
		Patterns:
			%offlineplayers/strings% (is|are) banned
			%players/strings% (is|are) IP(-| |)banned
			%offlineplayers/strings% (isn't|is not|aren't|are not) banned
			%players/strings% (isn't|is not|aren't|are not) IP(-| |)banned
	Is Bed/Anchor Spawn:
		ID: CondRespawnLocation
		Description:
			Checks what the respawn location of a player in the respawn event is.
		Examples:
			on respawn:
				the respawn location is a bed
				broadcast "%player% is respawning in their bed! So cozy!"
		Since:
			2.7
		Patterns:
			[the] respawn location (was|is)[1:(n'| no)t] [a] (:bed|respawn anchor)
	Is Block:
		ID: CondIsBlock
		Description:
			Checks whether an item is a block.
		Examples:
			player's held item is a block
			{list::*} are blocks
		Since:
			2.4
		Patterns:
			%itemtypes% (is|are) ([a] block|blocks)
			%itemtypes% (isn't|is not|aren't|are not) ([a] block|blocks)
	Is Block Redstone Powered:
		ID: CondIsBlockRedstonePowered
		Description:
			Checks if a block is indirectly or directly powered by redstone
		Examples:
			if clicked block is redstone powered:
				send "This block is well-powered by redstone!"
			if clicked block is indirectly redstone powered:
				send "This block is indirectly redstone powered."
		Since:
			2.5
		Patterns:
			%blocks% (is|are) redstone powered
			%blocks% (is|are) indirectly redstone powered
			%blocks% (is|are)(n't| not) redstone powered
			%blocks% (is|are)(n't| not) indirectly redstone powered
	Is Blocking:
		ID: CondIsBlocking
		Description:
			Checks whether a player is blocking with their shield.
		Examples:
			on damage of player:
				victim is blocking
				damage attacker by 0.5 hearts
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			%players% (is|are) (blocking|defending) [with [a] shield]
			%players% (isn't|is not|aren't|are not) (blocking|defending) [with [a] shield]
	Is Burning:
		ID: CondIsBurning
		Description:
			Checks whether an entity is on fire, e.g. a zombie due to being in sunlight, or any entity after falling into lava.
		Examples:
			# increased attack against burning targets
			victim is burning:
				increase damage by 2
		Since:
			1.4.4
		Patterns:
			%entities% (is|are) (burning|ignited|on fire)
			%entities% (isn't|is not|aren't|are not) (burning|ignited|on fire)
	Is Charged:
		ID: CondIsCharged
		Description:
			Checks if a creeper is charged (powered).
		Examples:
			if the last spawned creeper is charged:
				broadcast "A charged creeper is at %location of last spawned creeper%"
		Since:
			2.5
		Patterns:
			%livingentities% (is|are) (charged|powered)
			%livingentities% (isn't|is not|aren't|are not) (charged|powered)
	Is Edible:
		ID: CondIsEdible
		Description:
			Checks whether an item is edible.
		Examples:
			steak is edible
			player's tool is edible
		Since:
			2.2-dev36
		Patterns:
			%itemtypes% (is|are) edible
			%itemtypes% (isn't|is not|aren't|are not) edible
	Is Empty:
		ID: CondIsEmpty
		Description:
			Checks whether an inventory, an inventory slot, or a text is empty.
		Examples:
			player's inventory is empty
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			%inventories/slots/strings% (is|are) empty
			%inventories/slots/strings% (isn't|is not|aren't|are not) empty
	Is Enchanted:
		ID: CondIsEnchanted
		Description:
			Checks whether an item is enchanted.
		Examples:
			tool of the player is enchanted with efficiency 2
			helm, chestplate, leggings or boots are enchanted
		Since:
			1.4.6
		Patterns:
			%itemtypes% (is|are) enchanted [with %-enchantmenttype%]
			%itemtypes% (isn't|is not|aren't|are not) enchanted [with %-enchantmenttype%]
	Is Flammable:
		ID: CondIsFlammable
		Description:
			Checks whether an item is flammable.
		Examples:
			wood is flammable
			player's tool is flammable
		Since:
			2.2-dev36
		Patterns:
			%itemtypes% (is|are) flammable
			%itemtypes% (isn't|is not|aren't|are not) flammable
	Is Flying:
		ID: CondIsFlying
		Description:
			Checks whether a player is flying.
		Examples:
			player is not flying
		Since:
			1.4.4
		Patterns:
			%players% (is|are) flying
			%players% (isn't|is not|aren't|are not) flying
	Is Frozen:
		ID: CondIsFrozen
		Description:
			Checks whether an entity is frozen.
		Examples:
			if player is frozen:
				kill player
		Since:
			2.7
		Patterns:
			%entities% (is|are) frozen
			%entities% (isn't|is not|aren't|are not) frozen
	Is Fuel:
		ID: CondIsFuel
		Description:
			Checks whether an item can be used as fuel in a furnace.
		Examples:
			on right click on furnace:
				if player's tool is not fuel:
					send "Please hold a valid fuel item in your hand"
					cancel event
		Since:
			2.5.1
		Patterns:
			%itemtypes% (is|are) [furnace] fuel
			%itemtypes% (isn't|is not|aren't|are not) [furnace] fuel
	Is Gliding:
		ID: CondIsGliding
		Description:
			Checks whether a living entity is gliding.
		Examples:
			if player is gliding
		Since:
			2.7
		Patterns:
			%livingentities% (is|are) gliding
			%livingentities% (isn't|is not|aren't|are not) gliding
	Is Holding:
		ID: CondItemInHand
		Description:
			Checks whether a player is holding a specific item. Cannot be used with endermen, use 'entity is [not] an enderman holding &lt;item type&gt;' instead.
		Examples:
			player is holding a stick
			victim isn't holding a sword of sharpness
		Since:
			1.0
		Patterns:
			[%livingentities%] ha(s|ve) %itemtypes% in [main] hand
			[%livingentities%] (is|are) holding %itemtypes% [in main hand]
			[%livingentities%] ha(s|ve) %itemtypes% in off[(-| )]hand
			[%livingentities%] (is|are) holding %itemtypes% in off[(-| )]hand
			[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in [main] hand
			[%livingentities%] (is not|isn't) holding %itemtypes% [in main hand]
			[%livingentities%] (ha(s|ve) not|do[es]n't have) %itemtypes% in off[(-| )]hand
			[%livingentities%] (is not|isn't) holding %itemtypes% in off[(-| )]hand
	Is Incendiary:
		ID: CondIncendiary
		Description:
			Checks if an entity will create fire when it explodes. This condition is also usable in an explosion prime event.
		Examples:
			on explosion prime:
				if the explosion is fiery:
					broadcast "A fiery explosive has been ignited!"
		Since:
			2.5
		Patterns:
			%entities% ((is|are) incendiary|cause[s] a[n] (incendiary|fiery) explosion)
			%entities% ((is not|are not|isn't|aren't) incendiary|(does not|do not|doesn't|don't) cause[s] a[n] (incendiary|fiery) explosion)
			the [event(-| )]explosion (is|1Â¦(is not|isn't)) (incendiary|fiery)
	Is Infinite:
		ID: CondIsInfinite
		Description:
			Checks whether potion effects are infinite.
		Examples:
			all of the active potion effects of the player are infinite
		Since:
			2.7
		Patterns:
			%potioneffects% (is|are) infinite
			%potioneffects% (isn't|is not|aren't|are not) infinite
	Is Interactable:
		ID: CondIsInteractable
		Description:
			Checks wether or not a block is interactable.
		Examples:
			on block break:
				if event-block is interactable:
					cancel event
					send "You cannot break interactable blocks!"
		Since:
			2.5.2
		Patterns:
			%itemtypes% (is|are) interactable
			%itemtypes% (isn't|is not|aren't|are not) interactable
	Is Invisible:
		ID: CondIsInvisible
		Description:
			Checks whether a living entity is invisible.
		Examples:
			target entity is invisible
		Since:
			2.7
		Patterns:
			%livingentities% (is|are) (invisible|:visible)
			%livingentities% (isn't|is not|aren't|are not) (invisible|:visible)
	Is Invulnerable:
		ID: CondIsInvulnerable
		Description:
			Checks whether an entity is invulnerable.
		Examples:
			target entity is invulnerable
		Since:
			2.5
		Patterns:
			%entities% (is|are) invulnerable
			%entities% (isn't|is not|aren't|are not) invulnerable
	Is Leashed:
		ID: CondLeashed
		Description:
			Checks to see if an entity is currently leashed.
		Examples:
			target entity is leashed
		Since:
			2.5
		Patterns:
			%livingentities% (is|are) leashed
			%livingentities% (isn't|is not|aren't|are not) leashed
	Is Loaded:
		ID: CondIsLoaded
		Description:
			Checks whether or not a chunk/world is loaded. 'chunk at 1, 1' uses chunk coords, which are location coords divided by 16.
		Examples:
			if chunk at {home::%player's uuid%} is loaded:
			if chunk 1, 10 in world "world" is loaded:
			if world("lobby") is loaded:
		Since:
			2.3, 2.5 (revamp with chunk at location/coords)
		Patterns:
			chunk[s] %directions% [%locations%] (is|are)[(1Â¦(n't| not))] loaded
			chunk [at] %number%, %number% (in|of) [world] %world% is[(1Â¦(n't| not))] loaded
			[world[s]] %worlds% (is|are)[(1Â¦(n't| not))] loaded
	Is Normalized:
		ID: CondIsVectorNormalized
		Description:
			Checks whether a vector is normalized i.e. length of 1
		Examples:
			vector of player's location is normalized
		Since:
			2.5.1
		Patterns:
			%vectors% (is|are) normalized
			%vectors% (isn't|is not|aren't|are not) normalized
	Is Occluding:
		ID: CondIsOccluding
		Description:
			Checks whether an item is a block and completely blocks vision.
		Examples:
			player's tool is occluding
		Since:
			2.5.1
		Patterns:
			%itemtypes% (is|are) occluding
			%itemtypes% (isn't|is not|aren't|are not) occluding
	Is Online:
		ID: CondIsOnline
		Description:
			Checks whether a player is online.
		Examples:
			player is online
			player-argument is offline
		Since:
			1.4
		Patterns:
			%offlineplayers% (is|are) (online|1Â¦offline)
			%offlineplayers% (isn't|is not|aren't|are not) (online|1Â¦offline)
	Is Operator:
		ID: CondIsOp
		Description:
			Checks whether a player is a server operator.
		Examples:
			player is an operator
		Since:
			2.7
		Patterns:
			%offlineplayers% (is|are) [[a] server|an] op[erator][s]
			%offlineplayers% (isn't|is not|aren't|are not) [[a] server|an] op[erator][s]
	Is Passable:
		ID: CondIsPassable
		Description:
			Checks whether a block is passable.
			A block is passable if it has no colliding parts that would prevent players from moving through it.
			Blocks like tall grass, flowers, signs, etc. are passable, but open doors, fence gates, trap doors, etc. are not because they still have parts that can be collided with.
		Examples:
			if player's targeted block is passable
		Since:
			2.5.1
		Patterns:
			%blocks% (is|are) passable
			%blocks% (isn't|is not|aren't|are not) passable
	Is Plugin Enabled:
		ID: CondIsPluginEnabled
		Description:
			Check if a plugin is enabled/disabled on the server.
			Plugin names can be found in the plugin's 'plugin.yml' file or by using the '/plugins' command, they are NOT the name of the plugin's jar file.
			When checking if a plugin is not enabled, this will return true if the plugin is either disabled or not on the server. 
			When checking if a plugin is disabled, this will return true if the plugin is on the server and is disabled.
		Examples:
			if plugin "Vault" is enabled:
			if plugin "WorldGuard" is not enabled:
			if plugins "Essentials" and "Vault" are enabled:
			if plugin "MyBrokenPlugin" is disabled:
		Since:
			2.6
		Patterns:
			plugin[s] %strings% (is|are) enabled
			plugin[s] %strings% (is|are)(n't| not) enabled
			plugin[s] %strings% (is|are) disabled
	Is Poisoned:
		ID: CondIsPoisoned
		Description:
			Checks whether an entity is poisoned.
		Examples:
			player is poisoned:
				cure the player from poison
				message "You have been cured!"
		Since:
			1.4.4
		Patterns:
			%livingentities% (is|are) poisoned
			%livingentities% (isn't|is not|aren't|are not) poisoned
	Is Preferred Tool:
		ID: CondIsPreferredTool
		Description:
			Checks whether an item is the preferred tool for a block. A preferred tool is one that will drop the block's item when used. For example, a wooden pickaxe is a preferred tool for grass and stone blocks, but not for iron ore.
		Examples:
			on left click:
				event-block is set
				if player's tool is the preferred tool for event-block:
					break event-block naturally using player's tool
				else:
					cancel event
		Since:
			2.7
		Patterns:
			%itemtypes% (is|are) %blocks/blockdatas%'s preferred tool[s]
			%itemtypes% (is|are) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%
			%itemtypes% (is|are)(n't| not) %blocks/blockdatas%'s preferred tool[s]
			%itemtypes% (is|are)(n't| not) [the|a] preferred tool[s] (for|of) %blocks/blockdatas%
	Is Riding:
		ID: CondIsRiding
		Description:
			Tests whether an entity is riding another or is in a vehicle.
		Examples:
			player is riding a saddled pig
		Since:
			2.0
		Patterns:
			%entities% (is|are) riding [%entitydatas%]
			%entities% (isn't|is not|aren't|are not) riding [%entitydatas%]
	Is Riptiding:
		ID: CondIsRiptiding
		Description:
			Checks to see if an entity is currently using the Riptide enchantment.
		Examples:
			target entity is riptiding
		Since:
			2.5
		Patterns:
			%livingentities% (is|are) riptiding
			%livingentities% (isn't|is not|aren't|are not) riptiding
	Is Script Loaded:
		ID: CondScriptLoaded
		Description:
			Check if the current script, or another script, is currently loaded.
		Examples:
			script is loaded
			script "example.sk" is loaded
		Since:
			2.2-dev31
		Patterns:
			script[s] [%-strings%] (is|are) loaded
			script[s] [%-strings%] (isn't|is not|aren't|are not) loaded
	Is Silent:
		ID: CondIsSilent
		Description:
			Checks whether an entity is silent i.e. its sounds are disabled.
		Examples:
			target entity is silent
		Since:
			2.5
		Patterns:
			%entities% (is|are) silent
			%entities% (isn't|is not|aren't|are not) silent
	Is Sleeping:
		ID: CondIsSleeping
		Description:
			Checks whether a player is sleeping.
		Examples:
			# cut your enemies' throats in their sleep >=)
			on attack:
				attacker is holding a sword
				victim is sleeping
				increase the damage by 1000
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sleeping
			%players% (isn't|is not|aren't|are not) sleeping
	Is Slime Chunk:
		ID: CondIsSlimeChunk
		Description:
			Tests whether a chunk is a so-called slime chunk.
			Slimes can generally spawn in the swamp biome and in slime chunks.
			For more info, see the Minecraft wiki.
		Examples:
			command /slimey:
				trigger:
					if chunk at player is a slime chunk:
						send "Yeah, it is!"
					else:
						send "Nope, it isn't"
		Since:
			2.3
		Patterns:
			%chunk% (is|are) ([a] slime chunk|slime chunks|slimey)
			%chunk% (isn't|is not|aren't|are not) ([a] slime chunk|slime chunks|slimey)
	Is Sneaking:
		ID: CondIsSneaking
		Description:
			Checks whether a player is sneaking.
		Examples:
			# prevent mobs from seeing sneaking players if they are at least 4 meters apart
			on target:
				target is sneaking
				distance of target and the entity is bigger than 4
				cancel the event
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sneaking
			%players% (isn't|is not|aren't|are not) sneaking
	Is Solid:
		ID: CondIsSolid
		Description:
			Checks whether an item is solid.
		Examples:
			grass block is solid
			player's tool isn't solid
		Since:
			2.2-dev36
		Patterns:
			%itemtypes% (is|are) solid
			%itemtypes% (isn't|is not|aren't|are not) solid
	Is Sprinting:
		ID: CondIsSprinting
		Description:
			Checks whether a player is sprinting.
		Examples:
			player is not sprinting
		Since:
			1.4.4
		Patterns:
			%players% (is|are) sprinting
			%players% (isn't|is not|aren't|are not) sprinting
	Is Stackable:
		ID: CondIsStackable
		Description:
			Checks whether an item is stackable.
		Examples:
			diamond axe is stackable
			birch wood is stackable
			torch is stackable
		Since:
			2.7
		Patterns:
			%itemstacks% (is|are) stackable
			%itemstacks% (isn't|is not|aren't|are not) stackable
	Is Swimming:
		ID: CondIsSwimming
		Description:
			Checks whether a living entity is swimming.
		Examples:
			player is swimming
		Since:
			2.3
		Patterns:
			%livingentities% (is|are) swimming
			%livingentities% (isn't|is not|aren't|are not) swimming
	Is Tameable:
		ID: CondIsTameable
		Description:
			Check if an entity is tameable.
		Examples:
			on damage:
				if victim is tameable:
					cancel event
		Since:
			2.5
		Patterns:
			%livingentities% (is|are) tameable
			%livingentities% (isn't|is not|aren't|are not) tameable
	Is Transparent:
		ID: CondIsTransparent
		Description:
			Checks whether an item is transparent. Note that this condition may not work for all blocks, due to the transparency list used by Spigot not being completely accurate.
		Examples:
			player's tool is transparent.
		Since:
			2.2-dev36
		Patterns:
			%itemtypes% (is|are) transparent
			%itemtypes% (isn't|is not|aren't|are not) transparent
	Is Unbreakable:
		ID: CondIsUnbreakable
		Description:
			Checks whether an item is unbreakable.
		Examples:
			if event-item is unbreakable
		Since:
			2.5.1
		Patterns:
			%itemtypes% (is|are) unbreakable
			%itemtypes% (isn't|is not|aren't|are not) unbreakable
	Is Valid:
		ID: CondIsValid
		Description:
			Checks whether an entity has died or been despawned for some other reason.
		Examples:
			if event-entity is valid
		Since:
			2.7
		Patterns:
			%entities% (is|are) valid
			%entities% (isn't|is not|aren't|are not) valid
	Is Wearing:
		ID: CondIsWearing
		Description:
			Checks whether a player is wearing some armour.
		Examples:
			player is wearing an iron chestplate and iron leggings
			player is wearing all diamond armour
		Since:
			1.0
		Patterns:
			%livingentities% (is|are) wearing %itemtypes%
			%livingentities% (isn't|is not|aren't|are not) wearing %itemtypes%
	Is Whitelisted:
		ID: CondIsWhitelisted
		Description:
			Whether or not the server or a player is whitelisted.
		Examples:
			if server is whitelisted:
			if player is whitelisted
		Since:
			2.5.2
		Patterns:
			[the] server (is|1Â¦is(n't| not)) white[ ]listed
			%players% (is|are)(|1Â¦(n't| not)) white[ ]listed
	Is Within:
		ID: CondIsWithin
		Description:
			Whether a location is within something else. The "something" can be a block, an entity, a chunk, a world, or a cuboid formed by two other locations.
			Note that using the is between condition will refer to a straight line between locations, while this condition will refer to the cuboid between locations.
		Since:
			2.7
		Patterns:
			%locations% (is|are) within %location% and %location%
			%locations% (isn't|is not|aren't|are not) within %location% and %location%
			%locations% (is|are) (within|in[side [of]]) %entity/chunk/world/block%
			%locations% (isn't|is not|aren't|are not) (within|in[side [of]]) %entity/chunk/world/block%
	Is Within Radius:
		ID: CondWithinRadius
		Description:
			Checks whether a location is within a certain radius of another location.
		Examples:
			on damage:
				if attacker's location is within 10 blocks around {_spawn}:
					cancel event
					send "You can't PVP in spawn."
		Since:
			2.7
		Patterns:
			%locations% (is|are) within %number% (block|metre|meter)[s] (around|of) %locations%
			%locations% (isn't|is not|aren't|are not) within %number% (block|metre|meter)[s] (around|of) %locations%
	Is a Skript command:
		ID: CondIsSkriptCommand
		Description:
			Checks whether a command/string is a custom Skript command.
		Since:
			2.6
		Patterns:
			%string% (is|are) [a] s(k|c)ript (command|cmd)
			%string% (isn't|is not|aren't|are not) [a] s(k|c)ript (command|cmd)
	Is of Type:
		ID: CondIsOfType
		Description:
			Checks whether an item of an entity is of the given type. This is mostly useful for variables, as you can use the general 'is' condition otherwise (e.g. 'victim is a creeper').
		Examples:
			tool is of type {selected type}
			victim is of type {villager type}
		Since:
			1.4
		Patterns:
			%itemstacks/entities% (is|are) of type[s] %entitytypes/entitydatas%
			%itemstacks/entities% (isn't|is not|aren't|are not) of type[s] %entitytypes/entitydatas%
	Is on Ground:
		ID: CondIsOnGround
		Description:
			Checks whether an entity is on ground.
		Examples:
			player is not on ground
		Since:
			2.2-dev26
		Patterns:
			%entities% (is|are) on [the] ground
			%entities% (isn't|is not|aren't|are not) on [the] ground
	Matches:
		ID: CondMatches
		Description:
			Checks whether the defined strings match the input regexes (Regular expressions).
		Examples:
			on chat:
				if message partially matches "\d":
					send "Message contains a digit!"
				if message doesn't match "[A-Za-z]+":
					send "Message doesn't only contain letters!"
		Since:
			2.5.2
		Patterns:
			%strings% (1Â¦match[es]|2Â¦do[es](n't| not) match) %strings%
			%strings% (1Â¦partially match[es]|2Â¦do[es](n't| not) partially match) %strings%
	Projectile Can Bounce:
		ID: CondProjectileCanBounce
		Description:
			Whether or not a projectile can bounce.
		Examples:
			on shoot:
				send "Boing!" to all players if projectile can bounce
		Since:
			2.5.1
		Patterns:
			%projectiles% can bounce
			%projectiles% (can't|cannot|can not) bounce
	PvP:
		ID: CondPvP
		Description:
			Checks the PvP state of a world.
		Examples:
			PvP is enabled
			PvP is disabled in "world"
		Since:
			1.3.4
		Patterns:
			(is PvP|PvP is) enabled [in %worlds%]
			(is PvP|PvP is) disabled [in %worlds%]
	Resource Pack:
		ID: CondResourcePack
		Description:
			Checks state of the resource pack in a resource pack request response event.
		Examples:
			on resource pack response:
				if the resource pack wasn't accepted:
					kick the player due to "You have to install the resource pack to play in this server!"
		Since:
			2.4
		Patterns:
			[the] resource pack (was|is|has) [been] %resourcepackstate%
			[the] resource pack (was|is|has)(n't| not) [been] %resourcepackstate%
	Running Minecraft:
		ID: CondMinecraftVersion
		Description:
			Checks if current Minecraft version is given version or newer.
		Examples:
			running minecraft "1.14"
		Since:
			2.5
		Patterns:
			running [(1Â¦below)] minecraft %string%
	Starts/Ends With:
		ID: CondStartsEndsWith
		Description:
			Checks if a text starts or ends with another.
		Examples:
			if the argument starts with "test" or "debug":
				send "Stop!"
		Since:
			2.2-dev36, 2.5.1 (multiple strings support)
		Patterns:
			%strings% (start|1Â¦end)[s] with %strings%
			%strings% (doesn't|does not|do not|don't) (start|1Â¦end) with %strings%
	Time:
		ID: CondDate
		Description:
			Tests whether a given real time was more or less than some time span ago.
		Examples:
			command /command-with-cooldown:
				trigger:
					{command::%player's uuid%::last-usage} was less than a minute ago:
						message "Please wait a minute between uses of this command."
						stop
					set {command::%player's uuid%::last-usage} to now
					# ... actual command trigger here ...
		Since:
			2.0
		Patterns:
			%date% (was|were)( more|(n't| not) less) than %timespan% [ago]
			%date% (was|were)((n't| not) more| less) than %timespan% [ago]
Effects:
	Action Bar:
		ID: EffActionBar
		Description:
			Sends an action bar message to the given player(s).
		Examples:
			send action bar "Hello player!" to player
		Since:
			2.3
		Patterns:
			send [the] action[ ]bar [with text] %string% [to %players%]
	Ban:
		ID: EffBan
		Examples:
			unban player
			ban "127.0.0.1"
			IP-ban the player because "he is an idiot"
			ban player due to "inappropriate language" for 2 days
		Since:
			1.4, 2.1.1 (ban reason), 2.5 (timespan)
		Patterns:
			ban %strings/offlineplayers% [(by reason of|because [of]|on account of|due to) %-string%] [for %-timespan%]
			unban %strings/offlineplayers%
			ban %players% by IP [(by reason of|because [of]|on account of|due to) %-string%] [for %-timespan%]
			unban %players% by IP
			IP(-| )ban %players% [(by reason of|because [of]|on account of|due to) %-string%] [for %-timespan%]
			(IP(-| )unban|un[-]IP[-]ban) %players%
	Break Block:
		ID: EffBreakNaturally
		Description:
			Breaks the block and spawns items as if a player had mined it
			
You can add a tool, which will spawn items based on how that tool would break the block 
			(ie: When using a hand to break stone, it drops nothing, whereas with a pickaxe it drops cobblestone)
		Examples:
			on right click:
				break clicked block naturally
			loop blocks in radius 10 around player:
				break loop-block using player's tool
			loop blocks in radius 10 around player:
				break loop-block naturally using diamond pickaxe
		Since:
			2.4
		Patterns:
			break %blocks% [naturally] [using %-itemtype%]
	Broadcast:
		ID: EffBroadcast
		Description:
			Broadcasts a message to the server.
		Examples:
			broadcast "Welcome %player% to the server!"
			broadcast "Woah! It's a message!"
		Since:
			1.0, 2.6 (broadcasting objects), 2.6.1 (using advanced formatting)
		Patterns:
			broadcast %objects% [(to|in) %-worlds%]
	Cancel Command Cooldown:
		ID: EffCancelCooldown
		Description:
			Only usable in commands. Makes it so the current command usage isn't counted towards the cooldown.
		Examples:
			command /nick &lt;text&gt;:
				executable by: players
				cooldown: 10 seconds
				trigger:
					if length of arg-1 is more than 16:
						# Makes it so that invalid arguments don't make you wait for the cooldown again
						cancel the cooldown
						send "Your nickname may be at most 16 characters."
						stop
					set the player's display name to arg-1
		Since:
			2.2-dev34
		Patterns:
			(cancel|ignore) [the] [current] [command] cooldown
			un(cancel|ignore) [the] [current] [command] cooldown
	Cancel Drops:
		ID: EffCancelDrops
		Description:
			Cancels drops of items or experiences in a death or block break event. Please note that this doesn't keep items or experiences of a dead player. If you want to do that, use the Keep Inventory / Experience effect.
		Since:
			2.4
		Patterns:
			(cancel|clear|delete) [the] drops [of (1Â¦items|2Â¦[e]xp[erience][s])]
			(cancel|clear|delete) [the] (1Â¦item|2Â¦[e]xp[erience]) drops
	Cancel Event:
		ID: EffCancelEvent
		Description:
			Cancels the event (e.g. prevent blocks from being placed, or damage being taken).
		Examples:
			on damage:
				victim is a player
				victim has the permission "skript.god"
				cancel the event
		Since:
			1.0
		Patterns:
			cancel [the] event
			uncancel [the] event
	Change: Set/Add/Remove/Delete/Reset:
		ID: EffChange
		Description:
			A very general effect that can change many expressions. Many expressions can only be set and/or deleted, while some can have things added to or removed from them.
		Examples:
			# set:
			Set the player's display name to "&lt;red&gt;%name of player%"
			set the block above the victim to lava
			# add:
			add 2 to the player's health # preferably use '<a href='#EffHealth'>heal</a>' for this
			add argument to {blacklist::*}
			give a diamond pickaxe of efficiency 5 to the player
			increase the data value of the clicked block by 1
			# remove:
			remove 2 pickaxes from the victim
			subtract 2.5 from {points::%uuid of player%}
			# remove all:
			remove every iron tool from the player
			remove all minecarts from {entitylist::*}
			# delete:
			delete the block below the player
			clear drops
			delete {variable}
			# reset:
			reset walk speed of player
			reset chunk at the targeted block
		Since:
			1.0 (set, add, remove, delete), 2.0 (remove all)
		Patterns:
			(add|give) %objects% to %~objects%
			increase %~objects% by %objects%
			give %~objects% %objects%
			set %~objects% to %objects%
			remove (all|every) %objects% from %~objects%
			(remove|subtract) %objects% from %~objects%
			reduce %~objects% by %objects%
			(delete|clear) %~objects%
			reset %~objects%
	Charge Creeper:
		ID: EffChargeCreeper
		Description:
			Charges or uncharges a creeper. A creeper is charged when it has been struck by lightning.
		Examples:
			on spawn of creeper:
				charge the event-entity
		Since:
			2.5
		Patterns:
			make %livingentities% [a[n]] (charged|powered|1Â¦((un|non[-])charged|(un|non[-])powered)) [creeper[s]]
			(charge|power|1Â¦(uncharge|unpower)) %livingentities%
	Color Items:
		ID: EffColorItems
		Description:
			Colors items in a given color. You can also use RGB codes if you feel limited with the 16 default colors. RGB codes are three numbers from 0 to 255 in the order (red, green, blue), where (0,0,0) is black and (255,255,255) is white. Armor is colorable for all Minecraft versions. With Minecraft 1.11 or newer you can also color potions and maps. Note that the colors might not look exactly how you'd expect.
		Examples:
			dye player's helmet blue
			color the player's tool red
		Since:
			2.0, 2.2-dev26 (maps and potions)
		Patterns:
			(dye|colo[u]r|paint) %itemtypes% %color%
			(dye|colo[u]r|paint) %itemtypes% (%number%, %number%, %number%)
	Command:
		ID: EffCommand
		Description:
			Executes a command. This can be useful to use other plugins in triggers.
		Examples:
			make player execute command "/suicide"
			execute console command "/say Hello everyone!"
		Since:
			1.0
		Patterns:
			[execute] [the] command %strings% [by %-commandsenders%]
			[execute] [the] %commandsenders% command %strings%
			(let|make) %commandsenders% execute [[the] command] %strings%
	Connect:
		ID: EffConnect
		Description:
			Connects a player to another bungeecord server
		Examples:
			connect all players to "hub"
		Since:
			2.3
		Patterns:
			connect %players% to [server] %string%
			send %players% to server %string%
	Continue:
		ID: EffContinue
		Description:
			Skips the value currently being looped, moving on to the next value if it exists.
		Examples:
			loop all players:
				if loop-value does not have permission "moderator":
					continue # filter out non moderators
				broadcast "%loop-player% is a moderator!" # Only moderators get broadcast
		Since:
			2.2-dev37, 2.7 (while loops)
		Patterns:
			continue [loop]
	Damage/Heal/Repair:
		ID: EffHealth
		Description:
			Damage/Heal/Repair an entity, or item.
		Examples:
			damage player by 5 hearts
			heal the player
			repair tool of player
		Since:
			1.0
		Patterns:
			damage %livingentities/itemtypes% by %number% [heart[s]] [with fake cause %-damagecause%]
			heal %livingentities% [by %-number% [heart[s]]]
			repair %itemtypes% [by %-number%]
	Delay:
		ID: Delay
		Description:
			Delays the script's execution by a given timespan. Please note that delays are not persistent, e.g. trying to create a tempban script with ban player â wait 7 days â unban player will not work if you restart your server anytime within these 7 days. You also have to be careful even when using small delays!
		Examples:
			wait 2 minutes
			halt for 5 minecraft hours
			wait a tick
		Since:
			1.4
		Patterns:
			(wait|halt) [for] %timespan%
	Do If:
		ID: EffDoIf
		Description:
			Execute an effect if a condition is true.
		Examples:
			on join:
				give a diamond to the player if the player has permission "rank.vip"
		Since:
			2.3
		Patterns:
			<.+> if <.+>
	Drop:
		ID: EffDrop
		Description:
			Drops one or more items.
		Examples:
			on death of creeper:
				drop 1 TNT
		Since:
			1.0
		Patterns:
			drop %itemtypes/experiences% [%directions% %locations%] [(1Â¦without velocity)]
	Enable/Disable/Reload Script File:
		ID: EffScriptFile
		Description:
			Enables, disables, or reloads a script file.
		Examples:
			reload script "test"
			enable script file "testing"
			unload script file "script.sk"
		Since:
			2.4
		Patterns:
			(1:(enable|load)|2:reload|3:(disable|unload)) s(c|k)ript [file] %string%
	Enchant/Disenchant:
		ID: EffEnchant
		Description:
			Enchant or disenchant an existing item.
		Examples:
			enchant the player's tool with sharpness 5
			disenchant the player's tool
		Since:
			2.0
		Patterns:
			enchant %~itemtypes% with %enchantmenttypes%
			disenchant %~itemtypes%
	Equip:
		ID: EffEquip
		Description:
			Equips or unequips an entity with some given armor. This will replace any armor that the entity is wearing.
		Examples:
			equip player with diamond helmet
			equip player with all diamond armor
			unequip diamond chestplate from player
			unequip all armor from player
			unequip player's armor
		Since:
			1.0, 2.7 (multiple entities, unequip)
		Patterns:
			equip [%livingentities%] with %itemtypes%
			make %livingentities% wear %itemtypes%
			unequip %itemtypes% [from %livingentities%]
			unequip %livingentities%'[s] (armor|equipment)
	Exit:
		ID: EffExit
		Description:
			Exits a given amount of loops and conditionals, or the entire trigger.
		Examples:
			if player has any ore:
				stop
			message "%player% has no ores!"
			loop blocks above the player:
				loop-block is not air:
					exit 2 sections
				set loop-block to water
		Since:
			<i>unknown</i> (before 2.1)
		Patterns:
			(exit|stop) [trigger]
			(exit|stop) [(1|a|the|this)] (0Â¦section|1Â¦loop|2Â¦conditional)
			(exit|stop) <\d+> (0Â¦section|1Â¦loop|2Â¦conditional)s
			(exit|stop) all (0Â¦section|1Â¦loop|2Â¦conditional)s
	Explode Creeper:
		ID: EffExplodeCreeper
		Description:
			Starts the explosion process of a creeper or instantly explodes it.
		Examples:
			start explosion of the last spawned creeper
			stop ignition of the last spawned creeper
		Since:
			2.5
		Patterns:
			instantly explode [creeper[s]] %livingentities%
			explode [creeper[s]] %livingentities% instantly
			ignite creeper[s] %livingentities%
			start (ignition|explosion) [process] of [creeper[s]] %livingentities%
			stop (ignition|explosion) [process] of [creeper[s]] %livingentities%
	Explosion:
		ID: EffExplosion
		Description:
			Creates an explosion of a given force. The Minecraft Wiki has an article on explosions which lists the explosion forces of TNT, creepers, etc.
			Hint: use a force of 0 to create a fake explosion that does no damage whatsoever, or use the explosion effect introduced in Skript 2.0.
			Starting with Bukkit 1.4.5 and Skript 2.0 you can use safe explosions which will damage entities but won't destroy any blocks.
		Examples:
			create an explosion of force 10 at the player
			create an explosion of force 0 at the victim
		Since:
			1.0
		Patterns:
			[(create|make)] [an] explosion (of|with) (force|strength|power) %number% [%directions% %locations%] [(1Â¦with fire)]
			[(create|make)] [a] safe explosion (of|with) (force|strength|power) %number% [%directions% %locations%]
			[(create|make)] [a] fake explosion [%directions% %locations%]
			[(create|make)] [an] explosion[ ]effect [%directions% %locations%]
	Feed:
		ID: EffFeed
		Description:
			Feeds the specified players.
		Examples:
			feed all players
			feed the player by 5 beefs
		Since:
			2.2-dev34
		Patterns:
			feed [the] %players% [by %-number% [beef[s]]]
	Force Attack:
		ID: EffForceAttack
		Description:
			Makes a living entity attack an entity with a melee attack.
		Examples:
			spawn a wolf at player's location
			make last spawned wolf attack player
		Since:
			2.5.1
		Patterns:
			make %livingentities% attack %entity%
			force %livingentities% to attack %entity%
	Force Respawn:
		ID: EffRespawn
		Description:
			Forces player(s) to respawn if they are dead. If this is called without delay from death event, one tick is waited before respawn attempt.
		Examples:
			on death of player:
				force event-player to respawn
		Since:
			2.2-dev21
		Patterns:
			force %players% to respawn
	Hide Player from Server List:
		ID: EffHidePlayerFromServerList
		Description:
			Hides a player from the hover list and decreases the online players count (only if the player count wasn't changed before).
		Examples:
			on server list ping:
				hide {vanished::*} from the server list
		Since:
			2.3
		Patterns:
			hide %players% (in|on|from) [the] server list
			hide %players%'[s] info[rmation] (in|on|from) [the] server list
	Ignite/Extinguish:
		ID: EffIgnite
		Description:
			Lights entities on fire or extinguishes them.
		Examples:
			ignite the player
			extinguish the player
		Since:
			1.4
		Patterns:
			(ignite|set fire to) %entities% [for %-timespan%]
			(set|light) %entities% on fire [for %-timespan%]
			extinguish %entities%
	Keep Inventory / Experience:
		ID: EffKeepInventory
		Description:
			Keeps the inventory or/and experiences of the dead player in a death event.
		Examples:
			on death of a player:
				if the victim is an op:
					keep the inventory and experiences
		Since:
			2.4
		Patterns:
			keep [the] (inventory|items) [(1:and [e]xp[erience][s] [point[s]])]
			keep [the] [e]xp[erience][s] [point[s]] [(1:and (inventory|items))]
	Kick:
		ID: EffKick
		Description:
			Kicks a player from the server.
		Examples:
			on place of TNT, lava, or obsidian:
				kick the player due to "You may not place %block%!"
				cancel the event
		Since:
			1.0
		Patterns:
			kick %players% [(by reason of|because [of]|on account of|due to) %-string%]
	Kill:
		ID: EffKill
		Description:
			Kills an entity.
			Note: This effect does not set the entity's health to 0 (which causes issues), but damages the entity by 100 times its maximum health.
		Examples:
			kill the player
			kill all creepers in the player's world
			kill all endermen, witches and bats
		Since:
			1.0
		Patterns:
			kill %entities%
	Knockback:
		ID: EffKnockback
		Description:
			Apply the same velocity as a knockback to living entities in a direction. Mechanics such as knockback resistance will be factored in.
		Examples:
			knockback player north
			knock victim (vector from attacker to victim) with strength 10
		Since:
			2.7
		Patterns:
			(apply knockback to|knock[back]) %livingentities% [%direction%] [with (strength|force) %-number%]
	Launch firework:
		ID: EffFireworkLaunch
		Description:
			Launch firework effects at the given location(s).
		Examples:
			launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
		Since:
			2.4
		Patterns:
			(launch|deploy) [[a] firework [with effect[s]]] %fireworkeffects% at %locations% [([with] (duration|power)|timed) %number%]
	Leash entities:
		ID: EffLeash
		Description:
			Leash living entities to other entities.
		Examples:
			leash the player to the target entity
		Since:
			2.3
		Patterns:
			(leash|lead) %livingentities% to %entity%
			make %entity% (leash|lead) %livingentities%
			un(leash|lead) [holder of] %livingentities%
	Lightning:
		ID: EffLightning
		Description:
			Strike lightning at a given location. Can use 'lightning effect' to create a lightning that does not harm entities or start fires.
		Examples:
			strike lightning at the player
			strike lightning effect at the victim
		Since:
			1.4
		Patterns:
			(create|strike) lightning(1Â¦[ ]effect|) %directions% %locations%
	Load Server Icon:
		ID: EffLoadServerIcon
		Description:
			Loads server icons from the given files. You can get the loaded icon using the
			last loaded server icon expression.
			Please note that the image must be 64x64 and the file path starts from the server folder.
		Since:
			2.3
		Patterns:
			load [the] server icon (from|of) [the] [image] [file] %string%
	Locally Suppress Warning:
		ID: EffSuppressWarnings
		Description:
			Suppresses target warnings from the current script.
		Examples:
			locally suppress missing conjunction warnings
			suppress the variable save warnings
		Since:
			2.3
		Patterns:
			[local[ly]] suppress [the] (1:conflict|2:variable save|3:[missing] conjunction[s]|4:starting [with] expression[s]) warning[s]
	Log:
		ID: EffLog
		Description:
			Writes text into a .log file. Skript will write these files to /plugins/Skript/logs.
			NB: Using 'server.log' as the log file will write to the default server log. Omitting the log file altogether will log the message as '[Skript] [&lt;script&gt;.sk] &lt;message&gt;' in the server log.
		Examples:
			on place of TNT:
				log "%player% placed TNT in %world% at %location of block%" to "tnt/placement.log"
		Since:
			2.0
		Patterns:
			log %strings% [(to|in) [file[s]] %-strings%]
	Look At:
		ID: EffLook
		Description:
			Forces the mob(s) or player(s) to look at an entity, vector or location. Vanilla max head pitches range from 10 to 50.
		Since:
			2.7
		Patterns:
			(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) (%entity%['s (feet:feet|eyes)]|of:(feet:feet|eyes) of %entity%) [at [head] [rotation] speed %-number%] [[and] max[imum] [head] pitch %-number%]
			(force|make) %livingentities% [to] (face [towards]|look [(at|towards)]) %vector/location% [at [head] [rotation] speed %-number%] [[and] max[imum] [head] pitch %-number%]
	Make Egg Hatch:
		ID: EffMakeEggHatch
		Description:
			Makes the egg hatch in a Player Egg Throw event.
		Examples:
			on player egg throw:
				# EGGS FOR DAYZ!
				make the egg hatch
		Since:
			2.7
		Patterns:
			make [the] egg [:not] hatch
	Make Fly:
		ID: EffMakeFly
		Description:
			Forces a player to start/stop flying.
		Examples:
			make player fly
			force all players to stop flying
		Since:
			2.2-dev34
		Patterns:
			force %players% to [(start|1Â¦stop)] fly[ing]
			make %players% (start|1Â¦stop) flying
			make %players% fly
	Make Incendiary:
		ID: EffIncendiary
		Description:
			Sets if an entity's explosion will leave behind fire. This effect is also usable in an explosion prime event.
		Examples:
			on explosion prime:
				make the explosion fiery
		Since:
			2.5
		Patterns:
			make %entities% [(1Â¦not)] incendiary
			make %entities%'[s] explosion [(1Â¦not)] (incendiary|fiery)
			make [the] [event(-| )]explosion [(1Â¦not)] (incendiary|fiery)
	Make Invisible:
		ID: EffInvisible
		Description:
			Makes a living entity visible/invisible. This is not a potion and therefore does not have features such as a time limit or particles.
			When setting an entity to invisible while using an invisibility potion on it, the potion will be overridden and when it runs out the entity keeps its invisibility.
		Examples:
			make target entity invisible
		Since:
			2.7
		Patterns:
			make %livingentities% (invisible|not visible)
			make %livingentities% (visible|not invisible)
	Make Invulnerable:
		ID: EffInvulnerability
		Description:
			Makes an entity invulnerable/not invulnerable.
		Examples:
			make target entity invulnerable
		Since:
			2.5
		Patterns:
			make %entities% invulnerable
			make %entities% (not invulnerable|vulnerable)
	Make Say:
		ID: EffMakeSay
		Description:
			Forces a player to send a message to the chat. If the message starts with a slash it will force the player to use command.
		Examples:
			make the player say "Hello."
			force all players to send the message "I love this server"
		Since:
			2.3
		Patterns:
			make %players% (say|send [the] message[s]) %strings%
			force %players% to (say|send [the] message[s]) %strings%
	Message:
		ID: EffMessage
		Description:
			Sends a message to the given player. Only styles written
			in given string or in formatted expressions will be parsed.
			Adding an optional sender allows the messages to be sent as if a specific player sent them.
			This is useful with Minecraft 1.16.4's new chat ignore system, in which players can choose to ignore other players,
			but for this to work, the message needs to be sent from a player.
		Examples:
			message "A wild %player% appeared!"
			message "This message is a distraction. Mwahaha!"
			send "Your kill streak is %{kill streak::%uuid of player%}%." to player
			if the targeted entity exists:
				message "You're currently looking at a %type of the targeted entity%!"
			on chat:
				cancel event
				send "[%player%] >> %message%" to all players from player
		Since:
			1.0, 2.2-dev26 (advanced features), 2.5.2 (optional sender), 2.6 (sending objects)
		Patterns:
			(message|send [message[s]]) %objects% [to %commandsenders%] [from %-player%]
	Open Book:
		ID: EffOpenBook
		Description:
			Opens a written book to a player.
		Examples:
			open book player's tool to player
		Since:
			2.5.1
		Patterns:
			(open|show) book %itemtype% (to|for) %players%
	Open/Close Inventory:
		ID: EffOpenInventory
		Description:
			Opens an inventory to a player. The player can then access and modify the inventory as if it was a chest that he just opened.
			Please note that currently 'show' and 'open' have the same effect, but 'show' will eventually show an unmodifiable view of the inventory in the future.
		Examples:
			show the victim's inventory to the player
			open the player's inventory for the player
		Since:
			2.0, 2.1.1 (closing), 2.2-Fixes-V10 (anvil), 2.4 (hopper, dropper, dispenser
		Patterns:
			(open|show) ((0Â¦(crafting [table]|workbench)|1Â¦chest|2Â¦anvil|3Â¦hopper|4Â¦dropper|5Â¦dispenser) (view|window|inventory|)|%-inventory/inventorytype%) (to|for) %players%
			close [the] inventory [view] (to|of|for) %players%
			close %players%'[s] inventory [view]
	Pathfind:
		ID: EffPathfind
		Description:
			Make an entity pathfind towards a location or another entity. Not all entities can pathfind. If the pathfinding target is another entity, the entities may or may not continuously follow the target.
		Examples:
			make all creepers pathfind towards player
			make all cows stop pathfinding
			make event-entity pathfind towards player at speed 1
		Since:
			2.7
		Patterns:
			make %livingentities% (pathfind|move) to[wards] %livingentity/location% [at speed %-number%]
			make %livingentities% stop (pathfinding|moving)
	Play Effect:
		ID: EffVisualEffect
		Description:
			Plays a visual effect at a given location or on a given entity.
			Please note that some effects can only be played on entities, e.g. wolf hearts or the hurt effect, and that these are always visible to all players.
		Examples:
			play wolf hearts on the clicked wolf
			show mob spawner flames at the targeted block to the player
		Since:
			2.1
		Patterns:
			(play|show) %visualeffects% (on|%directions%) %entities/locations% [(to %-players%|in (radius|range) of %-number%)]
			(play|show) %number% %visualeffects% (on|%directions%) %locations% [(to %-players%|in (radius|range) of %-number%)]
	Play Sound:
		ID: EffPlaySound
		Examples:
			play sound "block.note_block.pling" # It is block.note.pling in 1.12.2
			play sound "entity.experience_orb.pickup" with volume 0.5 to the player
			play sound "custom.music.1" in jukebox category at {speakerBlock}
		Since:
			2.2-dev28, 2.4 (sound categories)
		Patterns:
			play sound[s] %strings% [(in|from) %-soundcategory%] [(at|with) volume %-number%] [(and|at|with) pitch %-number%] at %locations% [(to|for) %-players%]
			play sound[s] %strings% [(in|from) %-soundcategory%] [(at|with) volume %-number%] [(and|at|with) pitch %-number%] [(to|for) %players%] [(at|from) %-locations%]
	Player Info Visibility:
		ID: EffPlayerInfoVisibility
		Description:
			Sets whether all player related information is hidden in the server list.
			The Vanilla Minecraft client will display ??? (dark gray) instead of player counts and will not show the
			hover hist when hiding player info.
			The version string can override the ???.
			Also the Online Players Count and
			Max Players expressions will return -1 when hiding player info.
		Examples:
			hide player info
			hide player related information in the server list
			reveal all player related info
		Since:
			2.3
		Patterns:
			hide [all] player [related] info[rmation] [(in|on|from) [the] server list]
			(show|reveal) [all] player [related] info[rmation] [(in|to|on|from) [the] server list]
	Player Visibility:
		ID: EffPlayerVisibility
		Since:
			2.3
		Patterns:
			hide %players% [(from|for) %-players%]
			reveal %players% [(to|for|from) %-players%]
	Poison/Cure:
		ID: EffPoison
		Description:
			Poison or cure a creature.
		Examples:
			poison the player
			poison the victim for 20 seconds
			cure the player from poison
		Since:
			1.3.2
		Patterns:
			poison %livingentities% [for %-timespan%]
			(cure|unpoison) %livingentities% [(from|of) poison]
	Potion Effects:
		ID: EffPotion
		Description:
			Apply or remove potion effects to/from entities.
		Since:
			2.0, 2.2-dev27 (ambient and particle-less potion effects), 2.5 (replacing existing effect), 2.5.2 (potion effects), 2.7 (icon and infinite)
		Patterns:
			apply %potioneffects% to %livingentities%
			apply infinite [:ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %-number%] [noparticles:without [any] particles] [icon:(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [replacing:replacing [the] existing effect]
			apply [:ambient] [potion of] %potioneffecttypes% [potion] [[[of] tier] %-number%] [noparticles:without [any] particles] [icon:(whilst hiding [the]|without (the|a)) [potion] icon] to %livingentities% [for %-timespan%] [replacing:replacing [the] existing effect]
	Push:
		ID: EffPush
		Description:
			Push entities around.
		Examples:
			push the player upwards
			push the victim downwards at speed 0.5
		Since:
			1.4.6
		Patterns:
			(push|thrust) %entities% %direction% [(at|with) (speed|velocity|force) %-number%]
	PvP:
		ID: EffPvP
		Description:
			Set the PvP state for a given world.
		Examples:
			enable PvP #(current world only)
			disable PvP in all worlds
		Since:
			1.3.4
		Patterns:
			enable PvP [in %worlds%]
			disable PVP [in %worlds%]
	Replace:
		ID: EffReplace
		Description:
			Replaces all occurrences of a given text with another text. Please note that you can only change variables and a few expressions, e.g. a message or a line of a sign.
		Examples:
			replace "<item>" in {textvar} with "%item%"
			replace every "&" with "Â§" in line 1
			# The following acts as a simple chat censor, but it will e.g. censor mass, hassle, assassin, etc. as well:
			on chat:
				replace all "kys", "idiot" and "noob" with "****" in the message
			 
			replace all stone and dirt in player's inventory and player's top inventory with diamond
		Since:
			2.0, 2.2-dev24 (replace in multiple strings and replace items in inventory), 2.5 (replace first, case sensitivity)
		Patterns:
			replace (all|every|) %strings% in %strings% with %string% [(1Â¦with case sensitivity)]
			replace (all|every|) %strings% with %string% in %strings% [(1Â¦with case sensitivity)]
			replace first %strings% in %strings% with %string% [(1Â¦with case sensitivity)]
			replace first %strings% with %string% in %string% [(1Â¦with case sensitivity)]
			replace (all|every|) %itemtypes% in %inventories% with %itemtype%
			replace (all|every|) %itemtypes% with %itemtype% in %inventories%
	Return:
		ID: EffReturn
		Description:
			Makes a function return a value
		Examples:
			function double(i: number) :: number:
				return 2 * {_i}
		Since:
			2.2
		Patterns:
			return %objects%
	Send Block Change:
		ID: EffSendBlockChange
		Description:
			Makes a player see a block as something it really isn't. BlockData support is only for MC 1.13+
		Examples:
			make player see block at player as dirt
			make player see target block as campfire[facing=south]
		Since:
			2.2-dev37c, 2.5.1 (block data support)
		Patterns:
			make %players% see %blocks% as %itemtype/blockdata%
	Send Resource Pack:
		ID: EffSendResourcePack
		Examples:
			on join:
				send the resource pack from "URL" with hash "hash" to the player
		Since:
			2.4
		Patterns:
			send [the] resource pack [from [[the] URL]] %string% to %players%
			send [the] resource pack [from [[the] URL]] %string% with hash %string% to %players%
	Shear:
		ID: EffShear
		Description:
			Shears or 'un-shears' a sheep. Please note that no wool is dropped, this only sets the 'sheared' state of the sheep.
		Examples:
			on rightclick on a sheep holding a sword:
				shear the clicked sheep
		Since:
			2.0
		Patterns:
			shear %livingentities%
			un[-]shear %livingentities%
	Shoot:
		ID: EffShoot
		Description:
			Shoots a projectile (or any other entity) from a given entity.
		Examples:
			shoot an arrow
			make the player shoot a creeper at speed 10
			shoot a pig from the creeper
		Since:
			1.4
		Patterns:
			shoot %entitydatas% [from %livingentities/locations%] [(at|with) (speed|velocity) %-number%] [%-direction%]
			(make|let) %livingentities/locations% shoot %entitydatas% [(at|with) (speed|velocity) %-number%] [%-direction%]
	Silence Entity:
		ID: EffSilence
		Description:
			Controls whether or not an entity is silent.
		Examples:
			make target entity silent
		Since:
			2.5
		Patterns:
			silence %entities%
			unsilence %entities%
			make %entities% silent
			make %entities% not silent
	Stop Server:
		ID: EffStopServer
		Description:
			Stops or restarts the server. If restart is used when the restart-script spigot.yml option isn't defined, the server will stop instead.
		Examples:
			stop the server
			restart server
		Since:
			2.5
		Patterns:
			(stop|shut[ ]down) [the] server
			restart [the] server
	Stop Sound:
		ID: EffStopSound
		Examples:
			stop sound "block.chest.open" for the player
			stop playing sounds "ambient.underwater.loop" and "ambient.underwater.loop.additions" to the player
			stop all sounds for all players
			stop sound in the record category
		Since:
			2.4, 2.7 (stop all sounds)
		Patterns:
			stop (all:all sound[s]|sound[s] %-strings%) [(in [the]|from) %-soundcategory%] [(from playing to|for) %players%]
			stop playing sound[s] %strings% [(in [the]|from) %-soundcategory%] [(to|for) %players%]
	Swing Hand:
		ID: EffSwingHand
		Description:
			Makes an entity swing their hand. This does nothing if the entity does not have an animation for swinging their hand.
		Examples:
			make player swing their main hand
		Since:
			2.5.1
		Patterns:
			make %livingentities% swing [their] [main] hand
			make %livingentities% swing [their] off[ ]hand
	Teleport:
		ID: EffTeleport
		Description:
			Teleport an entity to a specific location. 
			This effect is delayed by default on Paper, meaning certain syntax such as the return effect for functions cannot be used after this effect.
			The keyword 'force' indicates this effect will not be delayed, 
			which may cause lag spikes or server crashes when using this effect to teleport entities to unloaded chunks.
		Examples:
			teleport the player to {homes.%player%}
			teleport the attacker to the victim
		Since:
			1.0
		Patterns:
			[(1Â¦force)] teleport %entities% (to|%direction%) %location%
	Title - Reset:
		ID: EffResetTitle
		Description:
			Resets the title of the player to the default values.
		Examples:
			reset the titles of all players
			reset the title
		Since:
			2.3
		Patterns:
			reset [the] title[s] [of %players%]
			reset [the] %players%'[s] title[s]
	Title - Send:
		ID: EffSendTitle
		Examples:
			send title "Competition Started" with subtitle "Have fun, Stay safe!" to player for 5 seconds
			send title "Hi %player%" to player
			send title "Loot Drop" with subtitle "starts in 3 minutes" to all players
			send title "Hello %player%!" with subtitle "Welcome to our server" to player for 5 seconds with fadein 1 second and fade out 1 second
			send subtitle "Party!" to all players
		Since:
			2.3
		Patterns:
			send title %string% [with subtitle %-string%] [to %players%] [for %-timespan%] [with fade[(-| )]in %-timespan%] [(and|with) fade[(-| )]out %-timespan%]
			send subtitle %string% [to %players%] [for %-timespan%] [with fade[(-| )]in %-timespan%] [(and|with) fade[(-| )]out %-timespan%]
	Toggle:
		ID: EffToggle
		Description:
			Toggle the state of a block.
		Examples:
			# use arrows to toggle switches, doors, etc.
			on projectile hit:
				projectile is arrow
				toggle the block at the arrow
		Since:
			1.4
		Patterns:
			(close|turn off|de[-]activate) %blocks%
			(toggle|switch) [[the] state of] %blocks%
			(open|turn on|activate) %blocks%
	Toggle Flight:
		ID: EffToggleFlight
		Description:
			Toggle the flight mode of a player.
		Examples:
			allow flight to event-player
		Since:
			2.3
		Patterns:
			(allow|enable) (fly|flight) (for|to) %players%
			(disallow|disable) (fly|flight) (for|to) %players%
	Tree:
		ID: EffTree
		Description:
			Creates a tree.
			This may require that there is enough space above the given location and that the block below is dirt/grass, but it is possible that the tree will just grow anyways, possibly replacing every block in its path.
		Examples:
			grow a tall redwood tree above the clicked block
		Since:
			1.0
		Patterns:
			(grow|create|generate) tree [of type %structuretype%] %directions% %locations%
			(grow|create|generate) %structuretype% %directions% %locations%
	Vectors - Rotate Around Vector:
		ID: EffVectorRotateAroundAnother
		Description:
			Rotates one or more vectors around another vector
		Examples:
			rotate {_v} around vector 1, 0, 0 by 90
		Since:
			2.2-dev28
		Patterns:
			rotate %vectors% around %vector% by %number% [degrees]
	Vectors - Rotate around XYZ:
		ID: EffVectorRotateXYZ
		Description:
			Rotates one or more vectors around the x, y, or z axis by some amount of degrees
		Examples:
			rotate {_v} around x-axis by 90
			rotate {_v} around y-axis by 90
			rotate {_v} around z-axis by 90 degrees
		Since:
			2.2-dev28
		Patterns:
			rotate %vectors% around (0Â¦x|1Â¦y|2Â¦z)(-| )axis by %number% [degrees]
	Vehicle:
		ID: EffVehicle
		Description:
			Makes an entity ride another entity, e.g. a minecart, a saddled pig, an arrow, etc.
		Examples:
			make the player ride a saddled pig
			make the attacker ride the victim
		Since:
			2.0
		Patterns:
			(make|let|force) %entities% [to] (ride|mount) [(in|on)] %entities/entitydatas%
			(make|let|force) %entities% [to] (dismount|(dismount|leave) (from|of|) (any|the[ir]|his|her|) vehicle[s])
			(eject|dismount) (any|the|) passenger[s] (of|from) %entities%
	op/deop:
		ID: EffOp
		Description:
			Grant/revoke a user operator state.
		Examples:
			op the player
			deop all players
		Since:
			1.0
		Patterns:
			[de[-]]op %offlineplayers%
Expressions:
	Absorbed blocks:
		ID: ExprAbsorbedBlocks
		Description:
			The blocks absorbed by a sponge block.
		Examples:
			the absorbed blocks
		Since:
			2.5
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] absorbed blocks
	Affected Entities:
		ID: ExprAffectedEntities
		Description:
			The affected entities in the area cloud effect event.
		Examples:
			on area cloud effect:
				loop affected entities:
					if loop-value is a player:
						send "WARNING: you've step on an area effect cloud!" to loop-value
		Since:
			2.4
		Return type: Living Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] affected entities
	Age of Block/Entity:
		ID: ExprAge
		Description:
			Returns the age or maximum age of blocks and age for entities (there in no maximum age for entities).
			For blocks, 'Age' represents the different growth stages that a crop-like block can go through. A value of 0 indicates that the crop was freshly planted, whilst a value equal to 'maximum age' indicates that the crop is ripe and ready to be harvested.
			For entities, 'Age' represents the time left for them to become adults and it's in minus increasing to be 0 which means they're adults, e.g. A baby cow needs 20 minutes to become an adult which equals to 24,000 ticks so their age will be -24000 once spawned.
		Examples:
			# Set targeted crop to fully grown crop
			set age of targeted block to maximum age of targeted block
			 
			# Spawn a baby cow that will only need 1 minute to become an adult
			spawn a baby cow at player
			set age of last spawned entity to -1200 # in ticks = 60 seconds
		Since:
			2.7
		Return type: integer
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] [:max[imum]] age of %blocks/entities%
			%blocks/entities%'[s] [:max[imum]] age
	All Banned Players/IPs:
		ID: ExprAllBannedEntries
		Description:
			Obtains the list of all banned players or IP addresses.
		Examples:
			command /banlist:
				trigger:
					send all the banned players
		Since:
			2.7
		Return type: Object
		Changers:
			none
		Patterns:
			[all [[of] the]|the] banned (players|ips:(ips|ip addresses))
	All Operators:
		ID: ExprOps
		Description:
			The list of operators on the server.
		Examples:
			set {_ops::*} to all operators
		Since:
			2.7
		Return type: Offline Player
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[all [[of] the]|the] [server] [:non(-| )]op[erator]s
	All Permissions:
		ID: ExprPermissions
		Description:
			Returns all permissions of the defined player(s). Note that the modifications to resulting list do not actually change permissions.
		Examples:
			set {_permissions::*} to all permissions of the player
		Since:
			2.2-dev33
		Return type: Text
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] permissions (from|of) %players%
			[(all [[of] the]|the)] %players%'[s] permissions
	All Scripts:
		ID: ExprScripts
		Description:
			Returns all of the scripts, or just the enabled or disabled ones.
		Examples:
			command /scripts:
				trigger:
					send "All Scripts: %scripts%" to player
					send "Loaded Scripts: %enabled scripts%" to player
					send "Unloaded Scripts: %disabled scripts%" to player
		Since:
			2.5
		Return type: Text
		Changers:
			none
		Patterns:
			[all [of the]] scripts [(1:without ([subdirectory] paths|parents))]
			[all [of the]] (enabled|loaded) scripts [(1:without ([subdirectory] paths|parents))]
			[all [of the]] (disabled|unloaded) scripts [(1:without ([subdirectory] paths|parents))]
	All commands:
		ID: ExprAllCommands
		Description:
			Returns all registered commands or all script commands.
		Examples:
			send "Number of all commands: %size of all commands%"
			send "Number of all script commands: %size of all script commands%"
		Since:
			2.6
		Return type: Text
		Changers:
			none
		Patterns:
			[(all|the|all [of] the)] [registered] [(1Â¦script)] commands
	Alphabetical Sort:
		ID: ExprAlphabetList
		Description:
			Sorts given strings in alphabetical order.
		Examples:
			set {_list::*} to alphabetically sorted {_strings::*}
		Since:
			2.2-dev18b
		Return type: Text
		Changers:
			none
		Patterns:
			alphabetically sorted %strings%
	Altitude:
		ID: ExprAltitude
		Description:
			Effectively an alias of 'y-coordinate of â¦', it represents the height of some object above bedrock.
		Examples:
			on damage:
				altitude of the attacker is higher than the altitude of the victim
				set damage to damage * 1.2
		Since:
			1.4.3
		Return type: Number
		Changers:
			none
		Patterns:
			[the] altitude[s] of %locations%
			%locations%'[s] altitude[s]
	Amount:
		ID: ExprAmount
		Examples:
			message "There are %number of all players% players online!"
		Since:
			1.0
		Return type: long
		Changers:
			none
		Patterns:
			[the] (amount|number|size) of %objects%
			[the] recursive (amount|number|size) of %objects%
	Amount of Items:
		ID: ExprAmountOfItems
		Description:
			Counts how many of a particular item type are in a given inventory.
		Examples:
			message "You have %number of ores in the player's inventory% ores in your inventory."
		Since:
			2.0
		Return type: long
		Changers:
			none
		Patterns:
			[the] (amount|number) of %itemtypes% (in|of) %inventories%
	Anvil Text Input:
		ID: ExprAnvilText
		Description:
			An expression to get the name to be applied to an item in an anvil inventory.
		Examples:
			on inventory click:
				type of event-inventory is anvil inventory
				if the anvil input text of the event-inventory is "FREE OP":
					ban player
		Since:
			2.7
		Return type: Text
		Changers:
			none
		Patterns:
			[the] anvil [inventory] (rename|text) input of %inventories%
			%inventories%'[s] anvil [inventory] (rename|text) input
	Applied Enchantments:
		ID: ExprAppliedEnchantments
		Description:
			The applied enchantments in an enchant event.
			 Deleting or removing the applied enchantments will prevent the item's enchantment.
		Examples:
			on enchant:
				set the applied enchantments to sharpness 10 and fire aspect 5
		Since:
			2.5
		Return type: Enchantment Type
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] applied enchant[ment]s
	Argument:
		ID: ExprArgument
		Description:
			Usable in script commands and command events. Holds the value of an argument given to the command, e.g. if the command "/tell &lt;player&gt; &lt;text&gt;" is used like "/tell Njol Hello Njol!" argument 1 is the player named "Njol" and argument 2 is "Hello Njol!".
			One can also use the type of the argument instead of its index to address the argument, e.g. in the above example 'player-argument' is the same as 'argument 1'.
			Please note that specifying the argument type is only supported in script commands.
		Examples:
			give the item-argument to the player-argument
			damage the player-argument by the number-argument
			give a diamond pickaxe to the argument
			add argument 1 to argument 2
			heal the last argument
		Since:
			1.0, 2.7 (support for command events)
		Return type: Object
		Changers:
			none
		Patterns:
			[the] last arg[ument]
			[the] arg[ument](-| )<(\d+)>
			[the] <(\d*1)st|(\d*2)nd|(\d*3)rd|(\d*[4-90])th> arg[ument][s]
			[(all [[of] the]|the)] arg[ument][(1:s)]
			[the] %*classinfo%( |-)arg[ument][( |-)<\d+>]
			[the] arg[ument]( |-)%*classinfo%[( |-)<\d+>]
	Arithmetic:
		ID: ExprArithmetic
		Description:
			Arithmetic expressions, e.g. 1 + 2, (health of player - 2) / 3, etc.
		Examples:
			set the player's health to 10 - the player's health
			loop (argument + 2) / 5 times:
				message "Two useless numbers: %loop-num * 2 - 5%, %2^loop-num - 1%"
			message "You have %health of player * 2% half hearts of HP!"
		Since:
			1.4.2
		Return type: Number
		Changers:
			unknown
		Patterns:
			(%number%)[ ]+[ ](%number%)
			(%number%)[ ]+[ ]%number%
			%number%[ ]+[ ](%number%)
			%number%[ ]+[ ]%number%
			(%number%)[ ]-[ ](%number%)
			(%number%)[ ]-[ ]%number%
			%number%[ ]-[ ](%number%)
			%number%[ ]-[ ]%number%
			(%number%)[ ]*[ ](%number%)
			(%number%)[ ]*[ ]%number%
			%number%[ ]*[ ](%number%)
			%number%[ ]*[ ]%number%
			(%number%)[ ]/[ ](%number%)
			(%number%)[ ]/[ ]%number%
			%number%[ ]/[ ](%number%)
			%number%[ ]/[ ]%number%
			(%number%)[ ]^[ ](%number%)
			(%number%)[ ]^[ ]%number%
			%number%[ ]^[ ](%number%)
			%number%[ ]^[ ]%number%
	Armour Slot:
		ID: ExprArmorSlot
		Description:
			A part of a player's armour, i.e. the boots, leggings, chestplate or helmet.
		Examples:
			set chestplate of the player to a diamond chestplate
			helmet of player is neither a helmet nor air # player is wearing a block, e.g. from another plugin
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (0Â¦boot[s]|0Â¦shoe[s]|1Â¦leg[ging][s]|2Â¦chestplate[s]|3Â¦helm[et][s]) [(0Â¦item|4Â¦slot)] of %livingentities%
			%livingentities%'[s] (0Â¦boot[s]|0Â¦shoe[s]|1Â¦leg[ging][s]|2Â¦chestplate[s]|3Â¦helm[et][s]) [(0Â¦item|4Â¦slot)]
	Arrow Knockback Strength:
		ID: ExprArrowKnockbackStrength
		Description:
			An arrow's knockback strength.
		Examples:
			on shoot:
				event-projectile is an arrow
				set arrow knockback strength of event-projectile to 10
		Since:
			2.5.1
		Return type: long
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] arrow knockback strength of %projectiles%
			%projectiles%'[s] arrow knockback strength
	Arrows Stuck:
		ID: ExprArrowsStuck
		Description:
			The number of arrows stuck in a living entity.
		Examples:
			set arrows stuck in player to 5
		Since:
			2.5
		Return type: long
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[number of] arrow[s] stuck in %livingentities%
	Attack Cooldown:
		ID: ExprAttackCooldown
		Description:
			Returns the current cooldown for a player's attack. This is used to calculate damage, with 1.0 representing a fully charged attack and 0.0 representing a non-charged attack.
			NOTE: Currently this can not be set to anything.
		Examples:
			on damage:
				if attack cooldown of attacker < 1:
					set damage to 0
					send "Your hit was too weak! wait until your weapon is fully charged next time." to attacker
		Since:
			2.6.1
		Return type: float
		Changers:
			none
		Patterns:
			[the] attack cooldown of %players%
			%players%'[s] attack cooldown
	Attacked:
		ID: ExprAttacked
		Description:
			The victim of a damage event, e.g. when a player attacks a zombie this expression represents the zombie. When using Minecraft 1.11+, this also covers the hit entity in a projectile hit event.
		Examples:
			on damage:
				victim is a creeper
				damage the attacked by 1 heart
		Since:
			1.3, 2.6.1 (projectile hit event)
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] (attacked|damaged|victim) [<(.+)>]
	Attacker:
		ID: ExprAttacker
		Description:
			The attacker of a damage event, e.g. when a player attacks a zombie this expression represents the player.
			Please note that the attacker can also be a block, e.g. a cactus or lava, but this expression will not be set in these cases.
		Examples:
			on damage:
				attacker is a player
				health of attacker is less than or equal to 2
				damage victim by 1 heart
		Since:
			1.3
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] (attacker|damager)
	Bed:
		ID: ExprBed
		Since:
			2.0, 2.7 (offlineplayers, safe bed)
		Return type: Location
		Changers:
			set
			delete
		Patterns:
			[the] [(safe:(safe|valid)|(unsafe|invalid))] bed[s] [location[s]] of %offlineplayers%
			%offlineplayers%'[s] [(safe:(safe|valid)|(unsafe|invalid))] bed[s] [location[s]]
	Biome:
		ID: ExprBiome
		Description:
			The biome at a certain location. Please note that biomes are only defined for x/z-columns
			(i.e. the altitude (y-coordinate) doesn't matter), up until Minecraft 1.15.x.
			As of Minecraft 1.16, biomes are now 3D (per block vs column).
		Examples:
			# damage player in deserts constantly
			every real minute:
				loop all players:
					biome at loop-player is desert
					damage the loop-player by 1
		Since:
			1.4.4, 2.6.1 (3D biomes)
		Return type: Biome
		Changers:
			set
		Patterns:
			[the] biome [(of|%direction%) %locations%]
			%locations%'[s] biome
	Block:
		ID: ExprBlock
		Description:
			The block involved in the event, e.g. the clicked block or the placed block.
			Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
		Examples:
			block is ore
			set block below to air
			spawn a creeper above the block
			loop blocks in radius 4:
				loop-block is obsidian
				set loop-block to water
			block is a chest:
				clear the inventory of the block
		Since:
			1.0
		Return type: Block
		Changers:
			unknown
		Patterns:
			[the] [event-]block
	Block:
		ID: ExprBlock
		Description:
			The block involved in the event, e.g. the clicked block or the placed block.
			Can optionally include a direction as well, e.g. 'block above' or 'block in front of the player'.
		Examples:
			block is ore
			set block below to air
			spawn a creeper above the block
			loop blocks in radius 4:
				loop-block is obsidian
				set loop-block to water
			block is a chest:
				clear the inventory of the block
		Since:
			1.0
		Return type: Block
		Changers:
			unknown
		Patterns:
			[the] block %direction% [%location%]
	Block Break Speed:
		ID: ExprBreakSpeed
		Description:
			Gets the speed at which the given player would break this block, taking into account tools, potion effects, whether or not the player is in water, enchantments, etc. The returned value is the amount of progress made in breaking the block each tick. When the total breaking progress reaches 1.0, the block is broken. Note that the break speed can change in the course of breaking a block, e.g. if a potion effect is applied or expires, or the player jumps/enters water.
		Examples:
			on left click using diamond pickaxe:
				event-block is set
				send "Break Speed: %break speed for player%" to player
		Since:
			2.7
		Return type: float
		Changers:
			none
		Patterns:
			[the] break speed[s] [of %blocks%] [for %players%]
			%block%'[s] break speed[s] [for %players%]
	Block Data:
		ID: ExprBlockData
		Description:
			Get the block data associated with a block. This data can also be used to set blocks.
		Examples:
			set {data} to block data of target block
			set block at player to {data}
			set block data of target block to oak_stairs[facing=south;waterlogged=true]
		Since:
			2.5, 2.5.2 (set)
		Return type: Block Data
		Changers:
			set
		Patterns:
			[the] block[ ]data of %blocks%
			%blocks%'[s] block[ ]data
	Block Hardness:
		ID: ExprBlockHardness
		Description:
			Obtains the block's hardness level (also known as "strength"). This number is used to calculate the time required to break each block.
		Examples:
			set {_hard} to block hardness of target block
			if block hardness of target block > 5:
		Since:
			2.6
		Return type: Number
		Changers:
			none
		Patterns:
			[the] [block] hardness of %itemtypes%
			%itemtypes%'[s] [block] hardness
	Block Sphere:
		ID: ExprBlockSphere
		Description:
			All blocks in a sphere around a center, mostly useful for looping.
		Examples:
			loop blocks in radius 5 around the player:
				set loop-block to air
		Since:
			1.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(all [[of] the]|the)] blocks in radius %number% [(of|around) %location%]
			[(all [[of] the]|the)] blocks around %location% in radius %number%
	Blocks:
		ID: ExprBlocks
		Description:
			Blocks relative to other blocks or between other blocks. Can be used to get blocks relative to other blocks or for looping.
			Blocks from/to and between will return a straight line whereas blocks within will return a cuboid.
		Examples:
			loop blocks above the player:
			loop blocks between the block below the player and the targeted block:
			set the blocks below the player, the victim and the targeted block to air
			set all blocks within {loc1} and {loc2} to stone
			set all blocks within chunk at player to air
		Since:
			1.0, 2.5.1 (within/cuboid/chunk)
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(all [[of] the]|the)] blocks %direction% [%locations%]
			[(all [[of] the]|the)] blocks from %location% [on] %direction%
			[(all [[of] the]|the)] blocks from %location% to %location%
			[(all [[of] the]|the)] blocks between %location% and %location%
			[(all [[of] the]|the)] blocks within %location% and %location%
			[(all [[of] the]|the)] blocks (in|within) %chunk%
	Book Author:
		ID: ExprBookAuthor
		Description:
			The author of a book.
		Examples:
			on book sign:
				message "Book Title: %author of event-item%"
		Since:
			2.2-dev31
		Return type: Text
		Changers:
			set
			delete
			reset
		Patterns:
			[the] [book] (author|writer|publisher) of %itemtypes%
			%itemtypes%'[s] [book] (author|writer|publisher)
	Book Pages:
		ID: ExprBookPages
		Description:
			The pages of a book (Supports Skript's chat format)
			Note: In order to modify the pages of a new written book, you must have the title and author
			of the book set. Skript will do this for you, but if you want your own, please set those values.
		Since:
			2.2-dev31, 2.7 (changers)
		Return type: Text
		Changers:
			add
			set
		Patterns:
			[all [[of] the]|the] [book] (pages|content) of %itemtypes/itemstacks%
			%itemtypes/itemstacks%'[s] [book] (pages|content)
			[book] page %number% of %itemtypes/itemstacks%
			%itemtypes/itemstacks%'[s] [book] page %number%
	Book Title:
		ID: ExprBookTitle
		Description:
			The title of a book.
		Examples:
			on book sign:
				message "Book Title: %title of event-item%"
		Since:
			2.2-dev31
		Return type: Text
		Changers:
			set
			delete
			reset
		Patterns:
			[the] book (name|title) of %itemtypes%
			%itemtypes%'[s] book (name|title)
	Burn/Cook Time:
		ID: ExprBurnCookTime
		Description:
			The time a furnace takes to burn an item in a fuel burn event.
			Can also be used to change the burn/cook time of a placed furnace.
		Examples:
			on fuel burn:
				if fuel slot is coal:
					set burning time to 1 tick
		Since:
			2.3
		Return type: Timespan
		Changers:
			add
			set
			remove
		Patterns:
			[the] burn[ing] time
			[the] (burn|1Â¦cook)[ing] time of %blocks%
			%blocks%'[s] (burn|1Â¦cook)[ing] time
	Case Text:
		ID: ExprStringCase
		Description:
			Copy of given text in Lowercase, Uppercase, Proper Case, camelCase, PascalCase, Snake_Case, and Kebab-Case
		Examples:
			"Oops!" in lowercase # oops!
			"oops!" in uppercase # OOPS!
			"hellO i'm steve!" in proper case # HellO I'm Steve!
			"hellO i'm steve!" in strict proper case # Hello I'm Steve!
			"spAwn neW boSs ()" in camel case # spAwnNeWBoSs()
			"spAwn neW boSs ()" in strict camel case # spawnNewBoss()
			"geneRate ranDom numBer ()" in pascal case # GeneRateRanDomNumBer()
			"geneRate ranDom numBer ()" in strict pascal case # GenerateRandomNumber()
			"Hello Player!" in snake case # Hello_Player!
			"Hello Player!" in lower snake case # hello_player!
			"Hello Player!" in upper snake case # HELLO_PLAYER!
			"What is your name?" in kebab case # What-is-your-name?
			"What is your name?" in lower kebab case # what-is-your-name?
			"What is your name?" in upper kebab case # WHAT-IS-YOUR-NAME?
		Since:
			2.2-dev16 (lowercase and uppercase), 2.5 (advanced cases)
		Return type: Text
		Changers:
			none
		Patterns:
			%strings% in (0Â¦upper|1Â¦lower)[ ]case
			(0Â¦upper|1Â¦lower)[ ]case %strings%
			capitali(s|z)ed %strings%
			%strings% in [(0Â¦lenient|1Â¦strict) ](proper|title)[ ]case
			[(0Â¦lenient|1Â¦strict) ](proper|title)[ ]case %strings%
			%strings% in [(0Â¦lenient|1Â¦strict) ]camel[ ]case
			[(0Â¦lenient|1Â¦strict) ]camel[ ]case %strings%
			%strings% in [(0Â¦lenient|1Â¦strict) ]pascal[ ]case
			[(0Â¦lenient|1Â¦strict) ]pascal[ ]case %strings%
			%strings% in [(1Â¦lower|2Â¦upper|3Â¦capital|4Â¦screaming)[ ]]snake[ ]case
			[(1Â¦lower|2Â¦upper|3Â¦capital|4Â¦screaming)[ ]]snake[ ]case %strings%
			%strings% in [(1Â¦lower|2Â¦upper|3Â¦capital)[ ]]kebab[ ]case
			[(1Â¦lower|2Â¦upper|3Â¦capital)[ ]]kebab[ ]case %strings%
	Chat Format:
		ID: ExprChatFormat
		Description:
			Can be used to get/retrieve the chat format. The sender of a message is represented by [player] or [sender], and the message by [message] or [msg].
		Examples:
			set the chat format to "&lt;yellow&gt;[player]&lt;light gray&gt;: &lt;green&gt;[message]"
		Since:
			2.2-dev31
		Return type: Text
		Changers:
			set
			reset
		Patterns:
			[the] (message|chat) format[ting]
	Chat Recipients:
		ID: ExprChatRecipients
		Description:
			Recipients of chat events where this is called.
		Examples:
			chat recipients
		Since:
			2.2-Fixes-v7, 2.2-dev35 (clearing recipients)
		Return type: Player
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[chat][( |-)]recipients
	Chunk:
		ID: ExprChunk
		Description:
			The chunk a block, location or entity is in.
		Examples:
			add the chunk at the player to {protected chunks::*}
		Since:
			2.0
		Return type: Chunk
		Changers:
			none
		Patterns:
			[the] chunk[s] (of|%-directions%) %locations%
			%locations%'[s] chunk[s]
	Clicked Block/Entity/Inventory/Slot:
		ID: ExprClicked
		Description:
			The clicked block, entity, inventory, inventory slot, inventory click type or inventory action.
		Examples:
			message "You clicked on a %type of clicked entity%!"
			if the clicked block is a chest:
				show the inventory of the clicked block to the player
		Since:
			1.0, 2.2-dev35 (more clickable things)
		Return type: Object
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (1Â¦clicked [enchant[ment]] (button|option)|2Â¦clicked (block|%-*itemtype/entitydata%)|3Â¦clicked slot|4Â¦clicked inventory|5Â¦click (type|action)|6Â¦inventory action)
	Color of:
		ID: ExprColorOf
		Description:
			The color of an item, can also be used to color chat messages with "&lt;%color of ...%&gt;this text is colored!".
		Examples:
			on click on wool:
				message "This wool block is <%color of block%>%color of block%<reset>!"
				set the color of the block to black
		Since:
			1.2
		Return type: Color
		Changers:
			unknown
		Patterns:
			[the] colo[u]r[s] of %blocks/itemtypes/entities/fireworkeffects%
			%blocks/itemtypes/entities/fireworkeffects%'[s] colo[u]r[s]
	Colored / Uncolored:
		ID: ExprColoured
		Description:
			Parses &lt;color&gt;s and, optionally, chat styles in a message or removes
			any colors and chat styles from the message. Parsing all
			chat styles requires this expression to be used in same line with
			the send effect.
		Examples:
			on chat:
				set message to colored message # Safe; only colors get parsed
			command /fade &lt;player&gt;:
				trigger:
					set display name of the player-argument to uncolored display name of the player-argument
			command /format &lt;text&gt;:
				trigger:
					message formatted text-argument # Safe, because we're sending to whoever used this command
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			(colo[u]r-|colo[u]red )%strings%
			(format-|formatted )%strings%
			(un|non)[-](colo[u]r-|colo[u]red |format-|formatted )%strings%
	Command:
		ID: ExprCommand
		Description:
			The command that caused an 'on command' event (excluding the leading slash and all arguments)
		Examples:
			# prevent any commands except for the /exit command during some game
			on command:
				if {game::%player%::playing} is true:
					if the command is not "exit":
						message "You're not allowed to use commands during the game"
						cancel the event
		Since:
			2.0, 2.7 (support for script commands)
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (full|complete|whole) command
			[the] command [(label|alias)]
	Command Info:
		ID: ExprCommandInfo
		Description:
			Get information about a command.
		Examples:
			main name of command "skript"
			description of command "help"
			label of command "pl"
			usage of command "help"
			aliases of command "bukkit:help"
			permission of command "/op"
			command "op"'s permission message
			command "sk"'s plugin owner
		Since:
			2.6
		Return type: Text
		Changers:
			none
		Patterns:
			[the] main command [label] of command %strings%
			command %strings%'[s] main command [name]
			[the] description of command %strings%
			command %strings%'[s] description
			[the] label of command %strings%
			command %strings%'[s] label
			[the] usage of command %strings%
			command %strings%'[s] usage
			[(all|the|all [of] the)] aliases of command %strings%
			command %strings%'[s] aliases
			[the] permission of command %strings%
			command %strings%'[s] permission
			[the] permission message of command %strings%
			command %strings%'[s] permission message
			[the] plugin [owner] of command %strings%
			command %strings%'[s] plugin [owner]
	Command Sender:
		ID: ExprCommandSender
		Description:
			The player or the console who sent a command. Mostly useful in commands and command events.
			If the command sender is a command block, its location can be retrieved by using %block's location%
		Examples:
			make the command sender execute "/say hi!"
			on command:
				log "%executor% used command /%command% %arguments%" to "commands.log"
		Since:
			2.0
		Return type: Command Sender
		Changers:
			none
		Patterns:
			[the] [command['s]] (sender|executor)
	Compass Target:
		ID: ExprCompassTarget
		Description:
			The location a player's compass is pointing at.
		Examples:
			# make all player's compasses target a player stored in {compass::target::%player%}
			every 5 seconds:
				loop all players:
					set the loop-player's compass target to location of {compass::target::%%loop-player%}
		Since:
			2.0
		Return type: Location
		Changers:
			set
			reset
		Patterns:
			[the] compass target of %players%
			%players%'[s] compass target
	Console:
		ID: LitConsole
		Description:
			Represents the server's console which can receive messages and execute commands
		Examples:
			execute console command "/stop"
			send "message to console" to the console
		Since:
			1.3.1
		Return type: Command Sender
		Changers:
			none
		Patterns:
			[the] (console|server)
	Cooldown Time/Remaining Time/Elapsed Time/Last Usage/Bypass Permission:
		ID: ExprCmdCooldownInfo
		Description:
			Only usable in command events. Represents the cooldown time, the remaining time, the elapsed time,
			the last usage date, or the cooldown bypass permission.
		Examples:
			command /home:
				cooldown: 10 seconds
				cooldown message: You last teleported home %elapsed time% ago, you may teleport home again in %remaining time%.
				trigger:
					teleport player to {home::%player%}
		Since:
			2.2-dev33
		Return type: Object
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] remaining [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
			[the] elapsed [time] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
			[the] ((cooldown|wait) time|[wait] time of [the] (cooldown|wait) [(of|for) [the] [current] command])
			[the] last usage [date] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
			[the] [cooldown] bypass perm[ission] [of [the] (cooldown|wait) [(of|for) [the] [current] command]]
	Coordinate:
		ID: ExprCoordinate
		Description:
			Represents a given coordinate of a location. 
		Examples:
			player's y-coordinate is smaller than 40:
				message "Watch out for lava!"
		Since:
			1.4.3
		Return type: Number
		Changers:
			unknown
		Patterns:
			[the] (0Â¦x|1Â¦y|2Â¦z)(-| )(coord[inate]|pos[ition]|loc[ation])[s] of %locations%
			%locations%'[s] (0Â¦x|1Â¦y|2Â¦z)(-| )(coord[inate]|pos[ition]|loc[ation])[s]
	Creature/Entity/Player/Projectile/Villager/Powered Creeper/etc.:
		ID: ExprEntity
		Description:
			The entity involved in an event (an entity is a player, a creature or an inanimate object like ignited TNT, a dropped item or an arrow).
			You can use the specific type of the entity that's involved in the event, e.g. in a 'death of a creeper' event you can use 'the creeper' instead of 'the entity'.
		Examples:
			give a diamond sword of sharpness 3 to the player
			kill the creeper
			kill all powered creepers in the wolf's world
			projectile is an arrow
		Since:
			1.0
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] [event-]<.+>
	Cursor Slot:
		ID: ExprCursorSlot
		Description:
			The item which the player has on their cursor. This slot is always empty if player has no inventories open.
		Examples:
			cursor slot of player is dirt
			set cursor slot of player to 64 diamonds
		Since:
			2.2-dev17
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] cursor slot of %players%
			%players%'[s] cursor slot
	Custom Chest Inventory:
		ID: ExprChestInventory
		Description:
			Returns a chest inventory with the given amount of rows and the name. Use the open inventory effect to open it.
		Examples:
			open chest inventory with 1 row named "test" to player
			set {_inventory} to chest inventory with 1 row
		Since:
			2.2-dev34
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[a] [new] chest inventory (named|with name) %string% [with %-number% row[s]]
			[a] [new] chest inventory with %number% row[s] [(named|with name) %-string%]
	Custom Model Data:
		ID: ExprCustomModelData
		Description:
			Get/set the CustomModelData tag for an item. (Value is an integer between 0 and 99999999)
		Examples:
			set custom model data of player's tool to 3
			set {_model} to custom model data of player's tool
		Since:
			2.5
		Return type: long
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] [custom] model data of %itemtypes%
			%itemtypes%'[s] [custom] model data
	Damage:
		ID: ExprDamage
		Description:
			How much damage is done in a damage event, possibly ignoring armour, criticals and/or enchantments. Can be changed (remember that in Skript '1' is one full heart, not half a heart).
		Examples:
			increase the damage by 2
		Since:
			1.3.5
		Return type: Number
		Changers:
			none
		Patterns:
			[the] damage
	Damage Cause:
		ID: ExprDamageCause
		Description:
			The damage cause of a damage event. Please click on the link for more information.
		Examples:
			damage cause is lava, fire or burning
		Since:
			2.0
		Return type: Damage Cause
		Changers:
			none
		Patterns:
			[the] damage (cause|type)
	Damage Value/Durability:
		ID: ExprDurability
		Description:
			The damage value/durability of an item.
		Examples:
			set damage value of player's tool to 10
			reset the durability of {_item}
			set durability of player's held item to 0
		Since:
			1.2, 2.7 (durability reversed)
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (damage[s] [value[s]]|1:durabilit(y|ies)) of %itemtypes/slots%
			%itemtypes/slots%'[s] (damage[s] [value[s]]|1:durabilit(y|ies))
	Damaged Item:
		ID: ExprDamagedItem
		Description:
			Directly damages an item. In MC versions 1.12.2 and lower, this can be used to apply data values to items/blocks
		Examples:
			give player diamond sword with damage value 100
			set player's tool to diamond hoe damaged by 250
			give player diamond sword with damage 700 named "BROKEN SWORD"
			set {_item} to diamond hoe with damage value 50 named "SAD HOE"
			set target block of player to wool with data value 1
			set target block of player to potato plant with data value 7
		Since:
			2.4
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtype% with (damage|data) [value] %number%
			%itemtype% damaged by %number%
	Date Ago/Later:
		ID: ExprDateAgoLater
		Description:
			A date the specified timespan before/after another date.
		Examples:
			set {_yesterday} to 1 day ago
			set {_hourAfter} to 1 hour after {someOtherDate}
			set {_hoursBefore} to 5 hours before {someOtherDate}
		Since:
			2.2-dev33
		Return type: Date
		Changers:
			none
		Patterns:
			%timespan% (ago|in the past|before [the] [date] %-date%)
			%timespan% (later|(from|after) [the] [date] %-date%)
	Default Value:
		ID: ExprDefaultValue
		Description:
			A shorthand expression for giving things a default value. If the first thing isn't set, the second thing will be returned.
		Examples:
			broadcast {score::%player's uuid%} otherwise "%player% has no score!"
		Since:
			2.2-dev36
		Return type: Object
		Changers:
			none
		Patterns:
			%objects% (otherwise|?) %objects%
	Difference:
		ID: ExprDifference
		Description:
			The difference between two values, e.g. numbers, dates or times.
		Examples:
			if difference between {command::%player%::lastuse} and now is smaller than a minute:
				message "You have to wait a minute before using this command again!"
		Since:
			1.4
		Return type: Object
		Changers:
			unknown
		Patterns:
			difference (between|of) %object% and %object%
	Difficulty:
		ID: ExprDifficulty
		Description:
			The difficulty of a world.
		Examples:
			set the difficulty of "world" to hard
		Since:
			2.3
		Return type: Difficulty
		Changers:
			set
		Patterns:
			[the] difficult(y|ies) of %worlds%
			%worlds%'[s] difficult(y|ies)
	Direction:
		ID: ExprDirection
		Description:
			A helper expression for the direction type.
		Examples:
			thrust the player upwards
			set the block behind the player to water
			loop blocks above the player:
				set {_rand} to a random integer between 1 and 10
				set the block {_rand} meters south east of the loop-block to stone
			block in horizontal facing of the clicked entity from the player is air
			spawn a creeper 1.5 meters horizontally behind the player
			spawn a TNT 5 meters above and 2 meters horizontally behind the player
			thrust the last spawned TNT in the horizontal direction of the player with speed 0.2
			push the player upwards and horizontally forward at speed 0.5
			push the clicked entity in in the direction of the player at speed -0.5
			open the inventory of the block 2 blocks below the player to the player
			teleport the clicked entity behind the player
			grow a regular tree 2 meters horizontally behind the player
		Since:
			1.0 (basic), 2.0 (extended)
		Return type: Direction
		Changers:
			none
		Patterns:
			[%-number% [(block|met(er|re))[s]] [to the]] (2Â¦north[(-| |)(4Â¦east|5Â¦west)][(ward(s|ly|)|er(n|ly|))] [of]|3Â¦south[(-| |)(11Â¦east|10Â¦west)][(ward(s|ly|)|er(n|ly|))] [of]|(4Â¦east|5Â¦west)[(ward(s|ly|)|er(n|ly|))] [of]|0Â¦above|0Â¦over|(0Â¦up|1Â¦down)[ward(s|ly|)]|1Â¦below|1Â¦under[neath]|1Â¦beneath) [%-direction%]
			[%-number% [(block|met(er|re))[s]]] in [the] (0Â¦direction|1Â¦horizontal direction|2Â¦facing|3Â¦horizontal facing) of %entity/block% (of|from|)
			[%-number% [(block|met(er|re))[s]]] in %entity/block%'[s] (0Â¦direction|1Â¦horizontal direction|2Â¦facing|3Â¦horizontal facing) (of|from|)
			[%-number% [(block|met(er|re))[s]]] (0Â¦in[ ]front [of]|0Â¦forward[s]|2Â¦behind|2Â¦backwards|[to the] (1Â¦right|-1Â¦left) [of])
			[%-number% [(block|met(er|re))[s]]] horizontal[ly] (0Â¦in[ ]front [of]|0Â¦forward[s]|2Â¦behind|2Â¦backwards|to the (1Â¦right|-1Â¦left) [of])
	Distance:
		ID: ExprDistance
		Description:
			The distance between two points.
		Examples:
			if the distance between the player and {home::%uuid of player%} is smaller than 20:
				message "You're very close to your home!"
		Since:
			1.0
		Return type: Number
		Changers:
			none
		Patterns:
			[the] distance between %location% and %location%
	Drops:
		ID: ExprDrops
		Description:
			Only works in death events. Holds the drops of the dying creature. Drops can be prevented by removing them with "remove ... from drops", e.g. "remove all pickaxes from the drops", or "clear drops" if you don't want any drops at all.
		Examples:
			clear drops
			remove 4 planks from the drops
		Since:
			1.0
		Return type: Item Type
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] drops
	Drops Of Block:
		ID: ExprDropsOfBlock
		Description:
			A list of the items that will drop when a block is broken.
		Examples:
			on break of block:
				give drops of block using player's tool to player
		Since:
			2.5.1
		Return type: Item Type
		Changers:
			none
		Patterns:
			[(all|the|all [of] the)] drops of %blocks% [(using|with) %-itemtype% [(1Â¦as %-entity%)]]
			%blocks%'s drops [(using|with) %-itemtype% [(1Â¦as %-entity%)]]
	Element of:
		ID: ExprElement
		Description:
			The first, last or a random element of a set, e.g. a list variable.
			See also: random
		Examples:
			give a random element out of {free items::*} to the player
		Since:
			2.0, 2.7 (relative to last element)
		Return type: Object
		Changers:
			unknown
		Patterns:
			(0:[the] first|1:[the] last|2:[a] random|3:[the] %-number%(st|nd|rd|th)|4:[the] %-number%(st|nd|rd|th) [to] last) element [out] of %objects%
	Enchant Item:
		ID: ExprEnchantItem
		Description:
			The enchant item in an enchant prepare event or enchant event.
			It can be modified, but enchantments will still be applied in the enchant event.
		Examples:
			on enchant:
				set the enchanted item to a diamond chestplate
			on enchant prepare:
				set the enchant item to a wooden sword
		Since:
			2.5
		Return type: Item Type
		Changers:
			set
		Patterns:
			[the] enchant[ed] item
	Enchanting Experience Cost:
		ID: ExprEnchantingExpCost
		Description:
			The cost of enchanting in an enchant event.
			This is number that was displayed in the enchantment table, not the actual number of levels removed.
		Examples:
			on enchant:
				send "Cost: %the displayed enchanting cost%" to player
		Since:
			2.5
		Return type: long
		Changers:
			add
			set
			remove
		Patterns:
			[the] [displayed] ([e]xp[erience]|enchanting) cost
	Enchantment Bonus:
		ID: ExprEnchantmentBonus
		Description:
			The enchantment bonus in an enchant prepare event. This represents the number of bookshelves affecting/surrounding the enchantment table.
		Examples:
			on enchant:
				send "There are %enchantment bonus% bookshelves surrounding this enchantment table!" to player
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			[the] enchantment bonus
	Enchantment Level:
		ID: ExprEnchantmentLevel
		Description:
			The level of a particular enchantment on an item.
		Examples:
			player's tool is a sword of sharpness:
				message "You have a sword of sharpness %level of sharpness of the player's tool% equipped"
		Since:
			2.0
		Return type: long
		Changers:
			add
			set
			remove
		Patterns:
			[the] [enchant[ment]] level[s] of %enchantments% (on|of) %itemtypes%
			[the] %enchantments% [enchant[ment]] level[s] (on|of) %itemtypes%
			%itemtypes%'[s] %enchantments% [enchant[ment]] level[s]
			%itemtypes%'[s] [enchant[ment]] level[s] of %enchantments%
	Enchantment Offer:
		ID: ExprEnchantmentOffer
		Description:
			The enchantment offer in enchant prepare events.
		Examples:
			on enchant prepare:
				send "Your enchantment offers are: %the enchantment offers%" to player
		Since:
			2.5
		Return type: Enchantment Offer
		Changers:
			set
			delete
		Patterns:
			[all [of]] [the] enchant[ment] offers
			enchant[ment] offer[s] %numbers%
			[the] %number%(st|nd|rd|th) enchant[ment] offer
	Enchantment Offer Cost:
		ID: ExprEnchantmentOfferCost
		Description:
			The cost of an enchantment offer. This is displayed to the right of an enchantment offer.
			If the cost is changed, it will always be at least 1.
			This changes how many levels are required to enchant, but does not change the number of levels removed.
			To change the number of levels removed, use the enchant event.
		Examples:
			set cost of enchantment offer 1 to 50
		Since:
			2.5
		Return type: long
		Changers:
			add
			set
			delete
		Patterns:
			[the] [enchant[ment]] cost of %enchantmentoffers%
			%enchantmentoffers%'[s] [enchant[ment]] cost
	Ender Chest:
		ID: ExprEnderChest
		Description:
			The ender chest of a player.
		Examples:
			open the player's ender chest to the player
		Since:
			2.0
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] ender[ ]chest[s] of %players%
			%players%'[s] ender[ ]chest[s]
	Entities:
		ID: ExprEntities
		Description:
			All entities in all worlds, in a specific world, in a chunk or in a radius around a certain location, e.g. all players, all creepers in the player's world, or players in radius 100 of the player.
		Examples:
			kill all creepers in the player's world
			send "Psst!" to all players within 100 meters of the player
			give a diamond to all ops
			heal all tamed wolves in radius 2000 around {town center}
			delete all monsters in chunk at player
		Since:
			1.2.1, 2.5 (chunks)
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[(all [[of] the]|the)] %*entitydatas% [(in|of) ([world[s]] %-worlds%|1Â¦%-chunks%)]
			[(all [[of] the]|the)] entities of type[s] %entitydatas% [(in|of) ([world[s]] %-worlds%|1Â¦%-chunks%)]
			[(all [[of] the]|the)] %*entitydatas% (within|[with]in radius) %number% [(block[s]|met(er|re)[s])] (of|around) %location%
			[(all [[of] the]|the)] entities of type[s] %entitydatas% in radius %number% (of|around) %location%
	Entity AI:
		ID: ExprAI
		Description:
			Returns whether an entity has AI.
		Examples:
			set artificial intelligence of target entity to false
		Since:
			2.5
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] (ai|artificial intelligence) of %livingentities%
			%livingentities%'[s] (ai|artificial intelligence)
	Entity Attribute:
		ID: ExprEntityAttribute
		Description:
			The numerical value of an entity's particular attribute.
			Note that the movement speed attribute cannot be reliably used for players. For that purpose, use the speed expression instead.
			Resetting an entity's attribute is only available in Minecraft 1.11 and above.
		Examples:
			on damage of player:
				send "You are wounded!" to victim
				set victim's attack speed attribute to 2
		Since:
			2.5, 2.6.1 (final attribute value)
		Return type: Number
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] %attributetype% [(1:(total|final|modified))] attribute [value] of %entities%
			%entities%'[s] %attributetype% [(1:(total|final|modified))] attribute [value]
	Entity Fire Burn Duration:
		ID: ExprFireTicks
		Description:
			How much time an entity will be burning for.
		Examples:
			send "You will stop burning in %fire time of player%"
		Since:
			2.7
		Return type: Timespan
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (burn[ing]|fire) (time|duration) of %entities%
			%entities%'[s] (burn[ing]|fire) (time|duration)
	Entity Owner:
		ID: ExprEntityTamer
		Description:
			The owner of a tameable entity, such as a horse or wolf.
		Examples:
			set owner of target entity to player
			delete owner of target entity
			set {_t} to uuid of tamer of target entity
		Since:
			2.5
		Return type: Offline Player
		Changers:
			set
			delete
			reset
		Patterns:
			[the] (owner|tamer) of %livingentities%
			%livingentities%'[s] (owner|tamer)
	Exhaustion:
		ID: ExprExhaustion
		Description:
			The exhaustion of a player. This is mainly used to determine the rate of hunger depletion.
		Examples:
			set exhaustion of all players to 1
		Since:
			2.2-dev35
		Return type: Number
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] exhaustion of %players%
			%players%'[s] exhaustion
	Experience:
		ID: ExprExperience
		Description:
			How much experience was spawned in an experience spawn or block break event. Can be changed.
		Examples:
			on experience spawn:
				add 5 to the spawned experience
			on break of coal ore:
				clear dropped experience
			on break of diamond ore:
				if tool of player = diamond pickaxe:
					add 100 to dropped experience
		Since:
			2.1, 2.5.3 (block break event), 2.7 (experience change event)
		Return type: Experience
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (spawned|dropped|) [e]xp[erience] [orb[s]]
	Exploded Blocks:
		ID: ExprExplodedBlocks
		Description:
			Get all the blocks that were destroyed in an explode event
		Examples:
			on explode:
				loop exploded blocks:
					add loop-block to {exploded::blocks::*}
		Since:
			2.5
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] exploded blocks
	Explosion Block Yield:
		ID: ExprExplosionBlockYield
		Description:
			The percentage of exploded blocks dropped in an explosion event.
			When changing the yield, a value greater than 1 will function the same as using 1.
			Attempting to change the yield to a value less than 0 will have no effect.
		Examples:
			on explode:
			set the explosion's block yield to 10%
		Since:
			2.5
		Return type: Number
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] [explosion['s]] block (yield|amount)
			[the] percentage of blocks dropped
	Explosion Yield:
		ID: ExprExplosionYield
		Description:
			The yield of the explosion in an explosion prime event. This is how big the explosion is.
			 When changing the yield, values less than 0 will be ignored.
			 Read this wiki page for more information
		Examples:
			on explosion prime:
				set the yield of the explosion to 10
		Since:
			2.5
		Return type: Number
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] explosion (yield|radius|size)
			[the] (yield|radius|size) of [the] explosion
	Explosive Yield:
		ID: ExprExplosiveYield
		Description:
			The yield of an explosive (creeper, primed tnt, fireball, etc.). This is how big of an explosion is caused by the entity.
			Read this wiki page for more information
		Examples:
			on spawn of a creeper:
				set the explosive yield of the event-entity to 10
		Since:
			2.5
		Return type: Number
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] explosive (yield|radius|size) of %entities%
			%entities%'[s] explosive (yield|radius|size)
	Facing:
		ID: ExprFacing
		Description:
			The facing of an entity or block, i.e. exactly north, south, east, west, up or down (unlike direction which is the exact direction, e.g. '0.5 south and 0.7 east')
		Examples:
			# makes a bridge
			loop blocks from the block below the player in the horizontal facing of the player:
				set loop-block to cobblestone
		Since:
			1.4
		Return type: Direction
		Changers:
			unknown
		Patterns:
			[the] (1Â¦horizontal|) facing of %livingentities/blocks%
			%livingentities/blocks%'[s] (1Â¦horizontal|) facing
	Fall Distance:
		ID: ExprFallDistance
		Description:
			The distance an entity has fallen for.
		Examples:
			set all entities' fall distance to 10
			on damage:
				send "%victim's fall distance%" to victim
		Since:
			2.5
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] fall[en] (distance|height) of %entities%
			%entities%'[s] fall[en] (distance|height)
	Fertilized Blocks:
		ID: ExprFertilizedBlocks
		Description:
			The blocks fertilized in block fertilize events.
		Examples:
			the fertilized blocks
		Since:
			2.5
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[all] [the] fertilized blocks
	Filter:
		ID: ExprFilter
		Description:
			Filters a list based on a condition. For example, if you ran 'broadcast "something" and "something else" where [string input is "something"]', only "something" would be broadcast as it is the only string that matched the condition.
		Examples:
			send "congrats on being staff!" to all players where [player input has permission "staff"]
		Since:
			2.2-dev36
		Return type: Object
		Changers:
			unknown
		Patterns:
			%objects% (where|that match) \[<.+>\]
	Filter Input:
		ID: ExprInput
		Description:
			Represents the input in a filter expression. For example, if you ran 'broadcast "something" and "something else" where [input is "something"]the condition would be checked twice, using "something" and "something else" as the inputs.
		Examples:
			send "congrats on being staff!" to all players where [input has permission "staff"]
		Since:
			2.2-dev36
		Return type: Object
		Changers:
			none
		Patterns:
			input
			%*classinfo% input
	Final Damage:
		ID: ExprFinalDamage
		Description:
			How much damage is done in a damage event, considering all types of damage reduction. Can NOT be changed.
		Examples:
			send "%final damage%" to victim
		Since:
			2.2-dev19
		Return type: Number
		Changers:
			none
		Patterns:
			[the] final damage
	Firework Effect:
		ID: ExprFireworkEffect
		Description:
			Represents a 'firework effect' which can be used in the launch firework effect.
		Examples:
			launch flickering trailing burst firework colored blue and green at player
			launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity
			launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
		Since:
			2.4
		Return type: Firework Effect
		Changers:
			none
		Patterns:
			(1Â¦|2Â¦flickering|3Â¦trailing|4Â¦flickering trailing|5Â¦trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors%
			(1Â¦|2Â¦flickering|3Â¦trailing|4Â¦flickering trailing|5Â¦trailing flickering) %fireworktype% [firework [effect]] colo[u]red %colors% fad(e|ing) [to] %colors%
	Flight Mode:
		ID: ExprFlightMode
		Description:
			Whether the player(s) are allowed to fly. Use Make Fly effect to force player(s) to fly.
		Examples:
			set flight mode of player to true
			send "%flying state of all players%"
		Since:
			2.2-dev34
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[the] fl(y[ing]|ight) (mode|state) of %players%
			%players%'[s] fl(y[ing]|ight) (mode|state)
	Food Level:
		ID: ExprFoodLevel
		Description:
			The food level of a player from 0 to 10. Has several aliases: food/hunger level/meter/bar. 
		Examples:
			set the player's food level to 10
		Since:
			1.0
		Return type: Number
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (food|hunger)[[ ](level|met(er|re)|bar)] [of %players%]
			%players%'[s] (food|hunger)[[ ](level|met(er|re)|bar)]
	Formatted Date:
		ID: ExprFormatDate
		Description:
			Converts date to human-readable text format. By default, 'yyyy-MM-dd HH:mm:ss z' (e.g. '2018-03-30 16:03:12 +01') will be used. For reference, see this Wikipedia article.
		Examples:
			command /date:
				trigger:
					send "Full date: %now formatted human-readable%" to sender
					send "Short date: %now formatted as "yyyy-MM-dd"%" to sender
		Since:
			2.2-dev31, 2.7 (support variables in format)
		Return type: Text
		Changers:
			none
		Patterns:
			%dates% formatted [human-readable] [(with|as) %-string%]
			[human-readable] formatted %dates% [(with|as) %-string%]
	Former/Future State:
		ID: ExprTimeState
		Description:
			Represents the value of an expression before an event happened or the value it will have directly after the event, e.g. the old or new level respectively in a level change event.
			Note: The past, future and present states of an expression are sometimes called 'time states' of an expression.
			Note 2: If you don't specify whether to use the past or future state of an expression that has different values, its default value will be used which is usually the value after the event.
		Examples:
			on teleport:
				former world was "world_nether" # or 'world was'
				world will be "world" # or 'world after the event is'
			on tool change:
				past tool is an axe
				the tool after the event will be air
			on weather change:
				set {weather::%world%::old} to past weather
				set {weather::%world%::current} to the new weather
		Since:
			1.1
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] (former|past|old) [state] [of] %~object%
			%~object% before [the event]
			[the] (future|to-be|new) [state] [of] %~object%
			%~object%(-to-be| after[(wards| the event)])
	Freeze Time:
		ID: ExprFreezeTicks
		Description:
			How much time an entity has been in powdered snow for.
		Examples:
			player's freeze time is less than 3 seconds:
				send "you're about to freeze!" to the player
		Since:
			2.7
		Return type: Timespan
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] freeze time of %entities%
			%entities%'[s] freeze time
	Furnace Slot:
		ID: ExprFurnaceSlot
		Description:
			A slot of a furnace, i.e. either the ore, fuel or result slot.
			Remember to use 'block' and not 'furnace', as 'furnace' is not an existing expression.
		Examples:
			set the fuel slot of the clicked block to a lava bucket
			set the block's ore slot to 64 iron ore
			give the result of the block to the player
			clear the result slot of the block
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			(1Â¦fuel|2Â¦result) [slot]
			(0Â¦ore|1Â¦fuel|2Â¦result)[s] [slot[s]] of %blocks%
			%blocks%'[s] (0Â¦ore|1Â¦fuel|2Â¦result)[s] [slot[s]]
	Game Mode:
		ID: ExprGameMode
		Description:
			The gamemode of a player. (Gamemodes)
		Examples:
			player's gamemode is survival
			set the player's gamemode to creative
		Since:
			1.0
		Return type: Game Mode
		Changers:
			set
			reset
		Patterns:
			[the] game[ ]mode of %players%
			%players%'[s] game[ ]mode
	Gamerule Value:
		ID: ExprGameRule
		Description:
			The gamerule value of a world.
		Examples:
			set the gamerule commandBlockOutput of world "world" to false
		Since:
			2.5
		Return type: Gamerule Value
		Changers:
			set
		Patterns:
			[the] gamerule %gamerule% of %worlds%
	Gliding State:
		ID: ExprGlidingState
		Description:
			Sets of gets gliding state of player. It allows you to set gliding state of entity even if they do not have an Elytra equipped.
		Examples:
			set gliding of player to off
		Since:
			2.2-dev21
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[the] (gliding|glider) [state] of %livingentities%
			%livingentities%'[s] (gliding|glider) [state]
	Glowing:
		ID: ExprGlowing
		Description:
			Indicates if targeted entity is glowing (new 1.9 effect) or not. Glowing entities can be seen through walls.
		Examples:
			set glowing of player to true
		Since:
			2.2-dev18
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[the] glowing of %entities%
			%entities%'[s] glowing
	Gravity:
		ID: ExprGravity
		Description:
			If entity is affected by gravity or not, i.e. if it has Minecraft 1.10+ NoGravity flag.
		Examples:
			set gravity of player off
		Since:
			2.2-dev21
		Return type: Boolean
		Changers:
			set
			reset
		Patterns:
			[the] gravity of %entities%
			%entities%'[s] gravity
	Hanging Entity/Remover:
		ID: ExprHanging
		Description:
			Returns the hanging entity or remover in hanging break and place events.
		Examples:
			on break of item frame:
				if item of hanging entity is diamond pickaxe:
					cancel event
					if hanging remover is a player:
						send "You can't break that item frame!" to hanging remover
		Since:
			2.6.2
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] hanging (entity|:remover)
	Hash:
		ID: ExprHash
		Description:
			Hashes the given text using the MD5 or SHA-256 algorithms. Each algorithm is suitable for different use cases.<p>
			MD5 is provided mostly for backwards compatibility, as it is outdated and not secure. 
			SHA-256 is more secure, and can used to hash somewhat confidental data like IP addresses and even passwords. 
			It is not that secure out of the box, so please consider using salt when dealing with passwords! 
			When hashing data, you must specify algorithms that will be used for security reasons! 
			<p>Please note that a hash cannot be reversed under normal circumstanses. You will not be able to get original value from a hash with Skript.
		Examples:
			command /setpass &lt;text&gt;:
				trigger:
					set {password::%uuid of player%} to text-argument hashed with SHA-256
			command /login &lt;text&gt;:
				trigger:
					if text-argument hashed with SHA-256 is {password::%uuid of player%}:
						message "Login successful."
					else:
						message "Wrong password!"
		Since:
			2.0, 2.2-dev32 (SHA-256 algorithm)
		Return type: Text
		Changers:
			none
		Patterns:
			%strings% hash[ed] with (0Â¦MD5|1Â¦SHA-256)
	Hatching Entity Type:
		ID: ExprHatchingType
		Description:
			The type of the entity that will be hatched in a Player Egg Throw event.
		Examples:
			on player egg throw:
				set the hatching entity type to a primed tnt
		Since:
			2.7
		Return type: Entity Type
		Changers:
			set
			reset
		Patterns:
			[the] hatching entity [type]
	Hatching Number:
		ID: ExprHatchingNumber
		Description:
			The number of entities that will be hatched in a Player Egg Throw event.
			Please note that no more than 127 entities can be hatched at once.
		Examples:
			on player egg throw:
				set the hatching number to 10
		Since:
			2.7
		Return type: byte
		Changers:
			add
			set
			remove
		Patterns:
			[the] hatching number
	Head location:
		ID: ExprEyeLocation
		Description:
			The location of an entity's head, mostly useful for players and e.g. looping blocks in the player's line of sight.
			Please note that this location is only accurate for entities whose head is exactly above their center, i.e. players, endermen, zombies, skeletons, etc., but not sheep, pigs or cows.
		Examples:
			set the block at the player's head to air
			set the block in front of the player's eyes to glass
			loop blocks in front of the player's head:
		Since:
			2.0
		Return type: Location
		Changers:
			none
		Patterns:
			[the] (head|eye[s]) [location[s]] of %livingentities%
			%livingentities%'[s] (head|eye[s]) [location[s]]
	Heal Amount:
		ID: ExprHealAmount
		Description:
			The amount of health healed in a healing event.
		Examples:
			increase heal amount by 2
			remove 0.5 from heal amount
		Since:
			2.5.1
		Return type: Number
		Changers:
			none
		Patterns:
			[the] heal amount
	Heal Reason:
		ID: ExprHealReason
		Description:
			The heal reason of a heal event. Please click on the link for more information.
		Examples:
			on heal:
				if heal reason = satiated:
					send "You ate enough food and gained health back!" to player
		Since:
			2.5
		Return type: Heal Reason
		Changers:
			none
		Patterns:
			(regen|health regain|heal) (reason|cause)
	Health:
		ID: ExprHealth
		Description:
			The health of a creature, e.g. a player, mob, villager, etc. The minimum value is 0, and the maximum is the creature's max health (e.g. 10 for players).
		Examples:
			message "You have %health% HP left."
		Since:
			1.0
		Return type: Number
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] health of %livingentities%
			%livingentities%'[s] health
	Hidden Players:
		ID: ExprHiddenPlayers
		Description:
			The players hidden from a player that were hidden using the player visibility effect.
		Examples:
			message "&lt;light red&gt;You are currently hiding: &lt;light gray&gt;%hidden players of the player%"
		Since:
			2.3
		Return type: Player
		Changers:
			add
			remove
			remove all
		Patterns:
			[(all [[of] the]|the)] hidden players (of|for) %players%
			[(all [[of] the]|the)] players hidden (from|for|by) %players%
	Highest Solid Block:
		ID: ExprHighestSolidBlock
		Description:
			Returns the highest solid block at the x and z coordinates of the world of a given location.
		Examples:
			highest block at location of arg-player
		Since:
			2.2-dev34
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			highest [(solid|non-air)] block at %locations%
	Hostname:
		ID: ExprHostname
		Description:
			The hostname used by the connecting player to connect to the server in a connect event.
		Examples:
			on connect:
				hostname is "testers.example.com"
				send "Welcome back tester!"
		Since:
			2.6.1
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (host|domain)[ ][name]
	Hotbar Button:
		ID: ExprHotbarButton
		Description:
			The hotbar button clicked in an inventory click event.
		Examples:
			on inventory click:
				send "You clicked the hotbar button %hotbar button%!"
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			[the] hotbar button
	Hotbar Slot:
		ID: ExprHotbarSlot
		Description:
			The currently selected hotbar slot. To retrieve its number use Slot Index expression.
		Examples:
			message "%player's current hotbar slot%"
			set player's selected hotbar slot to slot 4 of player
			send "index of player's current hotbar slot = 1" # second slot from the left
		Since:
			2.2-dev36
		Return type: Inventory Slot
		Changers:
			set
		Patterns:
			[the] [([currently] selected|current)] hotbar slot of %players%
			%players%'[s] [([currently] selected|current)] hotbar slot
	Hover List:
		ID: ExprHoverList
		Description:
			The list when you hover on the player counts of the server in the server list.
			This can be changed using texts or players in a server list ping event only. Adding players to the list means adding the name of the players.
			And note that, for example if there are 5 online players (includes fake online count) in the server and the hover list is set to 3 values, Minecraft will show "... and 2 more ..." at end of the list.
		Examples:
			on server list ping:
				clear the hover list
				add "&aWelcome to the &6Minecraft &aserver!" to the hover list
				add "" to the hover list # A blank line
				add "&cThere are &6%online players count% &conline players!" to the hover list
		Since:
			2.3
		Return type: Text
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [custom] [(player|server)] (hover|sample) ([message] list|message)
			[the] [custom] player [(hover|sample)] list
	Humidity:
		ID: ExprHumidity
		Description:
			Humidity of given blocks.
		Examples:
			set {_humidity} to event-block's humidity
		Since:
			2.2-dev35
		Return type: Number
		Changers:
			none
		Patterns:
			[the] humidit(y|ies) of %blocks%
			%blocks%'[s] humidit(y|ies)
	IP:
		ID: ExprIP
		Description:
			The IP address of a player, or the connected player in a connect event, or the pinger in a server list ping event.
		Since:
			1.4, 2.2-dev26 (when used in connect event), 2.3 (when used in server list ping event)
		Return type: Text
		Changers:
			none
		Patterns:
			IP[s][( |-)address[es]] of %players%
			%players%'[s] IP[s][( |-)address[es]]
			IP[( |-)address]
	Index Of:
		ID: ExprIndexOf
		Description:
			The first or last index of a character (or text) in a text, or -1 if it doesn't occur in the text. Indices range from 1 to the length of the text.
		Examples:
			set {_first} to the first index of "@" in the text argument
			if {_s} contains "abc":
				set {_s} to the first (index of "abc" in {_s} + 3) characters of {_s} # removes everything after the first "abc" from {_s}
		Since:
			2.1
		Return type: long
		Changers:
			none
		Patterns:
			[the] (0Â¦|0Â¦first|1Â¦last) index of %string% in %string%
	Indices of List:
		ID: ExprIndices
		Description:
			Returns all the indices of a list variable, optionally sorted by their values.
			To sort the indices, all objects in the list must be comparable;
			Otherwise, this expression will just return the unsorted indices.
		Since:
			2.4 (indices), 2.6.1 (sorting)
		Return type: Text
		Changers:
			none
		Patterns:
			[(the|all [[of] the])] (indexes|indices) of %~objects%
			%~objects%'[s] (indexes|indices)
			[sorted] (indices|indexes) of %~objects% in (ascending|1Â¦descending) order
			[sorted] %~objects%'[s] (indices|indexes) in (ascending|1Â¦descending) order
	Inventory:
		ID: ExprInventory
		Description:
			The inventory of a block or player. You can usually omit this expression and can directly add or remove items to/from blocks or players.
		Examples:
			add a plank to the player's inventory
			clear the player's inventory
			remove 5 wool from the inventory of the clicked block
		Since:
			1.0
		Return type: Object
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] inventor(y|ies) of %inventoryholders%
			%inventoryholders%'[s] inventor(y|ies)
	Inventory Action:
		ID: ExprInventoryAction
		Description:
			The inventory action of an inventory event. Please click on the link for more information.
		Examples:
			inventory action is pickup all
		Since:
			2.2-dev16
		Return type: Inventory Action
		Changers:
			none
		Patterns:
			[the] inventory action
	Inventory Holder/Viewers/Rows/Slots:
		ID: ExprInventoryInfo
		Examples:
			event-inventory's amount of rows
			holder of player's top inventory
			{_inventory}'s viewers
		Since:
			2.2-dev34, 2.5 (slots)
		Return type: Object
		Changers:
			add
			remove
			remove all
		Patterns:
			(1Â¦holder[s]|2Â¦viewers|3Â¦[amount of] rows|4Â¦[amount of] slots) of %inventories%
			%inventories%'[s] (1Â¦holder[s]|2Â¦viewers|3Â¦[amount of] rows|4Â¦[amount of] slots)
	Inventory Slot:
		ID: ExprInventorySlot
		Description:
			Represents a slot in an inventory. It can be used to change the item in an inventory too.
		Examples:
			if slot 0 of player is air:
				set slot 0 of player to 2 stones
				remove 1 stone from slot 0 of player
				add 2 stones to slot 0 of player
				clear slot 1 of player
		Since:
			2.2-dev24
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] slot[s] %numbers% of %inventory%
			%inventory%'[s] slot[s] %numbers%
	Item:
		ID: ExprItem
		Description:
			The item involved in an event, e.g. in a drop, dispense, pickup or craft event.
		Examples:
			on dispense:
				item is a clock
				set the time to 6:00
		Since:
			<i>unknown</i> (before 2.1)
		Return type: Item
		Changers:
			none
		Patterns:
			[the] item
	Item Amount:
		ID: ExprItemAmount
		Description:
			The amount of an item stack.
		Examples:
			send "You have got %item amount of player's tool% %player's tool% in your hand!" to player
		Since:
			2.2-dev24
		Return type: long
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] item[[ ]stack] (amount|size|number) of %slots/itemtypes/itemstacks%
			%slots/itemtypes/itemstacks%'[s] item[[ ]stack] (amount|size|number)
	Item Enchantments:
		ID: ExprEnchantments
		Description:
			All the enchantments an item type has.
		Examples:
			clear enchantments of event-item
		Since:
			2.2-dev36
		Return type: Enchantment Type
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] enchantments of %itemtypes%
			%itemtypes%'[s] enchantments
	Item of an Entity:
		ID: ExprItemFrameSlot
		Description:
			An item associated with an entity. For dropped item entities, it gets, obviously, the item that was dropped. For item frames, the item inside the frame is returned. For throwable projectiles (snowballs, enderpearls etc.),it gets the displayed item. Other entities do not have items associated with them.
		Since:
			2.2-dev35, 2.2-dev36 (improved), 2.5.2 (throwable projectiles)
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] item of %entities%
			%entities%'[s] item
	Item with CustomModelData:
		ID: ExprItemWithCustomModelData
		Description:
			Get an item with a CustomModelData tag. (Value is an integer between 0 and 99999999)
		Examples:
			give player a diamond sword with custom model data 2
			set slot 1 of inventory of player to wooden hoe with custom model data 357
		Since:
			2.5
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtype% with [custom] model data %number%
	Item with Lore:
		ID: ExprItemWithLore
		Description:
			Returns the given item type with the specified lore added to it.
			If multiple strings are passed, each of them will be a separate line in the lore.
		Examples:
			set {_test} to stone with lore "line 1" and "line 2"
			give {_test} to player
		Since:
			2.3
		Return type: Item Type
		Changers:
			none
		Patterns:
			%itemtype% with [(a|the)] lore %strings%
	Items:
		ID: ExprItems
		Description:
			Items or blocks of a specific type, useful for looping.
		Examples:
			loop items of type ore and log:
				block contains loop-item
				message "Theres at least one %loop-item% in this block"
			drop all blocks at the player # drops one of every block at the player
		Since:
			1.0 pre-5
		Return type: Item Type
		Changers:
			none
		Patterns:
			[all [[of] the]|the] block[[ ]type]s
			every block[[ ]type]
			[all [[of] the]|the|every] block[s] of type[s] %itemtypes%
			[all [[of] the]|the|every] item[s] of type[s] %itemtypes%
	Items In:
		ID: ExprItemsIn
		Description:
			All items in an inventory. Useful for looping or storing in a list variable.
			Please note that the positions of the items in the inventory are not saved, only their order is preserved.
		Examples:
			loop all items in the player's inventory:
				loop-item is enchanted
				remove loop-item from the player
			set {inventory::%uuid of player%::*} to items in the player's inventory
		Since:
			2.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[(all [[of] the]|the)] items ([with]in|of|contained in|out of) (|1Â¦inventor(y|ies)) %inventories%
	Join & Split:
		ID: ExprJoinSplit
		Description:
			Joins several texts with a common delimiter (e.g. ", "), or splits a text into multiple texts at a given delimiter.
		Examples:
			message "Online players: %join all players with "" | ""%" # %all players% would use the default "x, y, and z"
			set {_s::*} to the string argument split at ","
		Since:
			2.1, 2.5.2 (regex support), 2.7 (case sensitivity)
		Return type: Text
		Changers:
			none
		Patterns:
			(concat[enate]|join) %strings% [(with|using|by) [[the] delimiter] %-string%]
			split %string% (at|using|by) [[the] delimiter] %string% [case:with case sensitivity]
			%string% split (at|using|by) [[the] delimiter] %string% [case:with case sensitivity]
			regex split %string% (at|using|by) [[the] delimiter] %string%
			regex %string% split (at|using|by) [[the] delimiter] %string%
	Language:
		ID: ExprLanguage
		Description:
			Currently selected game language of a player. The value of the language is not defined properly.
			The vanilla Minecraft client will use lowercase language / country pairs separated by an underscore, but custom resource packs may use any format they wish.
		Examples:
			message player's current language
		Since:
			2.3
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [([currently] selected|current)] [game] (language|locale) [setting] of %players%
			%players%'[s] [([currently] selected|current)] [game] (language|locale) [setting]
	Last Attacker:
		ID: ExprLastAttacker
		Description:
			The last block or entity that attacked an entity.
		Examples:
			send "%last attacker of event-entity%"
		Since:
			2.5.1
		Return type: Object
		Changers:
			none
		Patterns:
			[the] last attacker of %entity%
			%entity%'[s] last attacker
	Last Color:
		ID: ExprLastColor
		Description:
			The colors used at the end of a string. The colors of the returned string will be formatted with their symbols.
		Examples:
			set {_color} to the last colors of "<red>hey<blue>yo"
		Since:
			2.6
		Return type: Text
		Changers:
			none
		Patterns:
			[the] last color[s] of %strings%
			%strings%'[s] last color[s]
	Last Damage:
		ID: ExprLastDamage
		Description:
			The last damage that was done to an entity. Note that changing it doesn't deal more/less damage.
		Examples:
			set last damage of event-entity to 2
		Since:
			2.5.1
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] last damage of %livingentities%
			%livingentities%'[s] last damage
	Last Damage Cause:
		ID: ExprLastDamageCause
		Description:
			Cause of last damage done to an entity
		Examples:
			set last damage cause of event-entity to fire tick
		Since:
			2.2-Fixes-V10
		Return type: Damage Cause
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] last damage (cause|reason|type) of %livingentities%
			%livingentities%'[s] last damage (cause|reason|type)
	Last Loaded Server Icon:
		ID: ExprLastLoadedServerIcon
		Description:
			Returns the last loaded server icon with the load server icon effect.
		Examples:
			set {server-icon} to the last loaded server icon
		Since:
			2.3
		Return type: Server Icon
		Changers:
			none
		Patterns:
			[the] [last[ly]] loaded server icon
	Last Resource Pack Response:
		ID: ExprLastResourcePackResponse
		Description:
			Returns the last resource pack response received from a player.
		Examples:
			if player's last resource pack response is deny or download fail:
		Since:
			2.4
		Return type: Resource Pack State
		Changers:
			none
		Patterns:
			[the] [last] resource pack response[s] of %players%
			%players%'[s] [last] resource pack response[s]
	Last Spawned Entity:
		ID: ExprLastSpawnedEntity
		Description:
			Holds the entity that was spawned most recently with the spawn effect (section), dropped with the drop effect, shot with the shoot effect or created with the lightning effect. Please note that even though you can spawn multiple mobs simultaneously (e.g. with 'spawn 5 creepers'), only the last spawned mob is saved and can be used. If you spawn an entity, shoot a projectile and drop an item you can however access all them together.
		Examples:
			spawn a priest
			set {healer::%spawned priest%} to true
			shoot an arrow from the last spawned entity
			ignite the shot projectile
			drop a diamond sword
			push last dropped item upwards
			teleport player to last struck lightning
			delete last launched firework
		Since:
			1.3 (spawned entity), 2.0 (shot entity), 2.2-dev26 (dropped item), 2.7 (struck lightning, firework)
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] [last[ly]] (0:spawned|1:shot) %*entitydata%
			[the] [last[ly]] dropped (2:item)
			[the] [last[ly]] (created|struck) (3:lightning)
			[the] [last[ly]] (launched|deployed) (4:firework)
	Last/First Login Time:
		ID: ExprLastLoginTime
		Description:
			When a player last/first logged in the server. 'last login' requires paper to get the last login, otherwise it will get the last time they were seen on the server.
		Examples:
			command /onlinefor:
				trigger:
					send "You have been online for %difference between player's last login and now%."
					send "You first joined the server %difference between player's first login and now% ago."
		Since:
			2.5
		Return type: Date
		Changers:
			none
		Patterns:
			[the] (1Â¦last|2Â¦first) login of %offlineplayers%
			%offlineplayers%'[s] (1Â¦last|2Â¦first) login
	Leash Holder:
		ID: ExprLeashHolder
		Description:
			The leash holder of a living entity.
		Examples:
			set {_example} to the leash holder of the target mob
		Since:
			2.3
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] leash holder[s] of %livingentities%
			%livingentities%'[s] leash holder[s]
	Length:
		ID: ExprLength
		Description:
			The length of a text, in number of characters.
		Examples:
			set {_l} to length of the string argument
		Since:
			2.1
		Return type: long
		Changers:
			none
		Patterns:
			[the] length of %strings%
			%strings%'[s] length
	Level:
		ID: ExprLevel
		Description:
			The level of a player.
		Examples:
			reduce the victim's level by 1
			set the player's level to 0
		Since:
			<i>unknown</i> (before 2.1)
		Return type: long
		Changers:
			unknown
		Patterns:
			[the] level of %players%
			%players%'[s] level
	Level Progress:
		ID: ExprLevelProgress
		Description:
			The player's progress in reaching the next level, this represents the experience bar in the game. Please note that this value is between 0 and 1 (e.g. 0.5 = half experience bar).
			Changing this value can cause the player's level to change if the resulting level progess is negative or larger than 1, e.g. increase the player's level progress by 0.5 will make the player gain a level if their progress was more than 50%.
		Examples:
			# use the exp bar as mana
			on rightclick with a blaze rod:
				player's level progress is larger than 0.2
				shoot a fireball from the player
				reduce the player's level progress by 0.2
			every 2 seconds:
				loop all players:
					level progress of loop-player is smaller than 0.9:
						increase level progress of the loop-player by 0.1
					else:
						set level progress of the loop-player to 0.99
			on xp spawn:
				cancel event
		Since:
			2.0
		Return type: Number
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] level progress of %players%
			%players%'[s] level progress
	Light Level:
		ID: ExprLightLevel
		Description:
			Gets the light level at a certain location which ranges from 0 to 15.
			It can be separated into sunlight (15 = direct sunlight, 1-14 = indirect) and block light (torches, glowstone, etc.). The total light level of a block is the maximum of the two different light types.
		Examples:
			# set vampire players standing in bright sunlight on fire
			every 5 seconds:
				loop all players:
					{vampire::%uuid of loop-player%} is true
					sunlight level at the loop-player is greater than 10
					ignite the loop-player for 5 seconds
		Since:
			1.3.4
		Return type: byte
		Changers:
			none
		Patterns:
			[(1Â¦sky|1Â¦sun|2Â¦block)[ ]]light[ ]level [(of|%direction%) %location%]
	Loaded Plugins:
		ID: ExprPlugins
		Description:
			An expression to obtain a list of the names of the server's loaded plugins.
		Since:
			2.7
		Return type: Text
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] [loaded] plugins
	Location:
		ID: ExprLocation
		Description:
			The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
		Examples:
			drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'
			set {_loc} to the location 1 meter above the player
		Since:
			2.0
		Return type: Location
		Changers:
			unknown
		Patterns:
			[the] [event-](location|position)
	Location:
		ID: ExprLocation
		Description:
			The location where an event happened (e.g. at an entity or block), or a location relative to another (e.g. 1 meter above another location).
		Examples:
			drop 5 apples at the event-location # exactly the same as writing 'drop 5 apples'
			set {_loc} to the location 1 meter above the player
		Since:
			2.0
		Return type: Location
		Changers:
			unknown
		Patterns:
			[the] (location|position) %directions% [%location%]
	Location:
		ID: ExprLocationOf
		Description:
			The location of a block or entity. This not only represents the x, y and z coordinates of the location but also includes the world and the direction an entity is looking (e.g. teleporting to a saved location will make the teleported entity face the same saved direction every time).
			Please note that the location of an entity is at it's feet, use head location to get the location of the head.
		Examples:
			set {home::%uuid of player%} to the location of the player
			message "You home was set to %player's location% in %player's world%."
		Return type: Location
		Changers:
			unknown
		Patterns:
			(location|position) of %location%
			%location%'[s] (location|position)
	Location At:
		ID: ExprLocationAt
		Description:
			Allows to create a location from three coordinates and a world.
		Examples:
			set {_loc} to the location at arg-1, arg-2, arg-3 of the world arg-4
			distance between the player and the location (0, 0, 0) is less than 200
		Since:
			2.0
		Return type: Location
		Changers:
			none
		Patterns:
			[the] (location|position) [at] [(][x[ ][=[ ]]]%number%, [y[ ][=[ ]]]%number%, [and] [z[ ][=[ ]]]%number%[)] [[(in|of) [[the] world]] %world%]
	Loop value:
		ID: ExprLoopValue
		Description:
			The currently looped value.
		Examples:
			# countdown:
			loop 10 times:
				message "%11 - loop-number%"
				wait a second
			# generate a 10x10 floor made of randomly colored wool below the player:
			loop blocks from the block below the player to the block 10 east of the block below the player:
				loop blocks from the loop-block to the block 10 north of the loop-block:
					set loop-block-2 to any wool
		Since:
			1.0
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] loop-<.+>
	Loot:
		ID: ExprLoot
		Description:
			The loot that will be generated in a 'loot generate' event.
		Examples:
			on loot generate:
				chance of %10
				add 64 diamonds
				send "You hit the jackpot!!"
		Since:
			2.7
		Return type: Item
		Changers:
			add
			set
			remove
			delete
		Patterns:
			[the] loot
	Lore:
		ID: ExprLore
		Description:
			An item's lore.
		Examples:
			set the 1st line of the item's lore to "&lt;orange&gt;Excalibur 2.0"
		Since:
			2.1
		Return type: Text
		Changers:
			unknown
		Patterns:
			[the] lore of %itemstack/itemtype%
			%itemstack/itemtype%'[s] lore
			[the] line %number% of [the] lore of %itemstack/itemtype%
			[the] line %number% of %itemstack/itemtype%'[s] lore
			[the] %number%(st|nd|rd|th) line of [the] lore of %itemstack/itemtype%
			[the] %number%(st|nd|rd|th) line of %itemstack/itemtype%'[s] lore
	MOTD:
		ID: ExprMOTD
		Description:
			The message of the day in the server list. This can be changed in a server list ping event only.
			'default MOTD' returns the default MOTD always and can't be changed.
		Examples:
			on server list ping:
				set the motd to "Join now!"
		Since:
			2.3
		Return type: Text
		Changers:
			set
			delete
			reset
		Patterns:
			[the] [(1Â¦default)|(2Â¦shown|displayed)] (MOTD|message of [the] day)
	Max Durability:
		ID: ExprMaxDurability
		Description:
			The maximum durability of an item.
		Examples:
			maximum durability of diamond sword
			if max durability of player's tool is not 0: # Item is damageable
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			[the] max[imum] durabilit(y|ies) of %itemstacks/slots%
			%itemstacks/slots%'[s] max[imum] durabilit(y|ies)
	Max Health:
		ID: ExprMaxHealth
		Description:
			The maximum health of an entity, e.g. 10 for a player.
		Examples:
			on join:
				set the maximum health of the player to 100
			spawn a giant
			set the last spawned entity's max health to 1000
		Since:
			2.0
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] max[imum] health of %livingentities%
			%livingentities%'[s] max[imum] health
	Max Minecart Speed:
		ID: ExprMaxMinecartSpeed
		Description:
			The maximum speed of a minecart.
		Examples:
			on right click on minecart:
				set max minecart speed of event-entity to 1
		Since:
			2.5.1
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] max[imum] minecart (speed|velocity) of %entities%
			%entities%'[s] max[imum] minecart (speed|velocity)
	Max Players:
		ID: ExprMaxPlayers
		Description:
			The count of max players. This can be changed in a server list ping event only.
			'real max players' returns the real count of max players of the server and can be modified on Paper 1.16 or later.
		Examples:
			on server list ping:
				set the max players count to (online players count + 1)
		Since:
			2.3, 2.7 (modify max real players)
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [1:(real|default)|2:(fake|shown|displayed)] max[imum] player[s] [count|amount|number|size]
			[the] [1:(real|default)|2:(fake|shown|displayed)] max[imum] (count|amount|number|size) of players
	Maximum Freeze Time:
		ID: ExprMaxFreezeTicks
		Description:
			The maximum amount of time an entity can spend in powdered snow before taking damage.
		Examples:
			difference between player's freeze time and player's max freeze time is less than 1 second:
				send "you're about to freeze!" to the player
		Since:
			2.7
		Return type: Timespan
		Changers:
			none
		Patterns:
			[the] max[imum] freeze time of %entities%
			%entities%'[s] max[imum] freeze time
	Maximum Stack Size:
		ID: ExprMaxStack
		Description:
			The maximum stack size of the specified material, e.g. 64 for torches, 16 for buckets, and 1 for swords.
		Examples:
			send "You can only pick up %max stack size of player's tool% of %type of (player's tool)%" to player
		Since:
			2.1
		Return type: long
		Changers:
			none
		Patterns:
			[the] max[imum] stack[[ ]size] of %itemtype%
			%itemtype%'[s] max[imum] stack[[ ]size]
	Me:
		ID: ExprMe
		Description:
			A 'me' expression that can be used in players' effect commands only.
		Examples:
			!heal me
			!kick myself
			!give a diamond axe to me
		Since:
			2.1.1
		Return type: Player
		Changers:
			add
			remove
			remove all
		Patterns:
			me
			my[self]
	Mending Repair Amount:
		ID: ExprMendingRepairAmount
		Description:
			The number of durability points an item is to be repaired in a mending event.
			 Modifying the repair amount will affect how much experience is given to the player after mending.
		Examples:
			on item mend:
				set the mending repair amount to 100
		Since:
			2.5.1
		Return type: long
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] [mending] repair amount
	Message:
		ID: ExprMessage
		Description:
			The (chat) message of a chat event, the join message of a join event, the quit message of a quit event, or the death message on a death event. This expression is mostly useful for being changed.
		Since:
			1.4.6 (chat message), 1.4.9 (join & quit messages), 2.0 (death message)
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [chat( |-)]message
			[the] (join|log[ ]in)( |-)message
			[the] (quit|leave|log[ ]out|kick)( |-)message
			[the] death( |-)message
	Metadata:
		ID: ExprMetadata
		Description:
			Metadata is a way to store temporary data on entities, blocks and more that disappears after a server restart.
		Examples:
			set metadata value "healer" of player to true
			broadcast "%metadata value ""healer"" of player%"
			clear metadata value "healer" of player
		Since:
			2.2-dev36
		Return type: Object
		Changers:
			set
			delete
		Patterns:
			metadata [(value|tag)[s]] %strings% of %metadataholders%
			%metadataholders%'[s] metadata [(value|tag)[s]] %string%
	Middle of Location:
		ID: ExprMiddleOfLocation
		Description:
			Returns the middle/center of a location. In other words, returns the middle of the X, Z coordinates and the floor value of the Y coordinate of a location.
		Examples:
			command /stuck:
				executable by: players
				trigger:
					teleport player to the center of player's location
					send "You're no longer stuck."
		Since:
			2.6.1
		Return type: Location
		Changers:
			none
		Patterns:
			[the] (middle|center) [point] of %location%
			%location%'[s] (middle|center) [point]
	Minecart Derailed / Flying Velocity:
		ID: ExprMinecartDerailedFlyingVelocity
		Description:
			The velocity of a minecart as soon as it has been derailed or as soon as it starts flying.
		Examples:
			on right click on minecart:
				set derailed velocity of event-entity to vector 2, 10, 2
		Since:
			2.5.1
		Return type: Vector
		Changers:
			add
			set
			remove
		Patterns:
			[the] [minecart] (1Â¦derailed|2Â¦flying) velocity of %entities%
			%entities%'[s] [minecart] (1Â¦derailed|2Â¦flying) velocity
	Moon Phase:
		ID: ExprMoonPhase
		Description:
			The current moon phase of a world.
		Examples:
			if moon phase of player's world is full moon:
				send "Watch for the wolves!"
		Since:
			2.7
		Return type: Moon Phase
		Changers:
			none
		Patterns:
			[the] (lunar|moon) phase[s] of %worlds%
			%worlds%'[s] (lunar|moon) phase[s]
	Moved blocks:
		ID: ExprPushedBlocks
		Description:
			Blocks which are moved in a piston event. Cannot be used outside of piston events.
		Examples:
			the moved blocks
		Since:
			2.2-dev27
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] moved blocks
	Name / Display Name / Tab List Name:
		ID: ExprName
		Examples:
			on join:
				player has permission "name.red"
				set the player's display name to "&lt;red&gt;[admin] &lt;gold&gt;%name of player%"
				set the player's tab list name to "&lt;green&gt;%player's name%"
			set the name of the player's tool to "Legendary Sword of Awesomeness"
		Since:
			before 2.1, 2.2-dev20 (inventory name), 2.4 (non-living entity support, changeable inventory name), 2.7 (worlds)
		Return type: Text
		Changers:
			set
			reset
		Patterns:
			[the] (1Â¦name[s]|2Â¦(display|nick|chat|custom)[ ]name[s]) of %offlineplayers/entities/blocks/itemtypes/inventories/slots/worlds/gamerules%
			%offlineplayers/entities/blocks/itemtypes/inventories/slots/worlds/gamerules%'[s] (1Â¦name[s]|2Â¦(display|nick|chat|custom)[ ]name[s])
	Name / Display Name / Tab List Name:
		ID: ExprName
		Examples:
			on join:
				player has permission "name.red"
				set the player's display name to "&lt;red&gt;[admin] &lt;gold&gt;%name of player%"
				set the player's tab list name to "&lt;green&gt;%player's name%"
			set the name of the player's tool to "Legendary Sword of Awesomeness"
		Since:
			before 2.1, 2.2-dev20 (inventory name), 2.4 (non-living entity support, changeable inventory name), 2.7 (worlds)
		Return type: Text
		Changers:
			set
			reset
		Patterns:
			[the] (3Â¦(player|tab)[ ]list name[s]) of %players%
			%players%'[s] (3Â¦(player|tab)[ ]list name[s])
	Named Item/Inventory:
		ID: ExprNamed
		Description:
			Directly names an item/inventory, useful for defining a named item/inventory in a script. If you want to (re)name existing items/inventories you can either use this expression or use set <a href='#ExprName'>name of &lt;item/inventory&gt; to &lt;text&gt;</code>.
		Examples:
			give a diamond sword of sharpness 100 named "&lt;gold&gt;Excalibur" to the player
			set tool of player to the player's tool named "&lt;gold&gt;Wand"
			set the name of the player's tool to "&lt;gold&gt;Wand"
			open hopper inventory named "Magic Hopper" to player
		Since:
			2.0, 2.2-dev34 (inventories)
		Return type: Object
		Changers:
			unknown
		Patterns:
			%itemtype/inventorytype% (named|with name[s]) %string%
	Nearest Entity:
		ID: ExprNearestEntity
		Description:
			Gets the entity nearest to a location or another entity.
		Since:
			2.7
		Return type: Entity
		Changers:
			unknown
		Patterns:
			[the] nearest %*entitydatas% [[relative] to %entity/location%]
			[the] %*entitydatas% nearest [to %entity/location%]
	New Line:
		ID: LitNewLine
		Description:
			Returns a line break separator.
		Examples:
			send "Hello%nl%Goodbye!" to player
		Since:
			2.5
		Return type: Text
		Changers:
			none
		Patterns:
			n[ew]l[ine]
			line[ ]break
	No Damage Ticks:
		ID: ExprNoDamageTicks
		Description:
			The number of ticks that an entity is invulnerable to damage for.
		Examples:
			on damage:
				set victim's invulnerability ticks to 20 #Victim will not take damage for the next second
		Since:
			2.5
		Return type: long
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] (invulnerability|no damage) tick[s] of %livingentities%
			%livingentities%'[s] (invulnerability|no damage) tick[s]
	Now:
		ID: ExprNow
		Description:
			The current system time of the server. Use time to get the Minecraft time of a world.
		Examples:
			broadcast "Current server time: %now%"
		Since:
			1.4
		Return type: Date
		Changers:
			none
		Patterns:
			now
	Number of Characters:
		ID: ExprNumberOfCharacters
		Description:
			The number of uppercase, lowercase, or digit characters in a string.
		Examples:
			#Simple Chat Filter
			on chat:
				if number of uppercase chars in message / length of message > 0.5
					cancel event
					send "&lt;red&gt;Your message has to many caps!" to player
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			number of upper[ ]case char(acters|s) in %string%
			number of lower[ ]case char(acters|s) in %string%
			number of digit char(acters|s) in %string%
	Numbers:
		ID: ExprNumbers
		Description:
			All numbers between two given numbers, useful for looping.
			Use 'numbers' if your start is not an integer and you want to keep the fractional part of the start number constant, or use 'integers' if you only want to loop integers.
			You may also use 'decimals' if you want to use the decimal precision of the start number.
			You may want to use the 'times' expression instead, for instance 'loop 5 times:'
		Examples:
			loop numbers from 2.5 to 5.5: # loops 2.5, 3.5, 4.5, 5.5
			loop integers from 2.9 to 5.1: # same as '3 to 5', i.e. loops 3, 4, 5
			loop decimals from 3.94 to 4: # loops 3.94, 3.95, 3.96, 3.97, 3.98, 3.99, 4
		Since:
			1.4.6 (integers & numbers), 2.5.1 (decimals)
		Return type: Number
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] (numbers|1Â¦integers|2Â¦decimals) (between|from) %number% (and|to) %number%
	Offline players:
		ID: ExprOfflinePlayers
		Description:
			All players that have ever joined the server. This includes the players currently online.
		Examples:
			send "Size of all players who have joined the server: %size of all offline players%"
		Since:
			2.2-dev35
		Return type: Offline Player
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] offline[ ]players
	Online Player Count:
		ID: ExprOnlinePlayersCount
		Description:
			The amount of online players. This can be changed in a server list ping event only to show fake online player amount.
			real online player count always return the real count of online players and can't be changed.
		Examples:
			on server list ping:
				# This will make the max players count 5 if there are 4 players online.
				set the fake max players count to (online player count + 1)
		Since:
			2.3
		Return type: long
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [(1:(real|default)|2:(fake|shown|displayed))] [online] player (count|amount|number)
			[the] [(1:(real|default)|2:(fake|shown|displayed))] (count|amount|number|size) of online players
	Opened Inventory:
		ID: ExprOpenedInventory
		Description:
			Return the currently opened inventory of a player.
			If no inventory is open, it returns the own player's crafting inventory.
		Examples:
			set slot 1 of player's current inventory to diamond sword
		Since:
			2.2-dev24, 2.2-dev35 (Just 'current inventory' works in player events)
		Return type: Inventory
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] (current|open|top) inventory [of %players%]
			%players%'[s] (current|open|top) inventory
	Parse:
		ID: ExprParse
		Description:
			Parses text as a given type, or as a given pattern.
			This expression can be used in two different ways: One which parses the entire text as a single instance of a type, e.g. as a number, and one that parses the text according to a pattern.
			If the given text could not be parsed, this expression will return nothing and the parse error will be set if some information is available.
			Some notes about parsing with a pattern:
			- The pattern must be a Skript pattern, e.g. percent signs are used to define where to parse which types, e.g. put a %number% or %items% in the pattern if you expect a number or some items there.
			- You have to save the expression's value in a list variable, e.g. set {parsed::*} to message parsed as "...".
			- The list variable will contain the parsed values from all %types% in the pattern in order. If a type was plural, e.g. %items%, the variable's value at the respective index will be a list variable, e.g. the values will be stored in {parsed::1::*}, not {parsed::1}.
		Examples:
			set {var} to line 1 parsed as number
			on chat:
				set {var::*} to message parsed as "buying %items% for %money%"
				if parse error is set:
					message "%parse error%"
				else if {var::*} is set:
					cancel event
					remove {var::2} from the player's balance
					give {var::1::*} to the player
		Since:
			2.0
		Return type: Object
		Changers:
			none
		Patterns:
			%string% parsed as (%-*classinfo%|"<.*>")
	Parse Error:
		ID: ExprParseError
		Description:
			The error which caused the last parse operation to fail, which might not be set if a pattern was used and the pattern didn't match the provided text at all.
		Examples:
			set {var} to line 1 parsed as integer
			if {var} is not set:
				parse error is set:
					message "&lt;red&gt;Line 1 is invalid: %last parse error%"
				else:
					message "&lt;red&gt;Please put an integer on line 1!"
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] [last] [parse] error
	Passenger:
		ID: ExprPassenger
		Description:
			The passenger of a vehicle, or the rider of a mob.
			For 1.11.2 and above, it returns a list of passengers and you can use all changers in it.
			See also: vehicle
		Examples:
			#for 1.11 and lower
			passenger of the minecart is a creeper or a cow
			the saddled pig's passenger is a player
			#for 1.11.2+
			passengers of the minecart contains a creeper or a cow
			the boat's passenger contains a pig
			add a cow and a zombie to passengers of last spawned boat
			set passengers of player's vehicle to a pig and a horse
			remove all pigs from player's vehicle
			clear passengers of boat
		Since:
			2.0, 2.2-dev26 (Multiple passengers for 1.11.2+)
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] passenger[s] of %entities%
			%entities%'[s] passenger[s]
	Pi:
		ID: LitPi
		Description:
			Returns the mathematical constant pi. (approx. 3.1415926535)
		Examples:
			set {_tau} to pi * 2
		Since:
			2.7
		Return type: double
		Changers:
			none
		Patterns:
			(pi|Ï)
	Pickup Delay:
		ID: ExprPickupDelay
		Description:
			The amount of time before a dropped item can be picked up by an entity.
		Examples:
			drop diamond sword at {_location} without velocity
			set pickup delay of last dropped item to 5 seconds
		Since:
			2.7
		Return type: Timespan
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] pick[ ]up delay of %entities%
			%entities%'[s] pick[ ]up delay
	Ping:
		ID: ExprPing
		Description:
			Pings of players, as Minecraft server knows them. Note that they will almost certainly be different from the ones you'd get from using ICMP echo requests. This expression is only supported on some server software (PaperSpigot).
		Examples:
			command /ping <player=%player%>:
				trigger:
					send "%arg-1%'s ping is %arg-1's ping%"
		Since:
			2.2-dev36
		Return type: long
		Changers:
			none
		Patterns:
			[the] ping of %players%
			%players%'[s] ping
	Plain Item:
		ID: ExprPlain
		Description:
			A plain item is an item with no modifications. It can be used to convert items to their default state or to match with other default items.
		Examples:
			if the player's tool is a plain diamond: # check if player's tool has no modifications
				send "You are holding a plain diamond!"
		Since:
			2.6
		Return type: Item Type
		Changers:
			none
		Patterns:
			[a[n]] (plain|unmodified) %itemtype%
	Player List Header and Footer:
		ID: ExprPlayerlistHeaderFooter
		Description:
			The message above and below the player list in the tab menu.
		Examples:
			set all players' tab list header to "Welcome to the Server!"
			send "%the player's tab list header%" to player
			reset all players' tab list header
		Since:
			2.4
		Return type: Text
		Changers:
			set
			delete
			reset
		Patterns:
			[the] (player|tab)[ ]list (header|1Â¦footer) [(text|message)] of %players%
			%players%'[s] (player|tab)[ ]list (header|1Â¦footer) [(text|message)]
	Player Protocol Version:
		ID: ExprPlayerProtocolVersion
		Description:
			Player's protocol version. For more information and list of protocol versions visit wiki.vg.
		Examples:
			command /protocolversion &ltplayer&gt:
				trigger:
					send "Protocol version of %arg-1%: %protocol version of arg-1%"
		Since:
			2.6.2
		Return type: integer
		Changers:
			none
		Patterns:
			[the] protocol version of %players%
			%players%'[s] protocol version
	Player Skull:
		ID: ExprSkull
		Description:
			Gets a skull item representing a player. Skulls for other entities are provided by the aliases.
		Examples:
			give the victim's skull to the attacker
			set the block at the entity to the entity's skull
		Since:
			2.0
		Return type: Item Type
		Changers:
			none
		Patterns:
			[the] (head|skull) of %offlineplayers%
			%offlineplayers%'[s] (head|skull)
	Player Weather:
		ID: ExprPlayerWeather
		Description:
			The weather for a player.
		Examples:
			set weather of arg-player to rainy
			reset player's weather
			if arg-player's weather is rainy
		Since:
			2.2-dev34
		Return type: Weather Type
		Changers:
			set
			reset
		Patterns:
			[the] [(client|custom)] weather of %players%
			%players%'[s] [(client|custom)] weather
	Portal:
		ID: ExprPortal
		Description:
			The blocks associated with a portal in the portal creation event.
		Examples:
			on portal creation:
				loop portal blocks:
					broadcast "%loop-block% is part of a portal!"
		Since:
			2.4
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] portal['s] blocks
			[the] blocks of [the] portal
	Potion Effect:
		ID: ExprPotionEffect
		Description:
			Create a new potion effect to apply to an entity or item type. Do note that when applying potion effects 
			to tipped arrows/lingering potions, Minecraft reduces the timespan.
		Examples:
			set {_p} to potion effect of speed of tier 1 without particles for 10 minutes
			add {_p} to potion effects of player's tool
			add {_p} to potion effects of target entity
			add potion effect of speed 1 to potion effects of player
		Since:
			2.5.2
		Return type: Potion Effect
		Changers:
			none
		Patterns:
			[new] potion effect of %potioneffecttype% [potion] [[[of] tier] %-number%] [(1Â¦without particles)] [for %-timespan%]
			[new] ambient potion effect of %potioneffecttype% [potion] [[[of] tier] %-number%] [(1Â¦without particles)] [for %-timespan%]
	Potion Effect Tier:
		ID: ExprPotionEffectTier
		Description:
			An expression to obtain the amplifier of a potion effect applied to an entity.
		Examples:
			if the amplifier of haste of player >= 3:
		Since:
			2.7
		Return type: integer
		Changers:
			none
		Patterns:
			[the] [potion] (tier|amplifier|level) of %potioneffecttypes% (of|for|on) %livingentities%
	Potion Effects:
		ID: ExprPotionEffects
		Description:
			Represents the active potion effects of entities and itemtypes.
			You can clear all potion effects of an entity/itemtype and add/remove a potion effect/type to/from an entity/itemtype.
			Do note you will not be able to clear the base potion effects of a potion item. In that case, just set the item to a water bottle.
			When adding a potion effect type (rather than a potion effect), it will default to 15 seconds with tier 1.
		Examples:
			set {_p::*} to active potion effects of player
			clear all the potion effects of player
			clear all the potion effects of player's tool
			add potion effects of player to potion effects of player's tool
			add speed to potion effects of target entity
			remove speed and night vision from potion effects of player
		Since:
			2.5.2
		Return type: Potion Effect
		Changers:
			add
			remove
			delete
		Patterns:
			[the] [(all [[of] the]|the)] [active] potion effects of %livingentities/itemtypes%
			%livingentities/itemtypes%'[s] [(all [[of] the]|the)] [active] potion effects
	Projectile Bounce State:
		ID: ExprProjectileBounceState
		Description:
			A projectile's bounce state.
		Examples:
			on projectile hit:
				set projectile bounce mode of event-projectile to true
		Since:
			2.5.1
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] projectile bounce (state|ability|mode) of %projectiles%
			%projectiles%'[s] projectile bounce (state|ability|mode)
	Projectile Critical State:
		ID: ExprProjectileCriticalState
		Description:
			A projectile's critical state. The only currently accepted projectiles are arrows and tridents.
		Examples:
			on shoot:
				event-projectile is an arrow
				set projectile critical mode of event-projectile to true
		Since:
			2.5.1
		Return type: Boolean
		Changers:
			set
		Patterns:
			[the] (projectile|arrow) critical (state|ability|mode) of %projectiles%
			%projectiles%'[s] (projectile|arrow) critical (state|ability|mode)
	Protocol Version:
		ID: ExprProtocolVersion
		Examples:
			on server list ping:
				set the version string to "&lt;light green&gt;Version: &lt;orange&gt;%minecraft version%"
				set the protocol version to 0 # 13w41a (1.7) - so the player will see the custom version string almost always
		Since:
			2.3
		Return type: long
		Changers:
			set
		Patterns:
			[the] [server] [(sent|required|fake)] protocol version [number]
	Random:
		ID: ExprRandom
		Description:
			Gets a random item out of a set, e.g. a random player out of all players online.
		Examples:
			give a diamond to a random player out of all players
			give a random item out of all items to the player
		Since:
			1.4.9
		Return type: Object
		Changers:
			unknown
		Patterns:
			[a] random %*classinfo% [out] of %objects%
	Random Number:
		ID: ExprRandomNumber
		Description:
			A random number or integer between two given numbers. Use 'number' if you want any number with decimal parts, or use use 'integer' if you only want whole numbers.
			Please note that the order of the numbers doesn't matter, i.e. random number between 2 and 1 will work as well as random number between 1 and 2.
		Examples:
			set the player's health to a random number between 5 and 10
			send "You rolled a %random integer from 1 to 6%!" to the player
		Since:
			1.4
		Return type: Number
		Changers:
			none
		Patterns:
			[a] random (:integer|number) (from|between) %number% (to|and) %number%
	Random UUID:
		ID: ExprRandomUUID
		Description:
			Returns a random UUID.
		Examples:
			set {_uuid} to random uuid
		Since:
			2.5.1
		Return type: Text
		Changers:
			none
		Patterns:
			[a] random uuid
	Raw Name:
		ID: ExprRawName
		Description:
			The raw Minecraft material name of the given item. Note that this is not guaranteed to give same results on all servers.
		Examples:
			raw name of tool of player
		Since:
			unknown (2.2)
		Return type: Text
		Changers:
			none
		Patterns:
			(raw|minecraft|vanilla) name[s] of %itemtypes%
	Raw String:
		ID: ExprRawString
		Description:
			Returns the string without formatting (colors etc.) and without stripping them from it, e.g. raw "&aHello There!" would output &aHello There!
		Examples:
			send raw "&aThis text is unformatted!" to all players
		Since:
			2.7
		Return type: Text
		Changers:
			none
		Patterns:
			raw %strings%
	Redstone Block Power:
		ID: ExprRedstoneBlockPower
		Description:
			Power of a redstone block
		Examples:
			if redstone power of targeted block is 15:
				send "This block is very powerful!"
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			[the] redstone power of %blocks%
			%blocks%'[s] redstone power
	Remaining Air:
		ID: ExprRemainingAir
		Description:
			How much time a player has left underwater before starting to drown.
		Examples:
			player's remaining air is less than 3 seconds:
				send "hurry, get to the surface!" to the player
		Since:
			<i>unknown</i> (before 2.1)
		Return type: Timespan
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] remaining air of %livingentities%
			%livingentities%'[s] remaining air
	Respawn Anchor Charges:
		ID: ExprCharges
		Description:
			The charges of a respawn anchor.
		Examples:
			set the charges of event-block to 3
		Since:
			2.7
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [:max[imum]] charge[s] of %blocks%
			%blocks%'[s] [:max[imum]] charge[s]
	Respawn location:
		ID: ExprRespawnLocation
		Description:
			The location that a player should respawn at. This is used within the respawn event.
		Examples:
			on respawn:
				set respawn location to {example::spawn}
		Since:
			2.2-dev35
		Return type: Location
		Changers:
			set
		Patterns:
			[the] respawn location
	Reversed List:
		ID: ExprReversedList
		Description:
			Reverses given list.
		Examples:
			set {_list::*} to reversed {_list::*}
		Since:
			2.4
		Return type: Object
		Changers:
			unknown
		Patterns:
			reversed %objects%
	Rounding:
		ID: ExprRound
		Description:
			Rounds numbers normally, up (ceiling) or down (floor) respectively.
		Examples:
			set {var} to rounded health of player
			set line 1 of the block to rounded "%(1.5 * player's level)%"
			add rounded down argument to the player's health
		Since:
			2.0
		Return type: long
		Changers:
			none
		Patterns:
			(a|the|) round[ed] down %number%
			(a|the|) round[ed] %number%
			(a|the|) round[ed] up %number%
	Saturation:
		ID: ExprSaturation
		Description:
			The saturation of a player. If used in a player event, it can be omitted and will default to event-player.
		Examples:
			set saturation of player to 20
		Since:
			2.2-Fixes-v10, 2.2-dev35 (fully modifiable), 2.6.2 (syntax pattern changed)
		Return type: Number
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] saturation of %players%
			%players%'[s] saturation
	Scoreboard Tags:
		ID: ExprScoreboardTags
		Since:
			2.3
		Return type: Text
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[(all [[of] the]|the)] scoreboard tags of %entities%
			%entities%'[s] scoreboard tags
	Script Name:
		ID: ExprScript
		Description:
			Holds the current script's name (the file name without '.sk').
		Examples:
			on script load:
				set {running::%script%} to true
			on script unload:
				set {running::%script%} to false
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			[the] script[['s] name]
			name of [the] script
	Sea Level:
		ID: ExprSeaLevel
		Description:
			Gets the sea level of a world.
		Examples:
			send "The sea level in your world is %sea level in player's world%"
		Since:
			2.5.1
		Return type: long
		Changers:
			none
		Patterns:
			[the] sea level of %worlds%
			%worlds%'[s] sea level
	Sea Pickles:
		ID: ExprSeaPickles
		Description:
			An expression to obtain or modify data relating to the pickles of a sea pickle block.
		Examples:
			on block break:
				type of block is sea pickle
				send "Wow! This stack of sea pickles contained %event-block's sea pickle count% pickles!"
				send "It could've contained a maximum of %event-block's maximum sea pickle count% pickles!"
				send "It had to have contained at least %event-block's minimum sea pickle count% pickles!"
				cancel event
				set event-block's sea pickle count to event-block's maximum sea pickle count
				send "This bad boy is going to hold so many pickles now!!"
		Since:
			2.7
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [:(min|max)[imum]] [sea] pickle(s| (count|amount)) of %blocks%
			%blocks%'[s] [:(min|max)[imum]] [sea] pickle(s| (count|amount))
	Server Icon:
		ID: ExprServerIcon
		Description:
			Icon of the server in the server list. Can be set to an icon that loaded using the
			load server icon effect,
			or can be reset to the default icon in a server list ping.
			'default server icon' returns the default server icon (server-icon.png) always and cannot be changed.
		Examples:
			on script load:
				set {server-icons::default} to the default server icon
		Since:
			2.3
		Return type: Server Icon
		Changers:
			none
		Patterns:
			[the] [(1Â¦(default)|2Â¦(shown|sent))] [server] icon
	Sets:
		ID: ExprSets
		Description:
			Returns a list of all the values of a type; useful for looping.
		Examples:
			loop all attribute types:
				set loop-value attribute of player to 10
				message "Set attribute %loop-value% to 10!"
		Since:
			<i>unknown</i> (before 1.4.2), 2.7 (colors)
		Return type: Object
		Changers:
			unknown
		Patterns:
			[all [[of] the]|the|every] %*classinfo%
	Shooter:
		ID: ExprShooter
		Description:
			The shooter of a projectile.
		Examples:
			shooter is a skeleton
		Since:
			1.3.7
		Return type: Living Entity
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] shooter [of %projectile%]
	Shuffled List:
		ID: ExprShuffledList
		Description:
			Shuffles given list randomly. This is done by replacing indices by random numbers in resulting list.
		Examples:
			set {_list::*} to shuffled {_list::*}
		Since:
			2.2-dev32
		Return type: Object
		Changers:
			unknown
		Patterns:
			shuffled %objects%
	Sign Text:
		ID: ExprSignText
		Description:
			A line of text on a sign. Can be changed, but remember that there is a 16 character limit per line (including color codes that use 2 characters each).
		Examples:
			on rightclick on sign:
				line 2 of the clicked block is "[Heal]":
					heal the player
				set line 3 to "%player%"
		Since:
			1.3
		Return type: Text
		Changers:
			set
			delete
		Patterns:
			[the] line %number% [of %block%]
			[the] (1Â¦1st|1Â¦first|2Â¦2nd|2Â¦second|3Â¦3rd|3Â¦third|4Â¦4th|4Â¦fourth) line [of %block%]
	Slot Index:
		ID: ExprSlotIndex
		Description:
			Index of an an inventory slot. Other types of slots may or may not have indices. Note that comparing slots with numbers is also possible; if index of slot is same as the number, comparisonsucceeds. This expression is mainly for the cases where you must for some reason save the slot numbers.
		Examples:
			if index of event-slot is 10:
				send "You bought a pie!"
		Since:
			2.2-dev35
		Return type: long
		Changers:
			none
		Patterns:
			[the] index of %slots%
			%slots%'[s] index
	Sorted List:
		ID: ExprSortedList
		Description:
			Sorts given list in natural order. All objects in list must be comparable; if they're not, this expression will return nothing.
		Examples:
			set {_sorted::*} to sorted {_players::*}
		Since:
			2.2-dev19
		Return type: Object
		Changers:
			unknown
		Patterns:
			sorted %objects%
	Source Block:
		ID: ExprSourceBlock
		Description:
			The source block in a spread event.
		Examples:
			on spread:
				if the source block is a grass block:
					set the source block to a dirt block
		Since:
			2.7
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] source block
	Spawn:
		ID: ExprSpawn
		Description:
			The spawn point of a world.
		Examples:
			teleport all players to spawn
			set the spawn point of "world" to the player's location
		Since:
			1.4.2
		Return type: Location
		Changers:
			set
		Patterns:
			[the] spawn[s] [(point|location)[s]] [of %worlds%]
			%worlds%'[s] spawn[s] [(point|location)[s]]
	Spawn Reason:
		ID: ExprSpawnReason
		Description:
			The spawn reason in a spawn event.
		Examples:
			on spawn:
				spawn reason is reinforcements or breeding
		Since:
			2.3
		Return type: Spawn Reason
		Changers:
			none
		Patterns:
			[the] spawn[ing] reason
	Spawner Type:
		ID: ExprSpawnerType
		Description:
			Retrieves, sets, or resets the spawner's entity type
		Examples:
			on right click:
				if event-block is spawner:
					send "Spawner's type is %target block's entity type%"
		Since:
			2.4
		Return type: Entity Type
		Changers:
			set
			reset
		Patterns:
			[the] (spawner|entity|creature) type[s] of %blocks%
			%blocks%'[s] (spawner|entity|creature) type[s]
	Special Number:
		ID: ExprSpecialNumber
		Description:
			Special number values, namely NaN, Infinity and -Infinity
		Examples:
			if {_number} is NaN value:
		Since:
			2.2-dev32d
		Return type: Number
		Changers:
			none
		Patterns:
			(0Â¦NaN|1Â¦[(2Â¦-|2Â¦minus)](infinity|â)) value
			value of (0Â¦NaN|1Â¦[(2Â¦-|2Â¦minus)](infinity|â))
	Spectator Target:
		ID: ExprSpectatorTarget
		Description:
			Grabs the spectator target entity of the players.
		Since:
			2.4-alpha4, 2.7 (Paper Spectator Event)
		Return type: Entity
		Changers:
			add
			remove
			remove all
		Patterns:
			spectator target [of %-players%]
			%players%'[s] spectator target
	Speed:
		ID: ExprSpeed
		Description:
			A player's walking or flying speed. Both can be changed, but values must be between -1 and 1 (excessive values will be changed to -1 or 1 respectively). Negative values reverse directions.
			Please note that changing a player's speed will change their FOV just like potions do.
		Examples:
			set the player's walk speed to 1
			increase the argument's fly speed by 0.1
		Since:
			<i>unknown</i> (before 2.1)
		Return type: Number
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] (0Â¦walk[ing]|1Â¦fl(y[ing]|ight))[( |-)]speed of %players%
			%players%'[s] (0Â¦walk[ing]|1Â¦fl(y[ing]|ight))[( |-)]speed
	Substring:
		ID: ExprSubstring
		Description:
			Extracts part of a text. You can either get the first &lt;x&gt; characters, the last &lt;x&gt; characters, the character at index &lt;x&gt;, or the characters between indices &lt;x&gt; and &lt;y&gt;. The indices &lt;x&gt; and &lt;y&gt; should be between 1 and the length of the text (other values will be fit into this range).
		Examples:
			set {_s} to the first 5 characters of the text argument
			message "%subtext of {_s} from characters 2 to (the length of {_s} - 1)%" # removes the first and last character from {_s} and sends it to the player or console
			set {_characters::*} to characters at 1, 2 and 7 in player's display name
			send the last character of all players' names
		Since:
			2.1, 2.5.2 (character at, multiple strings support)
		Return type: Text
		Changers:
			none
		Patterns:
			[the] (part|sub[ ](text|string)) of %strings% (between|from) (ind(ex|ices)|character[s]|) %number% (and|to) (index|character|) %number%
			[the] (1Â¦first|2Â¦last) [%-number%] character[s] of %strings%
			[the] %number% (1Â¦first|2Â¦last) characters of %strings%
			[the] character[s] at [(index|position|indexes|indices|positions)] %numbers% (in|of) %strings%
	TPS (ticks per second):
		ID: ExprTPS
		Description:
			Returns the 3 most recent TPS readings, like the /tps command. This expression is only supported on some server software (PaperSpigot).
		Examples:
			broadcast "%tps%"
		Since:
			2.2-dev36
		Return type: Number
		Changers:
			none
		Patterns:
			tps from [the] last ([1] minute|1[ ]m[inute])
			tps from [the] last 5[ ]m[inutes]
			tps from [the] last 15[ ]m[inutes]
			[the] tps
	Tamer:
		ID: ExprTamer
		Description:
			The tamer of an entity. Can only be used in entity tame events. You can use 'event-entity' to refer tamed entity itself.
		Examples:
			on tame:
				if the tamer is a player:
					send "someone tamed something!" to console
		Since:
			2.2-dev25
		Return type: Player
		Changers:
			add
			remove
			remove all
		Patterns:
			[the] tamer
	Target:
		ID: ExprTarget
		Description:
			For players this is the entity at the crosshair.
			For mobs and experience orbs this is the entity they are attacking/following (if any).
		Since:
			1.4.2, 2.7 (Reset)
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
			delete
			reset
		Patterns:
			[the] target[[ed] %-*entitydata%] [of %livingentities%]
			%livingentities%'[s] target[[ed] %-*entitydata%]
	Targeted Block:
		ID: ExprTargetedBlock
		Description:
			The block at the crosshair. This regards all blocks that are not air as fully solid, e.g. torches will be like a solid stone block for this expression.
		Examples:
			# A command to set the block a player looks at to a specific type:
			command /setblock &lt;material&gt;:
				trigger:
					set targeted block to argument
		Since:
			1.0
		Return type: Block
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] target[ed] block[s] [of %players%]
			%players%'[s] target[ed] block[s]
			[the] actual[ly] target[ed] block[s] [of %players%]
			%players%'[s] actual[ly] target[ed] block[s]
	Teleport Cause:
		ID: ExprTeleportCause
		Description:
			The teleport cause within a player teleport event.
		Examples:
			on teleport
				teleport cause is nether portal, end portal or end gateway
		Since:
			2.2-dev35
		Return type: Teleport Cause
		Changers:
			none
		Patterns:
			[the] teleport (cause|reason|type)
	Temperature:
		ID: ExprTemperature
		Description:
			Temperature at given block.
		Examples:
			message "%temperature of the targeted block%"
		Since:
			2.2-dev35
		Return type: Number
		Changers:
			none
		Patterns:
			[the] temperature[s] of %blocks%
			%blocks%'[s] temperature[s]
	Ternary:
		ID: ExprTernary
		Description:
			A shorthand expression for returning something based on a condition.
		Examples:
			set {points} to 500 if {admin::%player's uuid%} is set else 100
		Since:
			2.2-dev36
		Return type: Object
		Changers:
			none
		Patterns:
			%objects% if <.+>[,] (otherwise|else) %objects%
	The Egg:
		ID: ExprEgg
		Description:
			The egg thrown in a Player Egg Throw event.
		Examples:
			spawn an egg at the egg
		Since:
			2.7
		Return type: Projectile
		Changers:
			none
		Patterns:
			[the] [thrown] egg
	Time:
		ID: ExprTime
		Description:
			The time of a world.
		Examples:
			time in world is between 18:00 and 6:00:
				broadcast "It's night-time, watch out for monsters!"
		Since:
			1.0
		Return type: Time
		Changers:
			add
			set
			remove
		Patterns:
			[the] time[s] [([with]in|of) %worlds%]
			%worlds%'[s] time[s]
	Time Played:
		ID: ExprTimePlayed
		Description:
			The amount of time a player has played for on the server. This info is stored in the player's statistics in the main world's data folder. Changing this will also change the player's stats which can be views in the client's statistics menu.
			Using this expression on offline players on Minecraft 1.14 and below will return nothing &lt;none&gt;.
		Since:
			2.5, 2.7 (offline players)
		Return type: Timespan
		Changers:
			add
			set
			remove
		Patterns:
			[the] time played of %offlineplayers%
			%offlineplayers%'[s] time played
	Time Since:
		ID: ExprTimeSince
		Description:
			The time that has passed since a date. If the given date is in the future, a value will not be returned.
		Examples:
			send "%time since 5 minecraft days ago% has passed since 5 minecraft days ago!" to player
		Since:
			2.5
		Return type: Timespan
		Changers:
			none
		Patterns:
			[the] time since %dates%
	Tool:
		ID: ExprTool
		Description:
			The item an entity is holding in their main or off hand.
		Examples:
			player's tool is a pickaxe
			player's off hand tool is a shield
			set tool of all players to a diamond sword
			set offhand tool of target entity to a bow
		Since:
			1.0
		Return type: Inventory Slot
		Changers:
			add
			set
			remove
			remove all
			delete
		Patterns:
			[the] ((tool|held item|weapon)|1Â¦(off[ ]hand (tool|item))) [of %livingentities%]
			%livingentities%'[s] ((tool|held item|weapon)|1Â¦(off[ ]hand (tool|item)))
	Total Experience:
		ID: ExprTotalExperience
		Description:
			The total experience, in points, of players or experience orbs.
			Adding to a player's experience will trigger Mending, but setting their experience will not.
		Since:
			2.7
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] [total] experience of %entities%
			%entities%'[s] [total] experience
	Type of:
		ID: ExprTypeOf
		Description:
			Type of a block, item, entity, inventory or potion effect.
			Types of items, blocks and block datas are item types similar to them but have amounts
			of one, no display names and, on Minecraft 1.13 and newer versions, are undamaged.
			Types of entities and inventories are entity types and inventory types known to Skript.
			Types of potion effects are potion effect types.
		Examples:
			on rightclick on an entity:
				message "This is a %type of clicked entity%!"
		Since:
			1.4, 2.5.2 (potion effect), 2.7 (block datas)
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] type of %entitydatas/itemtypes/inventories/potioneffects/blockdatas%
			%entitydatas/itemtypes/inventories/potioneffects/blockdatas%'[s] type
	UUID:
		ID: ExprUUID
		Description:
			The UUID of a player, entity or world.
			In the future there will be an option to use a player's UUID instead of the name in variable names (i.e. when %player% is used), but for now this can be used.
			Please note that this expression does not work for offline players if you are under 1.8!
		Examples:
			# prevents people from joining the server if they use the name of a player
			# who has played on this server at least once since this script has been added
			on login:
				if {uuid::%name of player%} exists:
					{uuid::%name of player%} is not uuid of player
					kick player due to "Someone with your name has played on this server before"
				else:
					set {uuid::%name of player%} to uuid of player
		Since:
			2.1.2, 2.2 (offline players' UUIDs), 2.2-dev24 (other entities' UUIDs)
		Return type: Text
		Changers:
			none
		Patterns:
			[the] UUID of %offlineplayers/worlds/entities%
			%offlineplayers/worlds/entities%'[s] UUID
	Unbreakable Items:
		ID: ExprUnbreakable
		Description:
			Creates unbreakable copies of given items.
		Examples:
			unbreakable iron sword #Creates unbreakable iron sword
		Since:
			2.2-dev13b
		Return type: Item Type
		Changers:
			none
		Patterns:
			unbreakable %itemtypes%
	Unix Date:
		ID: ExprUnixDate
		Description:
			Converts given Unix timestamp to a date. The Unix timespan represents the number of seconds elapsed since 1 January 1970.
		Examples:
			unix date of 946684800 #1 January 2000 12:00 AM (UTC Time)
		Since:
			2.5
		Return type: Date
		Changers:
			none
		Patterns:
			[the] unix date of %numbers%
			%numbers%'[s] unix date
	Unix Timestamp:
		ID: ExprUnixTicks
		Description:
			Converts given date to Unix timestamp. This is roughly how many seconds have elapsed since 1 January 1970.
		Examples:
			unix timestamp of now
		Since:
			2.2-dev31
		Return type: Number
		Changers:
			none
		Patterns:
			[the] unix timestamp of %dates%
			%dates%'[s] unix timestamp
	Value Within:
		ID: ExprValueWithin
		Description:
			Gets the value within objects. Usually used with variables to get the value they store rather than the variable itself, or with lists to get the values of a type.
		Since:
			2.7
		Return type: Object
		Changers:
			unknown
		Patterns:
			[the] (%-*classinfo%|value[:s]) (within|in) %~objects%
	Vectors - Angle Between:
		ID: ExprVectorAngleBetween
		Description:
			Gets the angle between two vectors.
		Examples:
			send "%the angle between vector 1, 0, 0 and vector 0, 1, 1%"
		Since:
			2.2-dev28
		Return type: Number
		Changers:
			none
		Patterns:
			[the] angle between [[the] vectors] %vector% and %vector%
	Vectors - Arithmetic:
		ID: ExprVectorArithmetic
		Description:
			Arithmetic expressions for vectors.
		Examples:
			set {_v} to vector 1, 2, 3 // vector 5, 5, 5
			set {_v} to {_v} ++ {_v}
			set {_v} to {_v} -- {_v}
			set {_v} to {_v} ** {_v}
			set {_v} to {_v} // {_v}
		Since:
			2.2-desecond8
		Return type: Vector
		Changers:
			none
		Patterns:
			%vector%[ ]++[ ]%vector%
			%vector%[ ]--[ ]%vector%
			%vector%[ ]**[ ]%vector%
			%vector%[ ]//[ ]%vector%
	Vectors - Create from XYZ:
		ID: ExprVectorFromXYZ
		Description:
			Creates a vector from x, y and z values.
		Examples:
			set {_v} to vector 0, 1, 0
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[a] [new] vector [(from|at|to)] %number%,[ ]%number%(,[ ]| and )%number%
	Vectors - Cross Product:
		ID: ExprVectorCrossProduct
		Description:
			Gets the cross product between two vectors.
		Examples:
			send "%vector 1, 0, 0 cross vector 0, 1, 0%"
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			%vector% cross %vector%
	Vectors - Cylindrical Shape:
		ID: ExprVectorCylindrical
		Description:
			Forms a 'cylindrical shaped' vector using yaw to manipulate the current point.
		Examples:
			loop 360 times:
				set {_v} to cylindrical vector radius 1, yaw loop-value, height 2
			set {_v} to cylindrical vector radius 1, yaw 90, height 2
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[a] [new] cylindrical vector [(from|with)] [radius] %number%, [yaw] %number%(,| and) [height] %number%
	Vectors - Dot Product:
		ID: ExprVectorDotProduct
		Description:
			Gets the dot product between two vectors.
		Examples:
			set {_dot} to {_v1} dot {_v2}
		Since:
			2.2-dev28
		Return type: Number
		Changers:
			none
		Patterns:
			%vector% dot %vector%
	Vectors - Length:
		ID: ExprVectorLength
		Description:
			Gets or sets the length of a vector.
		Examples:
			send "%standard length of vector 1, 2, 3%"
			set {_v} to vector 1, 2, 3
			set standard length of {_v} to 2
			send "%standard length of {_v}%"
		Since:
			2.2-dev28
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] (vector|standard|normal) length[s] of %vectors%
			%vectors%'[s] (vector|standard|normal) length[s]
	Vectors - Location Vector Offset:
		ID: ExprLocationVectorOffset
		Description:
			Returns the location offset by vectors.
		Examples:
			set {_loc} to {_loc} ~ {_v}
		Since:
			2.2-dev28
		Return type: Location
		Changers:
			none
		Patterns:
			%location% offset by [[the] vectors] %vectors%
			%location%[ ]~[~][ ]%vectors%
	Vectors - Normalized:
		ID: ExprVectorNormalize
		Description:
			Returns the same vector but with length 1.
		Examples:
			set {_v} to normalized {_v}
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			normalize[d] %vector%
			%vector% normalized
	Vectors - Random Vector:
		ID: ExprVectorRandom
		Description:
			Creates a random unit vector.
		Examples:
			set {_v} to a random vector
		Since:
			2.2-dev28, 2.7 (signed components)
		Return type: Vector
		Changers:
			none
		Patterns:
			[a] random vector
	Vectors - Spherical Shape:
		ID: ExprVectorSpherical
		Description:
			Forms a 'spherical shaped' vector using yaw and pitch to manipulate the current point.
		Examples:
			loop 360 times:
				set {_v} to spherical vector radius 1, yaw loop-value, pitch loop-value
			set {_v} to spherical vector radius 1, yaw 45, pitch 90
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[new] spherical vector [(from|with)] [radius] %number%, [yaw] %number%(,| and) [pitch] %number%
	Vectors - Squared Length:
		ID: ExprVectorSquaredLength
		Description:
			Gets the squared length of a vector.
		Examples:
			send "%squared length of vector 1, 2, 3%"
		Since:
			2.2-dev28
		Return type: Number
		Changers:
			none
		Patterns:
			[the] squared length[s] of %vectors%
			%vectors%'[s] squared length[s]
	Vectors - Vector Between Locations:
		ID: ExprVectorBetweenLocations
		Description:
			Creates a vector between two locations.
		Examples:
			set {_v} to vector between {_loc1} and {_loc2}
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[the] vector (from|between) %location% (to|and) %location%
	Vectors - Vector from Location:
		ID: ExprVectorOfLocation
		Description:
			Creates a vector from a location.
		Examples:
			set {_v} to vector of {_loc}
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[the] vector (of|from|to) %location%
			%location%'s vector
	Vectors - Vector from Pitch and Yaw:
		ID: ExprVectorFromYawAndPitch
		Description:
			Creates a vector from a yaw and pitch value.
		Examples:
			set {_v} to vector from yaw 45 and pitch 45
		Since:
			2.2-dev28
		Return type: Vector
		Changers:
			none
		Patterns:
			[a] [new] vector (from|with) yaw %number% and pitch %number%
	Vectors - Velocity:
		ID: ExprVelocity
		Description:
			Gets or changes velocity of an entity.
		Examples:
			set player's velocity to {_v}
		Since:
			2.2-dev31
		Return type: Vector
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] velocit(y|ies) of %entities%
			%entities%'[s] velocit(y|ies)
	Vectors - XYZ Component:
		ID: ExprVectorXYZ
		Description:
			Gets or changes the x, y or z component of a vector.
		Examples:
			set {_v} to vector 1, 2, 3
			send "%x of {_v}%, %y of {_v}%, %z of {_v}%"
			add 1 to x of {_v}
			add 2 to y of {_v}
			add 3 to z of {_v}
			send "%x of {_v}%, %y of {_v}%, %z of {_v}%"
			set x component of {_v::*} to 1
			set y component of {_v::*} to 2
			set z component of {_v::*} to 3
			send "%x component of {_v::*}%, %y component of {_v::*}%, %z component of {_v::*}%"
		Since:
			2.2-dev28
		Return type: Number
		Changers:
			unknown
		Patterns:
			[the] [vector] (0Â¦x|1Â¦y|2Â¦z) [component[s]] of %vectors%
			%vectors%'[s] [vector] (0Â¦x|1Â¦y|2Â¦z) [component[s]]
	Vehicle:
		ID: ExprVehicle
		Description:
			The vehicle an entity is in, if any. This can actually be any entity, e.g. spider jockeys are skeletons that ride on a spider, so the spider is the 'vehicle' of the skeleton.
			See also: passenger
		Examples:
			vehicle of the player is a minecart
		Since:
			2.0
		Return type: Entity
		Changers:
			add
			set
			remove
			remove all
		Patterns:
			[the] vehicle[s] of %entities%
			%entities%'[s] vehicle[s]
	Version:
		ID: ExprVersion
		Description:
			The version of Bukkit, Minecraft or Skript respectively.
		Examples:
			message "This server is running Minecraft %minecraft version% on Bukkit %bukkit version%"
			message "This server is powered by Skript %skript version%"
		Since:
			2.0
		Return type: Text
		Changers:
			none
		Patterns:
			(0Â¦[craft]bukkit|1Â¦minecraft|2Â¦skript)( |-)version
	Version String:
		ID: ExprVersionString
		Description:
			The text to show if the protocol version of the server doesn't match with protocol version of the client. You can check the protocol version expression for more information about this.
			This can only be set in a server list ping event.
		Examples:
			on server list ping:
				set the protocol version to 0 # 13w41a (1.7), so it will show the version string always
				set the version string to "&lt;light green&gt;Version: &lt;orange&gt;%minecraft version%"
		Since:
			2.3
		Return type: Text
		Changers:
			set
		Patterns:
			[the] [shown|custom] version [string|text]
	View Distance:
		ID: ExprPlayerViewDistance
		Description:
			The view distance of a player as set by the server. Can be changed.
			NOTE: This is the view distance sent by the server to the player.
			This has nothing to do with client side view distance settings
			NOTE: This may not work on some versions (such as MC 1.14.x).
			The return value in this case will be the view distance set in system.properties.
		Examples:
			set view distance of player to 10
			set {_view} to view distance of player
			reset view distance of all players
			add 2 to view distance of player
		Since:
			2.4
		Return type: integer
		Changers:
			add
			set
			remove
			delete
			reset
		Patterns:
			[the] view distance[s] of %players%
			%players%'[s] view distance[s]
	View Distance of Client:
		ID: ExprClientViewDistance
		Description:
			The view distance of the client. Can not be changed. This differs from the server side view distance of player as this will retrieve the view distance the player has set on their client.
		Examples:
			set {_clientView} to the client view distance of player
			set view distance of player to client view distance of player
		Since:
			2.5
		Return type: long
		Changers:
			none
		Patterns:
			[the] client view distance[s] of %players%
			%players%'[s] client view distance[s]
	Weather:
		ID: ExprWeather
		Description:
			The weather in the given or the current world.
		Examples:
			set weather to clear
			weather in "world" is rainy
		Since:
			1.0
		Return type: Weather Type
		Changers:
			set
			delete
		Patterns:
			[the] weather [(in|of) %worlds%]
			%worlds%'[s] weather
	Whitelist:
		ID: ExprWhitelist
		Description:
			A server's whitelist.This expression can be used to add/remove players to/from the whitelist, to enable it and disable it (set whitelist to true / set whitelist to false), and to empty it (reset whitelist)
		Examples:
			set whitelist to false
			add all players to whitelist
			reset the whitelist
		Since:
			2.5.2
		Return type: Offline Player
		Changers:
			add
			set
			remove
			reset
		Patterns:
			[the] white[ ]list
	World:
		ID: ExprWorld
		Description:
			The world the event occurred in.
		Examples:
			world is "world_nether"
			teleport the player to the world's spawn
			set the weather in the player's world to rain
			set {_world} to world of event-chunk
		Since:
			1.0
		Return type: World
		Changers:
			set
		Patterns:
			[the] world [of %locations/entities/chunk%]
			%locations/entities/chunk%'[s] world
	World Environment:
		ID: ExprWorldEnvironment
		Description:
			The environment of a world
		Examples:
			if environment of player's world is nether:
				apply fire resistance to player for 10 minutes
		Since:
			2.7
		Return type: World Environment
		Changers:
			none
		Patterns:
			[the] [world] environment of %worlds%
			%worlds%'[s] [world] environment
	World Seed:
		ID: ExprSeed
		Description:
			The seed of given world. Note that it will be returned as Minecraft internally treats seeds, not as you specified it in world configuration.
		Examples:
			broadcast "Seed: %seed of player's world%"
		Since:
			2.2-dev35
		Return type: long
		Changers:
			none
		Patterns:
			[the] seed[s] (from|of) %worlds%
			%worlds%'[s] seed[s]
	World from Name:
		ID: ExprWorldFromName
		Description:
			Returns the world from a string.
		Examples:
			world named {game::world-name}
			the world "world"
		Since:
			2.6.1
		Return type: World
		Changers:
			none
		Patterns:
			[the] world [(named|with name)] %string%
	Worlds:
		ID: ExprWorlds
		Description:
			All worlds of the server, useful for looping.
		Examples:
			loop all worlds:
				broadcast "You're in %loop-world%" to loop-world
		Since:
			1.0
		Return type: World
		Changers:
			none
		Patterns:
			[(all [[of] the]|the)] worlds
	X Times:
		ID: ExprTimes
		Description:
			Integers between 1 and X, used in loops to loop X times.
		Examples:
			loop 20 times:
				broadcast "%21 - loop-number% seconds left.."
				wait 1 second
		Since:
			1.4.6
		Return type: long
		Changers:
			none
		Patterns:
			%number% time[s]
			once
			twice
	X of Item:
		ID: ExprXOf
		Description:
			An expression to be able to use a certain amount of items where the amount can be any expression. Please note that this expression is not stable and might be replaced in the future.
		Examples:
			give level of player of pickaxes to the player
		Since:
			1.2
		Return type: Object
		Changers:
			unknown
		Patterns:
			%number% of %itemstacks/itemtypes/entitytype%
	Yaw / Pitch:
		ID: ExprYawPitch
		Description:
			The yaw or pitch of a location or vector.
		Examples:
			log "%player%: %location of player%, %player's yaw%, %player's pitch%" to "playerlocs.log"
			set {_yaw} to yaw of player
			set {_p} to pitch of target entity
		Since:
			2.0, 2.2-dev28 (vector yaw/pitch)
		Return type: Number
		Changers:
			add
			set
			remove
		Patterns:
			[the] (0Â¦yaw|1Â¦pitch) of %locations/vectors%
			%locations/vectors%'[s] (0Â¦yaw|1Â¦pitch)
Types:
	Attribute Type:
		ID: Attribute
		Description:
			Represents the type of an attribute. Note that this type does not contain any numerical values.See attribute types for more info.
		Usage: luck, generic movement speed, horse jump strength, generic luck, generic max absorption, follow range, movement speed, max absorption, generic follow range, zombie spawn reinforcements, generic attack knockback, knockback resistance, attack knockback, generic armor toughness, generic attack speed, max health, flying speed, attack damage, generic attack damage, generic armor, generic flying speed, generic knockback resistance, armor, attack speed, armor toughness, generic max health
		Since:
			2.5
		Patterns:
			attribute[ ]type[s]
	Biome:
		ID: Biome
		Description:
			All possible biomes Minecraft uses to generate a world.
		Examples:
			biome at the player is desert
		Usage: roofed forest, old growth pine taiga, mesa forest, the void, snowy taiga, hell, jagged peaks, spiked ice plains, crimson forest, stone shore, birch forest, cold taiga, cold beach, savanna, giant tree taiga, marsh, windswept forest, wooded badlands, sky, nether, void, cold ocean, giant spruce taiga, lush caves, deep lukewarm ocean, deep frozen ocean, small end islands, ice spikes, old growth birch forest, badlands, badlands forest, ocean, lukewarm ocean, ice plains spikes, gravelly mountains, frozen peaks, stony peaks, jungle, basalt deltas, snowy beach, frozen ocean, mountains, forest, wooded mesa, eroded mesa, the end, dripstone caves, swampland, end barrens, ice plains with spikes, windswept hills, sea, unknown, black forest, soul sand valley, deep dark, mesa, plains, eroded badlands, mushroom fields, windswept gravelly hills, mushroom island, wooded mountains, shattered savanna, sunflower plains, snowy plains, meadow, snowy slopes, flower forest, windswept savanna, nether wastes, stony shore, taiga, frozen river, warm ocean, custom, old growth spruce taiga, deep cold ocean, swamp, mangrove swamp, deep ocean, end highlands, end midlands, cherry grove, sparse jungle, dark forest, jungle edge, grove, snowy tundra, beach, bamboo jungle, savanna plateau, river, tall birch forest, warped forest, desert
		Since:
			1.4.4
		Patterns:
			biome[s]
	Block:
		ID: Block
		Description:
			A block in a world. It has a location and a type, and can also have a direction (mostly a facing), an inventory, or other special properties.
		Since:
			1.0
		Patterns:
			block[s]
	Block Data:
		ID: BlockData
		Description:
			Block data is the detailed information about a block, referred to in Minecraft as BlockStates, allowing for the manipulation of different aspects of the block, including shape, waterlogging, direction the block is facing, and so much more. Information regarding each block's optional data can be found on Minecraft's Wiki. Find the block you're looking for and scroll down to 'Block States'. Different states must be separated by a semicolon (see examples). The 'minecraft:' namespace is optional, as well as are underscores.
		Examples:
			set block at player to campfire[lit=false]
			set target block of player to oak stairs[facing=north;waterlogged=true]
			set block at player to grass_block[snowy=true]
			set loop-block to minecraft:chest[facing=north]
			set block above player to oak_log[axis=y]
			set target block of player to minecraft:oak_leaves[distance=2;persistent=false]
		Since:
			2.5
		Patterns:
			block[ ]data[s]
	Boolean:
		ID: Boolean
		Description:
			A boolean is a value that is either true or false. Other accepted names are 'on' and 'yes' for true, and 'off' and 'no' for false.
		Examples:
			set {config.%player%.use mod} to false
		Usage: true/yes/on or false/no/off
		Since:
			1.0
		Patterns:
			boolean[s]
	Cat Type:
		ID: Type
		Description:
			Represents the race/type of a cat entity.
		Usage: red, all black, british shorthair, ragdoll, white, jellie, siamese, black, tabby, calico, persian
		Since:
			2.4
		Patterns:
			cat[ ](type|race)[s]
	Character:
		ID: Character
		Description:
			A single character.
		Since:
			1.1.0
		Patterns:
			char[acter][s]
	Chunk:
		ID: Chunk
		Description:
			A chunk is a cuboid of 16Ã16Ã128 (xÃzÃy) blocks. Chunks are spread on a fixed rectangular grid in their world.
		Since:
			2.0
		Patterns:
			chunk[s]
	Click Type:
		ID: ClickType
		Description:
			Click type, mostly for inventory events. Tells exactly which keys/buttons player pressed, assuming that default keybindings are used in client side.
		Usage: lmb, number key, mmb, rmb, drop item, drop key, window border using left mouse button, unknown, window border using right mouse, shift+rmb, unsupported, shift+lmb, ctrl+q, swap shield, left mouse button, left mouse with shift, left mouse, 0-9, double click, double click using mouse, border using rmb, right mouse button, right mouse button with shift, border using lmb, middle mouse, drop key with control, window border using right mouse button, swap offhand, custom, q, right mouse with shift, middle mouse button, drop stack, left mouse button with shift, right mouse, creative action
		Since:
			2.2-dev16b, 2.2-dev35 (renamed to click type)
		Patterns:
			click[ ]type[s]
	Color:
		ID: Color
		Description:
			Wool, dye and chat colors.
		Examples:
			color of the sheep is red or black
			set the color of the block to green
			message "You're holding a <%color of tool%>%color of tool%<reset> wool block"
		Usage: black, dark grey/dark gray, grey/light grey/gray/light gray/silver, white, blue/dark blue, cyan/aqua/dark cyan/dark aqua, light blue/light cyan/light aqua, green/dark green, light green/lime/lime green, yellow/light yellow, orange/gold/dark yellow, red/dark red, pink/light red, purple/dark purple, magenta/light purple, brown/indigo
		Patterns:
			colo[u]r[s]
	Command Sender:
		ID: CommandSender
		Description:
			A player or the console.
		Examples:
			command /push [&lt;player&gt;]:
				trigger:
					if arg-1 is not set:
						if command sender is console:
							send "You can't push yourself as a console :\" to sender
							stop
						push sender upwards with force 2
						send "Yay!"
					else:
						push arg-1 upwards with force 2
						send "Yay!" to sender and arg-1
		Usage: use the console for the console
see player for players.
		Since:
			1.0
		Patterns:
			[(command[s]][ ][)](sender|executor)[s]
	Damage Cause:
		ID: DamageCause
		Description:
			The cause/type of a damage event, e.g. lava, fall, fire, drowning, explosion, poison, etc.
			Please note that support for this type is very rudimentary, e.g. lava, fire and burning, as well as projectile and attack are considered different types.
		Usage: sweep attack, thorns, the void, magma, a lightning, drowning, dragonfire, an attack, drown, an entity attack, melt, freeze, falling block, contact, fire, an entity explosion, lightning, a fall, entity explosion, void, a lightning strike, suffocation, suicide, wither effect, a plugin, lightning strike, entity attack, a potion, a wither, sweeping, melting, a falling block, unknown, starvation, lava, fall, hot floor, attack, a block explosion, dryout, burn, hitting wall while flying, potion, world border, flying into a wall, cramming, poison, sonic boom, suffocate, custom, kill, killed, a fire, burning, a projectile, plugin, wither potion effect, block explosion, projectile, wither, dragon's breath
		Since:
			2.0
		Patterns:
			damage[ ]cause[s]
	Date:
		ID: Date
		Description:
			A date is a certain point in the real world's time which can be obtained with now expression, unix date expression and date function.
			See time and timespan for the other time types of Skript.
		Examples:
			set {_yesterday} to now
			subtract a day from {_yesterday}
			# now {_yesterday} represents the date 24 hours before now
		Since:
			1.4
		Patterns:
			date[s]
	Difficulty:
		ID: Difficulty
		Description:
			The difficulty of a world.
		Usage: normal, medium, hard, easy, peaceful
		Since:
			2.3
		Patterns:
			difficult(y|ies)
	Direction:
		ID: Direction
		Description:
			A direction, e.g. north, east, behind, 5 south east, 1.3 meters to the right, etc.
			Locations and some blocks also have a direction, but without a length.
			Please note that directions have changed extensively in the betas and might not work perfectly. They can also not be used as command arguments.
		Examples:
			set the block below the victim to a chest
			loop blocks from the block infront of the player to the block 10 below the player:
				set the block behind the loop-block to water
		Usage: see direction (expression)
		Since:
			2.0
		Patterns:
			direction[s]
	Enchantment:
		ID: Enchantment
		Description:
			An enchantment, e.g. 'sharpness' or 'fortune'. Unlike enchantment type this type has no level, but you usually don't need to use this type anyway.
		Usage: Efficiency, Looting, Soul Speed, Silk Touch, Quick Charge, Flame, Fortune, Aqua Affinity, Multishot, Channeling, Loyalty, Curse of Binding, Punch, Projectile Protection, Power, Sharpness, Frost Walker, Fire Protection, Impaling, Luck of The Sea, Riptide, Protection, Mending, Respiration, Piercing, Unbreaking, Swift Sneak, Feather Falling, Lure, Smite, Fire Aspect, Knockback, Depth Strider, Sweeping Edge, Infinity, Curse of Vanishing, Blast Protection, Bane of Arthropods, Thorns
		Since:
			1.4.6
		Patterns:
			enchantment[s]
	Enchantment Offer:
		ID: EnchantmentOffer
		Description:
			The enchantmentoffer in an enchant prepare event.
		Examples:
			on enchant prepare:
				set enchant offer 1 to sharpness 1
				set the cost of enchant offer 1 to 10 levels
		Since:
			2.5
		Patterns:
			enchant[ment][ ]offer[s]
	Enchantment Type:
		ID: EnchantmentType
		Description:
			An enchantment with an optional level, e.g. 'sharpness 2' or 'fortune'.
		Examples:
			enchant the player's tool with sharpness 5
			helmet is enchanted with waterbreathing
		Usage: &lt;enchantment&gt; [&lt;level&gt;]
		Since:
			1.4.6
		Patterns:
			enchant(ing|ment) type[s]
	Entity:
		ID: Entity
		Description:
			An entity is something in a world that's not a block, e.g. a player, a skeleton, or a zombie, but also projectiles like arrows, fireballs or thrown potions, or special entities like dropped items, falling blocks or paintings.
		Examples:
			entity is a zombie or creeper
			player is an op
			projectile is an arrow
			shoot a fireball from the player
		Usage: player, op, wolf, tamed ocelot, powered creeper, zombie, unsaddled pig, fireball, arrow, dropped item, item frame, etc.
		Since:
			1.0
		Patterns:
			entit(y|ies)
	Entity Type:
		ID: EntityData
		Description:
			The type of an entity, e.g. player, wolf, powered creeper, etc.
		Examples:
			victim is a cow
			spawn a creeper
		Usage: Detailed usage will be added eventually
		Since:
			1.3
		Patterns:
			entity[ ]type[s]
	Experience:
		ID: Experience
		Description:
			Experience points. Please note that Bukkit only allows to give XP, but not remove XP from players. You can however change a player's level and level progress freely.
		Examples:
			give 10 xp to the player
		Usage: [&lt;number&gt;] ([e]xp|experience [point[s]])
		Since:
			2.0
		Patterns:
			experience[ ][point[s]]
	Firework Effect:
		ID: FireworkEffect
		Description:
			A configuration of effects that defines the firework when exploded
			which can be used in the launch firework effect.
			See the firework effect expression for detailed patterns.
		Examples:
			launch flickering trailing burst firework colored blue and green at player
			launch trailing flickering star colored purple, yellow, blue, green and red fading to pink at target entity
			launch ball large colored red, purple and white fading to light green and black at player's location with duration 1
		Usage: See Firework Types
		Since:
			2.4
		Patterns:
			firework[ ]effect[s]
	Firework Type:
		ID: Type
		Description:
			The type of a fireworkeffect.
		Usage: small, ball, star shaped, large, star, creeper face, small ball, large ball, burst, ball large, creeper
		Since:
			2.4
		Patterns:
			firework[ ]type[s]
	Game Mode:
		ID: GameMode
		Description:
			The game modes survival, creative, adventure and spectator.
		Examples:
			player's gamemode is survival
			set the player argument's game mode to creative
		Usage: adventure, survival, spectator, creative
		Since:
			1.0
		Patterns:
			game[ ]mode[s]
	Gamerule:
		ID: GameRule
		Description:
			A gamerule
		Usage: doWardenSpawning, tntExplosionDropDecay, globalSoundEvents, enderPearlsVanishOnDeath, doFireTick, maxCommandChainLength, doVinesSpread, fireDamage, reducedDebugInfo, waterSourceConversion, disableElytraMovementCheck, lavaSourceConversion, announceAdvancements, drowningDamage, commandBlockOutput, forgiveDeadPlayers, doMobSpawning, maxEntityCramming, disableRaids, doWeatherCycle, mobExplosionDropDecay, doDaylightCycle, showDeathMessages, doTileDrops, universalAnger, playersSleepingPercentage, snowAccumulationHeight, doInsomnia, doImmediateRespawn, blockExplosionDropDecay, naturalRegeneration, doMobLoot, fallDamage, keepInventory, doEntityDrops, doLimitedCrafting, mobGriefing, randomTickSpeed, spawnRadius, freezeDamage, doTraderSpawning, commandModificationBlockLimit, logAdminCommands, spectatorsGenerateChunks, sendCommandFeedback, doPatrolSpawning
		Since:
			2.5
		Patterns:
			gamerule[s]
	Gamerule Value:
		ID: GameruleValue
		Description:
			A wrapper for the value of a gamerule for a world.
		Since:
			2.5
		Patterns:
			gamerule value[s]
	Gene:
		ID: Gene
		Description:
			Represents a Panda's main or hidden gene. See genetics for more info.
		Usage: normal, lazy, happy, worried, worrisome, aggressive, brown, brownish, savage, playful, wild, weak
		Since:
			2.4
		Patterns:
			[panda ]gene[s]
	Heal Reason:
		ID: RegainReason
		Description:
			The heal reason in a heal event.
		Usage: an ender crystal, magic, a magic regeneration, magic regeneration, fed, sated, a magic regen, regen potion, a wither spawn, peaceful, unknown, a regeneration potion, consuming, a wither effect, peaceful regeneration, wither summoning, healing potion, wither potion, an end crystal, satiated, regeneration potion, potion, satisfied, ingesting, withered, custom, a wither spawning, end crystal, eating, wither spawning, a wither summoning, wither effect, a plugin, a regen potion, plugin, withering, a potion, wither spawn, a healing potion, ender crystal, magic regen, wither, peaceful regen
		Since:
			2.5
		Patterns:
			(regen|heal) (reason|cause)
	Inventory:
		ID: Inventory
		Description:
			An inventory of a player or block. Inventories have many effects and conditions regarding the items contained.
			An inventory has a fixed amount of slots which represent a specific place in the inventory, e.g. the helmet slot for players (Please note that slot support is still very limited but will be improved eventually).
		Since:
			1.0
		Patterns:
			inventor(y|ies)
	Inventory Action:
		ID: InventoryAction
		Description:
			What player just did in inventory event. Note that when in creative game mode, most actions do not work correctly.
		Usage: drop stack from slot, swap items with hotbar, swap cursor stack, pickup single item, pickup some, drop all from cursor, move to other inventory, drop cursor stack, pickup all, swap with hotbar, nothing, drop all from slot, swap cursor, drop cursor, pickup all items, drop slot item, place all, drop cursor item, drop slot stack, drop single item from slot, swap with cursor, place some, pickup one item, drop single item from cursor, collect items to cursor, unknown, clone stack, drop stack from cursor, drop one item from slot, drop one item from cursor, unsupported, do nothing, drop one from cursor, pickup half, drop items from slot, swap stack with cursor, place all items, collect to cursor, pickup some items, drop slot, drop items from cursor, hotbar move and readd, shift move, custom, pickup single, place one item, hotbar swap items, drop one from slot, place some items, place one, pickup half stack, instant move, hotbar swap
		Since:
			2.2-dev16
		Patterns:
			inventory[ ]action[s]
	Inventory Slot:
		ID: Slot
		Description:
			Represents a single slot of an inventory. Notable slots are the armour slots and furnace slots. 
			The most important property that distinguishes a slot from an item is its ability to be changed, e.g. it can be set, deleted, enchanted, etc. (Some item expressions can be changed as well, e.g. items stored in variables. For that matter: slots are never saved to variables, only the items they represent at the time when the variable is set).
			Please note that tool can be regarded a slot, but it can actually change it's position, i.e. doesn't represent always the same slot.
		Examples:
			set tool of player to dirt
			delete helmet of the victim
			set the color of the player's tool to green
			enchant the player's chestplate with projectile protection 5
		Patterns:
			[inventory ]slot[s]
	Inventory Type:
		ID: InventoryType
		Description:
			Minecraft has several different inventory types with their own use cases.
		Usage: barrel inventory, a loom inventory, a blast furnace inventory, workbench inventory, ender chest inventory, loom inventory, a workbench inventory, hopper inventory, a merchant inventory, a hopper inventory, chiseled bookshelf, an ender chest inventory, new smithing table, bookshelf, a jukebox, beacon inventory, shulker box inventory, a barrel inventory, a shulker box inventory, lectern inventory, chest inventory, a villager inventory, a smoker inventory, a brewing stand inventory, a smithing inventory, grindstone inventory, a crafting table inventory, a player inventory, furnace inventory, a creative inventory, blast furnace inventory, upgrade gear, a composter inventory, an enchanting table inventory, jukebox, a dropper inventory, a cartography table inventory, a upgrade gear, smoker inventory, composter inventory, a chest inventory, upgrade gear table, a upgrade gear table, dispenser inventory, player inventory, stonecutter inventory, a stonecutter inventory, a lectern inventory, merchant inventory, cartography table inventory, a chiseled bookshelf, a new smithing table, a furnace inventory, anvil inventory, a dispenser inventory, a grindstone inventory, smithing inventory, dropper inventory, brewing stand inventory, villager inventory, enchanting table inventory, a beacon inventory, a bookshelf, creative inventory, crafting table inventory, an anvil inventory
		Since:
			2.2-dev32
		Patterns:
			inventory[ ]type[s]
	Item:
		ID: ItemStack
		Description:
			An item, e.g. a stack of torches, a furnace, or a wooden sword of sharpness 2. Unlike item type an item can only represent exactly one item (e.g. an upside-down cobblestone stair facing west), while an item type can represent a whole range of items (e.g. any cobble stone stairs regardless of direction).
			You don't usually need this type except when you want to make a command that only accepts an exact item.
			Please note that currently 'material' is exactly the same as 'item', i.e. can have an amount & enchantments.
		Examples:
			set {_item} to type of the targeted block
			{_item} is a torch
		Usage: [&lt;number&gt; [of]] &lt;alias&gt; [of &lt;enchantment&gt; &lt;level&gt;], Where &lt;alias&gt; must be an alias that represents exactly one item (i.e cannot be a general alias like 'sword' or 'plant')
		Since:
			1.0
		Patterns:
			item[s]
	Item Type:
		ID: ItemType
		Description:
			An item type is an alias, e.g. 'a pickaxe', 'all plants', etc., and can result in different items when added to an inventory, and unlike items they are well suited for checking whether an inventory contains a certain item or whether a certain item is of a certain type.
			An item type can also have one or more enchantments with or without a specific level defined, and can optionally start with 'all' or 'every' to make this item type represent all types that the alias represents, including data ranges.
		Examples:
			give 4 torches to the player
			add all slabs to the inventory of the block
			player's tool is a diamond sword of sharpness
			remove a pickaxes of fortune 4 from {stored items::*}
			set {_item} to 10 of every upside-down stair
			block is dirt or farmland
		Usage: [&lt;number&gt; [of]] [all/every] &lt;alias&gt; [of &lt;enchantment&gt; [&lt;level&gt;] [,/and &lt;more enchantments...&gt;]]
		Since:
			1.0
		Patterns:
			item[ ]type[s]
			material[s]
	Laser:
		ID: Laser
		Description:
			A guardian beam.
		Since:
			1.3.1
		Patterns:
			lase[r][s]
	Living Entity:
		ID: LivingEntity
		Description:
			A living entity, i.e. a mob or player, not inanimate entities like projectiles or dropped items.
		Examples:
			spawn 5 powered creepers
			shoot a zombie from the creeper
		Usage: see entity, but ignore inanimate objects
		Since:
			1.0
		Patterns:
			living[ ]entit(y|ies)
	Location:
		ID: Location
		Description:
			A location in a world. Locations are world-specific and even store a direction, e.g. if you save a location and later teleport to it you will face the exact same direction you did when you saved the location.
		Since:
			1.0
		Patterns:
			location[s]
	Metadata Holder:
		ID: Metadatable
		Description:
			Something that can hold metadata (e.g. an entity or block)
		Examples:
			set metadata value "super cool" of player to true
		Since:
			2.2-dev36
		Patterns:
			metadata[ ]holder[s]
	Moon Phase:
		ID: MoonPhase
		Description:
			Represents the phase of a moon.
		Usage: last quarter, waning crescent, waxing gibbous, full moon, waning gibbous, waxing crescent, new moon, first quarter
		Since:
			2.7
		Patterns:
			(lunar|moon)[ ]phase[s]
	Number:
		ID: Number
		Description:
			A number, e.g. 2.5, 3, or -9812454.
			Please note that many expressions only need integers, i.e. will discard any fractional parts of any numbers without producing an error.
		Examples:
			set the player's health to 5.5
			set {_temp} to 2*{_temp} - 2.5
		Usage: [-]###[.###]</code> (any amount of digits; very large numbers will be truncated though)
		Since:
			1.0
		Patterns:
			num[ber][s]
	Object:
		ID: Object
		Description:
			The supertype of all types, meaning that if %object% is used in e.g. a condition it will accept all kinds of expressions.
		Since:
			1.0
		Patterns:
			object[s]
	Offline Player:
		ID: OfflinePlayer
		Description:
			A player that is possibly offline. See player for more information. Please note that while all effects and conditions that require a player can be used with an offline player as well, they will not work if the player is not actually online.
		Patterns:
			offline[ ]player[s]
	Player:
		ID: Player
		Description:
			A player. Depending on whether a player is online or offline several actions can be performed with them, though you won't get any errors when using effects that only work if the player is online (e.g. changing their inventory) on an offline player.
			You have two possibilities to use players as command arguments: &lt;player&gt; and &lt;offline player&gt;. The first requires that the player is online and also accepts only part of the name, while the latter doesn't require that the player is online, but the player's name has to be entered exactly.
		Since:
			1.0
		Patterns:
			player[s]
	Potion Effect:
		ID: PotionEffect
		Description:
			A potion effect, including the potion effect type, tier and duration.
		Usage: speed of tier 1 for 10 seconds
		Since:
			2.5.2
		Patterns:
			potion[ ]effect[s]
	Potion Effect Type:
		ID: PotionEffectType
		Description:
			A potion effect type, e.g. 'strength' or 'swiftness'.
		Examples:
			apply swiftness 5 to the player
			apply potion of speed 2 to the player for 60 seconds
			remove invisibility from the victim
		Usage: null, speed, slowness, haste, mining fatigue, strength, instant health, instant damage, jump boost, nausea, regeneration, resistance, fire resistance, water breathing, invisibility, blindness, night vision, hunger, weakness, poison, wither, health boost, absorption, saturation, glowing, levitation, luck, bad luck, slow falling, conduit power, dolphins grace, bad omen, hero of the village, darkness
		Patterns:
			potion[[ ]effect][ ]type[s]
	Projectile:
		ID: Projectile
		Description:
			A projectile, e.g. an arrow, snowball or thrown potion.
		Examples:
			projectile is a snowball
			shoot an arrow at speed 5 from the player
		Usage: arrow, fireball, snowball, thrown potion, etc.
		Since:
			1.0
		Patterns:
			projectile[s]
	Resource Pack State:
		ID: Status
		Description:
			The state in a resource pack request response event.
		Usage: refused, rejected, accepted, failed, failed to download, successfully loaded, accept, fail, successfully load, refuse, declined, successfully install, success, reject, decline, successfully installed, download fail
		Since:
			2.4
		Patterns:
			resource[ ]pack[ ]state[s]
	Server Icon:
		ID: CachedServerIcon
		Description:
			A server icon that was loaded using the load server icon effect.
		Since:
			2.3
		Patterns:
			server[ ]icon[s]
	Sound Category:
		ID: SoundCategory
		Description:
			The category of a sound, they are used for sound options of Minecraft. See the play sound and stop sound effects.
		Usage: hostile creatures category, speech category, records category, friendly creature category, noteblock category, hostile creature category, note block category, voice category, ambient category, noteblocks category, note blocks category, weather category, block category, friendly mob category, jukebox category, hostile mob category, master category, master volume category, hostile category, record category, blocks category, environment category, jukeboxes category, player category, players category, hostile mobs category, friendly mobs category, music category, friendly creatures category, neutral category
		Since:
			2.4
		Patterns:
			sound[ ]categor(y|ies)
	Spawn Reason:
		ID: SpawnReason
		Description:
			The spawn reason in a spawn event.
		Usage: dispense egg, egg, village defense, ocelot baby, silverfish trap, village invading, trap, dispensing egg, shoulder, drowned, metamorphosis, lightning, silverfish reveal, spell, built iron golem, natural, village invasion, frozen, mount, build wither, built wither, iron golem defense, ender pearl, creature spawner, reinforcements, build snowman, build iron golem, breeding, raid, infection, customized, spawn egg, jockey, beehive, default, golem defense, patrol, slime split, infected, sheared, mob spawner, nether portal, shear, perching, custom, built snowman, chunk generation, breed, command, duplication, explosion, spawner, cured, customised, piglin zombification
		Since:
			2.3
		Patterns:
			spawn[ing][ ]reason[s]
	Teleport Cause:
		ID: TeleportCause
		Description:
			The teleport cause in a teleport event.
		Usage: bed exit, nether portal, ender gateway, exiting bed, chorus fruit, ender portal, command, unknown, plugin, dismounted, ender pearl, spectator, spectate, end gateway, chorus, exit bed, gateway, dismount, end portal
		Since:
			2.2-dev35
		Patterns:
			teleport[ ](cause|reason|type)[s]
	Text:
		ID: String
		Description:
			Text is simply text, i.e. a sequence of characters, which can optionally contain expressions which will be replaced with a meaningful representation (e.g. %player% will be replaced with the player's name).
			Because scripts are also text, you have to put text into double quotes to tell Skript which part of the line is an effect/expression and which part is the text.
			Please read the article on Texts and Variable Names to learn more.
		Examples:
			broadcast "Hello World!"
			message "Hello %player%"
			message "The id of ""%type of tool%"" is %id of tool%."
		Usage: simple: "..."
quotes: "...""..."
expressions: "...%expression%..."
percent signs: "...%%..."
		Since:
			1.0
		Patterns:
			(text|string)[s]
	Time:
		ID: Time
		Description:
			A time is a point in a minecraft day's time (i.e. ranges from 0:00 to 23:59), which can vary per world.
			See date and timespan for the other time types of Skript.
		Examples:
			at 20:00:
				time is 8 pm
				broadcast "It's %time%"
		Usage: ##:##
##[:##][ ]am/pm
		Since:
			1.0
		Patterns:
			time[s]
	Timeperiod:
		ID: Timeperiod
		Description:
			A period of time between two times. Mostly useful since you can use this to test for whether it's day, night, dusk or dawn in a specific world.
			This type might be removed in the future as you can use 'time of world is between x and y' as a replacement.
		Examples:
			time in world is night
		Usage: ##:## - ##:##
dusk/day/dawn/night
		Since:
			1.0
		Patterns:
			time[ ]period[s]
			duration[s]
	Timespan:
		ID: Timespan
		Description:
			A timespan is a difference of two different dates or times, e.g '10 minutes'. Timespans are always displayed as real life time, but can be defined as minecraft time, e.g. '5 minecraft days and 12 hours'.
			NOTE: Months always have the value of 30 days, and years of 365 days.
			See date and time for the other time types of Skript.
		Examples:
			every 5 minecraft days:
				wait a minecraft second and 5 ticks
			every 10 mc days and 12 hours:
				halt for 12.7 irl minutes, 12 hours and 120.5 seconds
		Usage: &lt;number&gt; [minecraft/mc/real/rl/irl] ticks/seconds/minutes/hours/days/weeks/months/years [[,/and] &lt;more...&gt;]
[###:]##:##[.####] ([hours:]minutes:seconds[.milliseconds])
		Since:
			1.0, 2.6.1 (weeks, months, years)
		Patterns:
			time[ ]span[s]
	Tree Type:
		ID: StructureType
		Description:
			A tree type represents a tree species or a huge mushroom species. These can be generated in a world with the generate tree effect.
		Examples:
			grow any regular tree at the block
			grow a huge red mushroom above the block
		Usage: [any] &lt;general tree/mushroom type&gt;, e.g. tree/any jungle tree/etc.
&lt;specific tree/mushroom species&gt;, e.g. red mushroom/small jungle tree/big regular tree/etc.
		Patterns:
			tree[ ]type[s]
			tree[s]
	Type:
		ID: ClassInfo
		Description:
			Represents a type, e.g. number, object, item type, location, block, world, entity type, etc.
			This is mostly used for expressions like 'event-&lt;type&gt;', '&lt;type&gt;-argument', 'loop-&lt;type&gt;', etc., e.g. event-world, number-argument and loop-player.
		Examples:
			{variable} is a number # check whether the variable contains a number, e.g. -1 or 5.5
			{variable} is a type # check whether the variable contains a type, e.g. number or player
			{variable} is an object # will always succeed if the variable is set as everything is an object, even types.
			disable PvP in the event-world
			kill the loop-entity
		Usage: See the type name patterns of all types - including this one
		Since:
			2.0
		Patterns:
			type[s]
	Vector:
		ID: Vector
		Description:
			Vector is a collection of numbers. In Minecraft, 3D vectors are used to express velocities of entities.
		Usage: vector(x, y, z)
		Since:
			2.2-dev23
		Patterns:
			vector[s]
	Visual Effect:
		ID: VisualEffect
		Description:
			A visible effect, e.g. particles.
		Examples:
			show wolf hearts on the clicked wolf
			play mob spawner flames at the targeted block to the player
		Usage: smoke, potion break, ender signal, mobspawner flames, arrow particles, jumping rabbit, hurt, wolf smoke, wolf hearts, wolf shaking, sheep eating, iron golem offering rose, villager hearts, angry villager entity, happy villager entity, witch magic, zombie turning to a villager, firework explosion, love hearts, squid rotation reset, entity poof, guardian target, block with shield, shield break, armor stand hit, hurt by thorns, iron golem sheathing rose, resurrection by totem, hurt by drowning, hurt by explosion, explosion, large explosion, huge explosion, firework's spark, water bubble, water splash, water wake, suspended, void fog, critical hit, magical critical hit, smoke particle, large smoke, spell, spell, potion swirl, transparent potion swirl, witch spell, water drip, lava drip, angry villager, happy villager, small smoke, note, portal, flying glyph, flame, lava pop, cloud, coloured dust, snowball break, snow shovel, slime, heart, item crack, block break, block dust, water drop, mob appearance, dragon breath, end rod, damage indicator, sweep attack, falling dust, totem, spit, squid ink, bubble pop, current down, bubble column up, nautilus, dolphin, sneeze, campfire cosy smoke, campfire signal smoke, composter, flash, falling lava, landing lava, falling water, dripping honey, falling honey, landing honey, falling nectar, soul fire flame, ash, crimson spore, warped spore, soul, dripping obsidian tear, falling obsidian tear, landing obsidian tear, reverse portal, white ash, falling spore blossom, spore blossom air, small flame, snowflake, dripping dripstone lava, falling dripstone lava, dripping dripstone water, falling dripstone water, glow squid ink, glow, wax on, wax off, electric spark, scrape, sonic boom, sculk soul, sculk charge, sculk charge pop, shriek
		Since:
			2.1
		Patterns:
			(visual|particle) effect[s]
	Weather Type:
		ID: WeatherType
		Description:
			The weather types sunny, rainy, and thundering.
		Examples:
			is raining
			is sunny in the player's world
			message "It is %weather in the argument's world% in %world of the argument%"
		Usage: clear/sun/sunny, rain/rainy/raining, and thunder/thundering/thunderstorm
		Since:
			1.0
		Patterns:
			weather[ ]type[s]
			weather condition[s]
			weather[s]
	World:
		ID: World
		Description:
			One of the server's worlds. Worlds can be put into scripts by surrounding their name with double quotes, e.g. "world_nether", but this might not work reliably as text uses the same syntax.
		Examples:
			broadcast "Hello!" to the world "world_nether"
		Usage: "world_name", e.g. "world"
		Since:
			1.0, 2.2 (alternate syntax)
		Patterns:
			world[s]
	World Environment:
		ID: Environment
		Description:
			Represents the environment of a world.
		Usage: normal, nether, the end, the overworld, custom, the nether, end, overworld
		Since:
			2.7
		Patterns:
			[world[ ]]environment[s]
Functions:
	abs:
		Description:
			Returns the absolute value of the argument, i.e. makes the argument positive.
		Examples:
			abs(3) = 3
			abs(-2) = 2
		Since:
			2.2
		Return type: Number
		Patterns:
			abs(n: number)
	acos:
		Description:
			The inverse of the cosine, also called arccos. Returns result in degrees, not radians. Only returns values from 0 to 180.
		Examples:
			acos(0) = 90
			acos(1) = 0
			acos(0.5) = 30
		Since:
			2.2
		Return type: Number
		Patterns:
			acos(n: number)
	asin:
		Description:
			The inverse of the sine, also called arcsin. Returns result in degrees, not radians. Only returns values from -90 to 90.
		Examples:
			asin(0) = 0
			asin(1) = 90
			asin(0.5) = 30
		Since:
			2.2
		Return type: Number
		Patterns:
			asin(n: number)
	atan:
		Description:
			The inverse of the tangent, also called arctan. Returns result in degrees, not radians. Only returns values from -90 to 90.
		Examples:
			atan(0) = 0
			atan(1) = 45
			atan(10000) = 89.9943
		Since:
			2.2
		Return type: Number
		Patterns:
			atan(n: number)
	atan2:
		Description:
			Similar to atan, but requires two coordinates and returns values from -180 to 180.
			The returned angle is measured counterclockwise in a standard mathematical coordinate system (x to the right, y to the top).
		Examples:
			atan2(0, 1) = 0
			atan2(10, 0) = 90
			atan2(-10, 5) = -63.4349
		Since:
			2.2
		Return type: Number
		Patterns:
			atan2(x: number, y: number)
	calcExperience:
		Description:
			Calculates the total amount of experience needed to achieve given level from scratch in Minecraft.
		Since:
			2.2-dev32
		Return type: long
		Patterns:
			calcExperience(level: long)
	ceil:
		Description:
			Rounds a number up, i.e. returns the closest integer larger than or equal to the argument.
		Examples:
			ceil(2.34) = 3
			ceil(2) = 2
			ceil(2.99) = 3
		Since:
			2.2
		Return type: long
		Patterns:
			ceil(n: number)
	ceiling:
		Description:
			Alias of ceil.
		Examples:
			ceiling(2.34) = 3
			ceiling(2) = 2
			ceiling(2.99) = 3
		Since:
			2.2
		Return type: long
		Patterns:
			ceiling(n: number)
	cos:
		Description:
			The cosine function. This is basically the sine shifted by 90Â°, i.e. cos(a) = sin(a + 90Â°), for any number a. Uses degrees, not radians.
		Examples:
			cos(0) = 1
			cos(90) = 0
		Since:
			2.2
		Return type: Number
		Patterns:
			cos(n: number)
	date:
		Description:
			Creates a date from a year, month, and day, and optionally also from hour, minute, second and millisecond.
			A time zone and DST offset can be specified as well (in minutes), if they are left out the server's time zone and DST offset are used (the created date will not retain this information).
		Examples:
			date(2014, 10, 1) # 0:00, 1st October 2014
			date(1990, 3, 5, 14, 30) # 14:30, 5th May 1990
			date(1999, 12, 31, 23, 59, 59, 999, -3*60, 0) # almost year 2000 in parts of Brazil (-3 hours offset, no DST)
		Since:
			2.2
		Return type: Date
		Patterns:
			date(year: number, month: number, day: number, hour: number = [[integer:0]], minute: number = [[integer:0]], second: number = [[integer:0]], millisecond: number = [[integer:0]], zone_offset: number = [[double:NaN]], dst_offset: number = [[double:NaN]])
	exp:
		Description:
			The exponential function. You probably don't need this if you don't know what this is.
		Examples:
			exp(0) = 1
			exp(1) = 2.7183
		Since:
			2.2
		Return type: Number
		Patterns:
			exp(n: number)
	floor:
		Description:
			Rounds a number down, i.e. returns the closest integer smaller than or equal to the argument.
		Examples:
			floor(2.34) = 2
			floor(2) = 2
			floor(2.99) = 2
		Since:
			2.2
		Return type: long
		Patterns:
			floor(n: number)
	ln:
		Description:
			The natural logarithm. You probably don't need this if you don't know what this is.
			Returns NaN (not a number) if the argument is negative.
		Examples:
			ln(1) = 0
			ln(exp(5)) = 5
			ln(2) = 0.6931
		Since:
			2.2
		Return type: Number
		Patterns:
			ln(n: number)
	location:
		Description:
			Creates a location from a world and 3 coordinates, with an optional yaw and pitch.
			If for whatever reason the world is not found, it will fallback to the server's main world.
		Examples:
			location(0, 128, 0)
			location(player's x-coordinate, player's y-coordinate + 5, player's z-coordinate, player's world, 0, 90)
			location(0, 64, 0, world "world_nether")
			location(100, 110, -145, world("my_custom_world"))
		Since:
			2.2
		Return type: Location
		Patterns:
			location(x: number, y: number, z: number, world: world = event-world, yaw: number = [[integer:0]], pitch: number = [[integer:0]])
	log:
		Description:
			A logarithm, with base 10 if none is specified. This is the inverse operation to exponentiation (for positive bases only), i.e. log(base ^ exponent, base) = exponent for any positive number 'base' and any number 'exponent'.
			Another useful equation is base ^ log(a, base) = a for any numbers 'base' and 'a'.
			Please note that due to how numbers are represented in computers, these equations do not hold for all numbers, as the computed values may slightly differ from the correct value.
			Returns NaN (not a number) if any of the arguments are negative.
		Examples:
			log(100) = 2 # 10^2 = 100
			log(16, 2) = 4 # 2^4 = 16
		Since:
			2.2
		Return type: Number
		Patterns:
			log(n: number, base: number = [[integer:10]])
	max:
		Description:
			Returns the maximum number from a list of numbers.
		Examples:
			max(1) = 1
			max(1, 2, 3, 4) = 4
			max({some list variable::*})
		Since:
			2.2
		Return type: Number
		Patterns:
			max(ns: numbers)
	min:
		Description:
			Returns the minimum number from a list of numbers.
		Examples:
			min(1) = 1
			min(1, 2, 3, 4) = 1
			min({some list variable::*})
		Since:
			2.2
		Return type: Number
		Patterns:
			min(ns: numbers)
	mod:
		Description:
			Returns the modulo of the given arguments, i.e. the remainder of the division d/m, where d and m are the arguments of this function.
			The returned value is always positive. Returns NaN (not a number) if the second argument is zero.
		Examples:
			mod(3, 2) = 1
			mod(256436, 100) = 36
			mod(-1, 10) = 9
		Since:
			2.2
		Return type: Number
		Patterns:
			mod(d: number, m: number)
	product:
		Description:
			Calculates the product of a list of numbers.
		Examples:
			product(1) = 1
			product(2, 3, 4) = 24
			product({some list variable::*})
			product(2, {_v::*}, and the player's y-coordinate)
		Since:
			2.2
		Return type: Number
		Patterns:
			product(ns: numbers)
	rgb:
		Description:
			Returns a RGB color from the given red, green and blue parameters.
		Examples:
			dye player's leggings rgb(120, 30, 45)
		Since:
			2.5
		Return type: Color
		Patterns:
			rgb(red: long, green: long, blue: long)
	round:
		Description:
			Rounds a number, i.e. returns the closest integer to the argument. Place a second argument to define the decimal placement.
		Examples:
			round(2.34) = 2
			round(2) = 2
			round(2.99) = 3
			round(2.5) = 3
		Since:
			2.2, 2.7 (decimal placement)
		Return type: Number
		Patterns:
			round(n: number, d: number = [[integer:0]])
	sin:
		Description:
			The sine function. It starts at 0Â° with a value of 0, goes to 1 at 90Â°, back to 0 at 180Â°, to -1 at 270Â° and then repeats every 360Â°. Uses degrees, not radians.
		Examples:
			sin(90) = 1
			sin(60) = 0.866
		Since:
			2.2
		Return type: Number
		Patterns:
			sin(n: number)
	sqrt:
		Description:
			The square root, which is the inverse operation to squaring a number (for positive numbers only). This is the same as (argument) ^ (1/2) â other roots can be calculated via number ^ (1/root), e.g. set {_l} to {_volume}^(1/3).
			Returns NaN (not a number) if the argument is negative.
		Examples:
			sqrt(4) = 2
			sqrt(2) = 1.4142
			sqrt(-1) = NaN
		Since:
			2.2
		Return type: Number
		Patterns:
			sqrt(n: number)
	sum:
		Description:
			Sums a list of numbers.
		Examples:
			sum(1) = 1
			sum(2, 3, 4) = 9
			sum({some list variable::*})
			sum(2, {_v::*}, and the player's y-coordinate)
		Since:
			2.2
		Return type: Number
		Patterns:
			sum(ns: numbers)
	tan:
		Description:
			The tangent function. This is basically <a href='#sin'>sin(arg)/cos(arg)</code>. Uses degrees, not radians.
		Examples:
			tan(0) = 0
			tan(45) = 1
			tan(89.99) = 5729.5779
		Since:
			2.2
		Return type: Number
		Patterns:
			tan(n: number)
	vector:
		Description:
			Creates a new vector, which can be used with various expressions, effects and functions.
		Examples:
			vector(0, 0, 0)
		Since:
			2.2-dev23
		Return type: Vector
		Patterns:
			vector(x: number, y: number, z: number)
	world:
		Description:
			Gets a world from its name.
		Examples:
			set {_nether} to world("%{_world}%_nether")
		Since:
			2.2
		Return type: World
		Patterns:
			world(name: string)